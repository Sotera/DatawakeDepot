(function(window, angular, undefined) {'use strict';

var urlBase = "/api";
var authHeader = 'authorization';

/**
 * @ngdoc overview
 * @name lbServices
 * @module
 * @description
 *
 * The `lbServices` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
var module = angular.module("lbServices", ['ngResource']);

/**
 * @ngdoc object
 * @name lbServices.AccessToken
 * @header lbServices.AccessToken
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AccessToken` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "AccessToken",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/accessTokens/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use AccessToken.user() instead.
        "prototype$__get__user": {
          url: urlBase + "/accessTokens/:id/user",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AccessToken#create
         * @methodOf lbServices.AccessToken
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccessToken` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/accessTokens",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.AccessToken#createMany
         * @methodOf lbServices.AccessToken
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccessToken` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/accessTokens",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.AccessToken#upsert
         * @methodOf lbServices.AccessToken
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccessToken` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/accessTokens",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.AccessToken#exists
         * @methodOf lbServices.AccessToken
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/accessTokens/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AccessToken#findById
         * @methodOf lbServices.AccessToken
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccessToken` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/accessTokens/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AccessToken#find
         * @methodOf lbServices.AccessToken
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccessToken` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/accessTokens",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AccessToken#findOne
         * @methodOf lbServices.AccessToken
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccessToken` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/accessTokens/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AccessToken#updateAll
         * @methodOf lbServices.AccessToken
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/accessTokens/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.AccessToken#deleteById
         * @methodOf lbServices.AccessToken
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/accessTokens/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.AccessToken#count
         * @methodOf lbServices.AccessToken
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/accessTokens/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AccessToken#prototype$updateAttributes
         * @methodOf lbServices.AccessToken
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AccessToken id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccessToken` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/accessTokens/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.AccessToken#createChangeStream
         * @methodOf lbServices.AccessToken
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/accessTokens/change-stream",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.accessTokens.findById() instead.
        "::findById::AminoUser::accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/accessTokens/:fk",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.accessTokens.destroyById() instead.
        "::destroyById::AminoUser::accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/accessTokens/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.accessTokens.updateById() instead.
        "::updateById::AminoUser::accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/accessTokens/:fk",
          method: "PUT"
        },

        // INTERNAL. Use AminoUser.accessTokens() instead.
        "::get::AminoUser::accessTokens": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/accessTokens",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.accessTokens.create() instead.
        "::create::AminoUser::accessTokens": {
          url: urlBase + "/AminoUsers/:id/accessTokens",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.accessTokens.createMany() instead.
        "::createMany::AminoUser::accessTokens": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/accessTokens",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.accessTokens.destroyAll() instead.
        "::delete::AminoUser::accessTokens": {
          url: urlBase + "/AminoUsers/:id/accessTokens",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.accessTokens.count() instead.
        "::count::AminoUser::accessTokens": {
          url: urlBase + "/AminoUsers/:id/accessTokens/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.AccessToken#updateOrCreate
         * @methodOf lbServices.AccessToken
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccessToken` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.AccessToken#update
         * @methodOf lbServices.AccessToken
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.AccessToken#destroyById
         * @methodOf lbServices.AccessToken
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.AccessToken#removeById
         * @methodOf lbServices.AccessToken
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.AccessToken#modelName
    * @propertyOf lbServices.AccessToken
    * @description
    * The name of the model represented by this $resource,
    * i.e. `AccessToken`.
    */
    R.modelName = "AccessToken";


        /**
         * @ngdoc method
         * @name lbServices.AccessToken#user
         * @methodOf lbServices.AccessToken
         *
         * @description
         *
         * Fetches belongsTo relation user.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AccessToken id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.user = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::get::accessToken::user"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.RoleMapping
 * @header lbServices.RoleMapping
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `RoleMapping` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "RoleMapping",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/RoleMappings/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use RoleMapping.role() instead.
        "prototype$__get__role": {
          url: urlBase + "/RoleMappings/:id/role",
          method: "GET"
        },

        // INTERNAL. Use RoleMapping.aminoUser() instead.
        "prototype$__get__aminoUser": {
          url: urlBase + "/RoleMappings/:id/aminoUser",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.RoleMapping#create
         * @methodOf lbServices.RoleMapping
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RoleMapping` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/RoleMappings",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.RoleMapping#createMany
         * @methodOf lbServices.RoleMapping
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RoleMapping` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/RoleMappings",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.RoleMapping#upsert
         * @methodOf lbServices.RoleMapping
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RoleMapping` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/RoleMappings",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.RoleMapping#exists
         * @methodOf lbServices.RoleMapping
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/RoleMappings/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.RoleMapping#findById
         * @methodOf lbServices.RoleMapping
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RoleMapping` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/RoleMappings/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.RoleMapping#find
         * @methodOf lbServices.RoleMapping
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RoleMapping` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/RoleMappings",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.RoleMapping#findOne
         * @methodOf lbServices.RoleMapping
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RoleMapping` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/RoleMappings/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.RoleMapping#updateAll
         * @methodOf lbServices.RoleMapping
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/RoleMappings/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.RoleMapping#deleteById
         * @methodOf lbServices.RoleMapping
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/RoleMappings/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.RoleMapping#count
         * @methodOf lbServices.RoleMapping
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/RoleMappings/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.RoleMapping#prototype$updateAttributes
         * @methodOf lbServices.RoleMapping
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RoleMapping` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/RoleMappings/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.RoleMapping#createChangeStream
         * @methodOf lbServices.RoleMapping
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/RoleMappings/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Role.principals.findById() instead.
        "::findById::Role::principals": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Roles/:id/principals/:fk",
          method: "GET"
        },

        // INTERNAL. Use Role.principals.destroyById() instead.
        "::destroyById::Role::principals": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Roles/:id/principals/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Role.principals.updateById() instead.
        "::updateById::Role::principals": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Roles/:id/principals/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Role.principals() instead.
        "::get::Role::principals": {
          isArray: true,
          url: urlBase + "/Roles/:id/principals",
          method: "GET"
        },

        // INTERNAL. Use Role.principals.create() instead.
        "::create::Role::principals": {
          url: urlBase + "/Roles/:id/principals",
          method: "POST"
        },

        // INTERNAL. Use Role.principals.createMany() instead.
        "::createMany::Role::principals": {
          isArray: true,
          url: urlBase + "/Roles/:id/principals",
          method: "POST"
        },

        // INTERNAL. Use Role.principals.destroyAll() instead.
        "::delete::Role::principals": {
          url: urlBase + "/Roles/:id/principals",
          method: "DELETE"
        },

        // INTERNAL. Use Role.principals.count() instead.
        "::count::Role::principals": {
          url: urlBase + "/Roles/:id/principals/count",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.roleMappings.findById() instead.
        "::findById::AminoUser::roleMappings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/roleMappings/:fk",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.roleMappings.destroyById() instead.
        "::destroyById::AminoUser::roleMappings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/roleMappings/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.roleMappings.updateById() instead.
        "::updateById::AminoUser::roleMappings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/roleMappings/:fk",
          method: "PUT"
        },

        // INTERNAL. Use AminoUser.roleMappings() instead.
        "::get::AminoUser::roleMappings": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/roleMappings",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.roleMappings.create() instead.
        "::create::AminoUser::roleMappings": {
          url: urlBase + "/AminoUsers/:id/roleMappings",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.roleMappings.createMany() instead.
        "::createMany::AminoUser::roleMappings": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/roleMappings",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.roleMappings.destroyAll() instead.
        "::delete::AminoUser::roleMappings": {
          url: urlBase + "/AminoUsers/:id/roleMappings",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.roleMappings.count() instead.
        "::count::AminoUser::roleMappings": {
          url: urlBase + "/AminoUsers/:id/roleMappings/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.RoleMapping#updateOrCreate
         * @methodOf lbServices.RoleMapping
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RoleMapping` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.RoleMapping#update
         * @methodOf lbServices.RoleMapping
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.RoleMapping#destroyById
         * @methodOf lbServices.RoleMapping
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.RoleMapping#removeById
         * @methodOf lbServices.RoleMapping
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.RoleMapping#modelName
    * @propertyOf lbServices.RoleMapping
    * @description
    * The name of the model represented by this $resource,
    * i.e. `RoleMapping`.
    */
    R.modelName = "RoleMapping";


        /**
         * @ngdoc method
         * @name lbServices.RoleMapping#role
         * @methodOf lbServices.RoleMapping
         *
         * @description
         *
         * Fetches belongsTo relation role.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Role` object.)
         * </em>
         */
        R.role = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::get::RoleMapping::role"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.RoleMapping#aminoUser
         * @methodOf lbServices.RoleMapping
         *
         * @description
         *
         * Fetches belongsTo relation aminoUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.aminoUser = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::get::RoleMapping::aminoUser"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Role
 * @header lbServices.Role
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Role` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Role",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/Roles/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Role.principals.findById() instead.
        "prototype$__findById__principals": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Roles/:id/principals/:fk",
          method: "GET"
        },

        // INTERNAL. Use Role.principals.destroyById() instead.
        "prototype$__destroyById__principals": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Roles/:id/principals/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Role.principals.updateById() instead.
        "prototype$__updateById__principals": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Roles/:id/principals/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Role.aminoUsers.findById() instead.
        "prototype$__findById__aminoUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Roles/:id/aminoUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use Role.aminoUsers.destroyById() instead.
        "prototype$__destroyById__aminoUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Roles/:id/aminoUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Role.aminoUsers.updateById() instead.
        "prototype$__updateById__aminoUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Roles/:id/aminoUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Role.aminoUsers.link() instead.
        "prototype$__link__aminoUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Roles/:id/aminoUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Role.aminoUsers.unlink() instead.
        "prototype$__unlink__aminoUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Roles/:id/aminoUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Role.aminoUsers.exists() instead.
        "prototype$__exists__aminoUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Roles/:id/aminoUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Role.principals() instead.
        "prototype$__get__principals": {
          isArray: true,
          url: urlBase + "/Roles/:id/principals",
          method: "GET"
        },

        // INTERNAL. Use Role.principals.create() instead.
        "prototype$__create__principals": {
          url: urlBase + "/Roles/:id/principals",
          method: "POST"
        },

        // INTERNAL. Use Role.principals.destroyAll() instead.
        "prototype$__delete__principals": {
          url: urlBase + "/Roles/:id/principals",
          method: "DELETE"
        },

        // INTERNAL. Use Role.principals.count() instead.
        "prototype$__count__principals": {
          url: urlBase + "/Roles/:id/principals/count",
          method: "GET"
        },

        // INTERNAL. Use Role.aminoUsers() instead.
        "prototype$__get__aminoUsers": {
          isArray: true,
          url: urlBase + "/Roles/:id/aminoUsers",
          method: "GET"
        },

        // INTERNAL. Use Role.aminoUsers.create() instead.
        "prototype$__create__aminoUsers": {
          url: urlBase + "/Roles/:id/aminoUsers",
          method: "POST"
        },

        // INTERNAL. Use Role.aminoUsers.destroyAll() instead.
        "prototype$__delete__aminoUsers": {
          url: urlBase + "/Roles/:id/aminoUsers",
          method: "DELETE"
        },

        // INTERNAL. Use Role.aminoUsers.count() instead.
        "prototype$__count__aminoUsers": {
          url: urlBase + "/Roles/:id/aminoUsers/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Role#create
         * @methodOf lbServices.Role
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Role` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/Roles",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Role#createMany
         * @methodOf lbServices.Role
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Role` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/Roles",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Role#upsert
         * @methodOf lbServices.Role
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Role` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/Roles",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Role#exists
         * @methodOf lbServices.Role
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/Roles/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Role#findById
         * @methodOf lbServices.Role
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Role` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/Roles/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Role#find
         * @methodOf lbServices.Role
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Role` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/Roles",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Role#findOne
         * @methodOf lbServices.Role
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Role` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/Roles/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Role#updateAll
         * @methodOf lbServices.Role
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/Roles/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Role#deleteById
         * @methodOf lbServices.Role
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/Roles/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Role#count
         * @methodOf lbServices.Role
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/Roles/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Role#prototype$updateAttributes
         * @methodOf lbServices.Role
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Role` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/Roles/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Role#createChangeStream
         * @methodOf lbServices.Role
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/Roles/change-stream",
          method: "POST"
        },

        // INTERNAL. Use RoleMapping.role() instead.
        "::get::RoleMapping::role": {
          url: urlBase + "/RoleMappings/:id/role",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.roles.findById() instead.
        "::findById::AminoUser::roles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/roles/:fk",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.roles.destroyById() instead.
        "::destroyById::AminoUser::roles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/roles/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.roles.updateById() instead.
        "::updateById::AminoUser::roles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/roles/:fk",
          method: "PUT"
        },

        // INTERNAL. Use AminoUser.roles.link() instead.
        "::link::AminoUser::roles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/roles/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use AminoUser.roles.unlink() instead.
        "::unlink::AminoUser::roles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/roles/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.roles.exists() instead.
        "::exists::AminoUser::roles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/roles/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use AminoUser.roles() instead.
        "::get::AminoUser::roles": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/roles",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.roles.create() instead.
        "::create::AminoUser::roles": {
          url: urlBase + "/AminoUsers/:id/roles",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.roles.createMany() instead.
        "::createMany::AminoUser::roles": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/roles",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.roles.destroyAll() instead.
        "::delete::AminoUser::roles": {
          url: urlBase + "/AminoUsers/:id/roles",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.roles.count() instead.
        "::count::AminoUser::roles": {
          url: urlBase + "/AminoUsers/:id/roles/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Role#updateOrCreate
         * @methodOf lbServices.Role
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Role` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Role#update
         * @methodOf lbServices.Role
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Role#destroyById
         * @methodOf lbServices.Role
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Role#removeById
         * @methodOf lbServices.Role
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Role#modelName
    * @propertyOf lbServices.Role
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Role`.
    */
    R.modelName = "Role";

    /**
     * @ngdoc object
     * @name lbServices.Role.principals
     * @header lbServices.Role.principals
     * @object
     * @description
     *
     * The object `Role.principals` groups methods
     * manipulating `RoleMapping` instances related to `Role`.
     *
     * Call {@link lbServices.Role#principals Role.principals()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Role#principals
         * @methodOf lbServices.Role
         *
         * @description
         *
         * Queries principals of Role.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RoleMapping` object.)
         * </em>
         */
        R.principals = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::get::Role::principals"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Role.principals#count
         * @methodOf lbServices.Role.principals
         *
         * @description
         *
         * Counts principals of Role.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.principals.count = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::count::Role::principals"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Role.principals#create
         * @methodOf lbServices.Role.principals
         *
         * @description
         *
         * Creates a new instance in principals of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RoleMapping` object.)
         * </em>
         */
        R.principals.create = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::create::Role::principals"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Role.principals#createMany
         * @methodOf lbServices.Role.principals
         *
         * @description
         *
         * Creates a new instance in principals of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RoleMapping` object.)
         * </em>
         */
        R.principals.createMany = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::createMany::Role::principals"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Role.principals#destroyAll
         * @methodOf lbServices.Role.principals
         *
         * @description
         *
         * Deletes all principals of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.principals.destroyAll = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::delete::Role::principals"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Role.principals#destroyById
         * @methodOf lbServices.Role.principals
         *
         * @description
         *
         * Delete a related item by id for principals.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for principals
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.principals.destroyById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::destroyById::Role::principals"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Role.principals#findById
         * @methodOf lbServices.Role.principals
         *
         * @description
         *
         * Find a related item by id for principals.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for principals
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RoleMapping` object.)
         * </em>
         */
        R.principals.findById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::findById::Role::principals"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Role.principals#updateById
         * @methodOf lbServices.Role.principals
         *
         * @description
         *
         * Update a related item by id for principals.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for principals
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RoleMapping` object.)
         * </em>
         */
        R.principals.updateById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::updateById::Role::principals"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.Role.aminoUsers
     * @header lbServices.Role.aminoUsers
     * @object
     * @description
     *
     * The object `Role.aminoUsers` groups methods
     * manipulating `AminoUser` instances related to `Role`.
     *
     * Call {@link lbServices.Role#aminoUsers Role.aminoUsers()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Role#aminoUsers
         * @methodOf lbServices.Role
         *
         * @description
         *
         * Queries aminoUsers of Role.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.aminoUsers = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::get::Role::aminoUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Role.aminoUsers#count
         * @methodOf lbServices.Role.aminoUsers
         *
         * @description
         *
         * Counts aminoUsers of Role.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.aminoUsers.count = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::count::Role::aminoUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Role.aminoUsers#create
         * @methodOf lbServices.Role.aminoUsers
         *
         * @description
         *
         * Creates a new instance in aminoUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.aminoUsers.create = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::create::Role::aminoUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Role.aminoUsers#createMany
         * @methodOf lbServices.Role.aminoUsers
         *
         * @description
         *
         * Creates a new instance in aminoUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.aminoUsers.createMany = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::createMany::Role::aminoUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Role.aminoUsers#destroyAll
         * @methodOf lbServices.Role.aminoUsers
         *
         * @description
         *
         * Deletes all aminoUsers of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.aminoUsers.destroyAll = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::delete::Role::aminoUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Role.aminoUsers#destroyById
         * @methodOf lbServices.Role.aminoUsers
         *
         * @description
         *
         * Delete a related item by id for aminoUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for aminoUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.aminoUsers.destroyById = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::destroyById::Role::aminoUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Role.aminoUsers#exists
         * @methodOf lbServices.Role.aminoUsers
         *
         * @description
         *
         * Check the existence of aminoUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for aminoUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.aminoUsers.exists = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::exists::Role::aminoUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Role.aminoUsers#findById
         * @methodOf lbServices.Role.aminoUsers
         *
         * @description
         *
         * Find a related item by id for aminoUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for aminoUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.aminoUsers.findById = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::findById::Role::aminoUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Role.aminoUsers#link
         * @methodOf lbServices.Role.aminoUsers
         *
         * @description
         *
         * Add a related item by id for aminoUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for aminoUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.aminoUsers.link = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::link::Role::aminoUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Role.aminoUsers#unlink
         * @methodOf lbServices.Role.aminoUsers
         *
         * @description
         *
         * Remove the aminoUsers relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for aminoUsers
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.aminoUsers.unlink = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::unlink::Role::aminoUsers"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Role.aminoUsers#updateById
         * @methodOf lbServices.Role.aminoUsers
         *
         * @description
         *
         * Update a related item by id for aminoUsers.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for aminoUsers
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.aminoUsers.updateById = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::updateById::Role::aminoUsers"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.UserCredential
 * @header lbServices.UserCredential
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `UserCredential` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "UserCredential",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/userCredentials/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use UserCredential.user() instead.
        "prototype$__get__user": {
          url: urlBase + "/userCredentials/:id/user",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserCredential#create
         * @methodOf lbServices.UserCredential
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserCredential` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/userCredentials",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserCredential#createMany
         * @methodOf lbServices.UserCredential
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserCredential` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/userCredentials",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserCredential#upsert
         * @methodOf lbServices.UserCredential
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserCredential` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/userCredentials",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserCredential#exists
         * @methodOf lbServices.UserCredential
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/userCredentials/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserCredential#findById
         * @methodOf lbServices.UserCredential
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserCredential` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/userCredentials/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserCredential#find
         * @methodOf lbServices.UserCredential
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserCredential` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/userCredentials",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserCredential#findOne
         * @methodOf lbServices.UserCredential
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserCredential` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/userCredentials/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserCredential#updateAll
         * @methodOf lbServices.UserCredential
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/userCredentials/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserCredential#deleteById
         * @methodOf lbServices.UserCredential
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/userCredentials/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserCredential#count
         * @methodOf lbServices.UserCredential
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/userCredentials/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserCredential#prototype$updateAttributes
         * @methodOf lbServices.UserCredential
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - UserCredential id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserCredential` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/userCredentials/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserCredential#createChangeStream
         * @methodOf lbServices.UserCredential
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/userCredentials/change-stream",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.credentials.findById() instead.
        "::findById::AminoUser::credentials": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/credentials/:fk",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.credentials.destroyById() instead.
        "::destroyById::AminoUser::credentials": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/credentials/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.credentials.updateById() instead.
        "::updateById::AminoUser::credentials": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/credentials/:fk",
          method: "PUT"
        },

        // INTERNAL. Use AminoUser.credentials() instead.
        "::get::AminoUser::credentials": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/credentials",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.credentials.create() instead.
        "::create::AminoUser::credentials": {
          url: urlBase + "/AminoUsers/:id/credentials",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.credentials.createMany() instead.
        "::createMany::AminoUser::credentials": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/credentials",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.credentials.destroyAll() instead.
        "::delete::AminoUser::credentials": {
          url: urlBase + "/AminoUsers/:id/credentials",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.credentials.count() instead.
        "::count::AminoUser::credentials": {
          url: urlBase + "/AminoUsers/:id/credentials/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.UserCredential#updateOrCreate
         * @methodOf lbServices.UserCredential
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserCredential` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.UserCredential#update
         * @methodOf lbServices.UserCredential
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.UserCredential#destroyById
         * @methodOf lbServices.UserCredential
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.UserCredential#removeById
         * @methodOf lbServices.UserCredential
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.UserCredential#modelName
    * @propertyOf lbServices.UserCredential
    * @description
    * The name of the model represented by this $resource,
    * i.e. `UserCredential`.
    */
    R.modelName = "UserCredential";


        /**
         * @ngdoc method
         * @name lbServices.UserCredential#user
         * @methodOf lbServices.UserCredential
         *
         * @description
         *
         * Fetches belongsTo relation user.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - UserCredential id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.user = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::get::userCredential::user"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.UserIdentity
 * @header lbServices.UserIdentity
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `UserIdentity` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "UserIdentity",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/userIdentities/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use UserIdentity.user() instead.
        "prototype$__get__user": {
          url: urlBase + "/userIdentities/:id/user",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#create
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/userIdentities",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#createMany
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/userIdentities",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#upsert
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/userIdentities",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#exists
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/userIdentities/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#findById
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/userIdentities/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#find
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/userIdentities",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#findOne
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/userIdentities/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#updateAll
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/userIdentities/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#deleteById
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/userIdentities/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#count
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/userIdentities/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#prototype$updateAttributes
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - UserIdentity id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/userIdentities/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#createChangeStream
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/userIdentities/change-stream",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.identities.findById() instead.
        "::findById::AminoUser::identities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/identities/:fk",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.identities.destroyById() instead.
        "::destroyById::AminoUser::identities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/identities/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.identities.updateById() instead.
        "::updateById::AminoUser::identities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/identities/:fk",
          method: "PUT"
        },

        // INTERNAL. Use AminoUser.identities() instead.
        "::get::AminoUser::identities": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/identities",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.identities.create() instead.
        "::create::AminoUser::identities": {
          url: urlBase + "/AminoUsers/:id/identities",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.identities.createMany() instead.
        "::createMany::AminoUser::identities": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/identities",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.identities.destroyAll() instead.
        "::delete::AminoUser::identities": {
          url: urlBase + "/AminoUsers/:id/identities",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.identities.count() instead.
        "::count::AminoUser::identities": {
          url: urlBase + "/AminoUsers/:id/identities/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#updateOrCreate
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#update
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#destroyById
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#removeById
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.UserIdentity#modelName
    * @propertyOf lbServices.UserIdentity
    * @description
    * The name of the model represented by this $resource,
    * i.e. `UserIdentity`.
    */
    R.modelName = "UserIdentity";


        /**
         * @ngdoc method
         * @name lbServices.UserIdentity#user
         * @methodOf lbServices.UserIdentity
         *
         * @description
         *
         * Fetches belongsTo relation user.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - UserIdentity id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.user = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::get::userIdentity::user"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Page
 * @header lbServices.Page
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Page` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Page",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/pages/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Page#create
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/pages",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#createMany
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/pages",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#upsert
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/pages",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#exists
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/pages/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#findById
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/pages/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#find
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/pages",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#findOne
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/pages/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#updateAll
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/pages/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#deleteById
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/pages/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#count
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/pages/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#prototype$updateAttributes
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/pages/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#createChangeStream
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/pages/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Page#html
         * @methodOf lbServices.Page
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `content` – `{string=}` - 
         */
        "html": {
          url: urlBase + "/pages/html",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Page#updateOrCreate
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Page` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Page#update
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Page#destroyById
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Page#removeById
         * @methodOf lbServices.Page
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Page#modelName
    * @propertyOf lbServices.Page
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Page`.
    */
    R.modelName = "Page";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Note
 * @header lbServices.Note
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Note` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Note",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/notes/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Note#create
         * @methodOf lbServices.Note
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Note` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/notes",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Note#createMany
         * @methodOf lbServices.Note
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Note` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/notes",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Note#upsert
         * @methodOf lbServices.Note
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Note` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/notes",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Note#exists
         * @methodOf lbServices.Note
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/notes/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Note#findById
         * @methodOf lbServices.Note
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Note` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/notes/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Note#find
         * @methodOf lbServices.Note
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Note` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/notes",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Note#findOne
         * @methodOf lbServices.Note
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Note` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/notes/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Note#updateAll
         * @methodOf lbServices.Note
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/notes/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Note#deleteById
         * @methodOf lbServices.Note
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/notes/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Note#count
         * @methodOf lbServices.Note
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/notes/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Note#prototype$updateAttributes
         * @methodOf lbServices.Note
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Note` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/notes/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Note#createChangeStream
         * @methodOf lbServices.Note
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/notes/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Note#updateOrCreate
         * @methodOf lbServices.Note
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Note` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Note#update
         * @methodOf lbServices.Note
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Note#destroyById
         * @methodOf lbServices.Note
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Note#removeById
         * @methodOf lbServices.Note
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Note#modelName
    * @propertyOf lbServices.Note
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Note`.
    */
    R.modelName = "Note";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Post
 * @header lbServices.Post
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Post` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Post",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/posts/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Post#create
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/posts",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#createMany
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/posts",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#upsert
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/posts",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#exists
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/posts/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#findById
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/posts/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#find
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/posts",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#findOne
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/posts/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#updateAll
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/posts/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#deleteById
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/posts/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#count
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/posts/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#prototype$updateAttributes
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - AppModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/posts/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Post#createChangeStream
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/posts/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Post#updateOrCreate
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Post` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Post#update
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Post#destroyById
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Post#removeById
         * @methodOf lbServices.Post
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Post#modelName
    * @propertyOf lbServices.Post
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Post`.
    */
    R.modelName = "Post";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Setting
 * @header lbServices.Setting
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Setting` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Setting",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/settings/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Setting#create
         * @methodOf lbServices.Setting
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Setting` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/settings",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Setting#createMany
         * @methodOf lbServices.Setting
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Setting` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/settings",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Setting#upsert
         * @methodOf lbServices.Setting
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Setting` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/settings",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Setting#exists
         * @methodOf lbServices.Setting
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/settings/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Setting#findById
         * @methodOf lbServices.Setting
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Setting` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/settings/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Setting#find
         * @methodOf lbServices.Setting
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Setting` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/settings",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Setting#findOne
         * @methodOf lbServices.Setting
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Setting` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/settings/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Setting#updateAll
         * @methodOf lbServices.Setting
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/settings/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Setting#deleteById
         * @methodOf lbServices.Setting
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/settings/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Setting#count
         * @methodOf lbServices.Setting
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/settings/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Setting#prototype$updateAttributes
         * @methodOf lbServices.Setting
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Setting` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/settings/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Setting#createChangeStream
         * @methodOf lbServices.Setting
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/settings/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Setting#updateOrCreate
         * @methodOf lbServices.Setting
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Setting` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Setting#update
         * @methodOf lbServices.Setting
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Setting#destroyById
         * @methodOf lbServices.Setting
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Setting#removeById
         * @methodOf lbServices.Setting
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Setting#modelName
    * @propertyOf lbServices.Setting
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Setting`.
    */
    R.modelName = "Setting";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Product
 * @header lbServices.Product
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Product` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Product",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/products/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Product.category() instead.
        "prototype$__get__category": {
          url: urlBase + "/products/:id/category",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#create
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/products",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#createMany
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/products",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#upsert
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/products",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#exists
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/products/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#findById
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/products/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#find
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/products",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#findOne
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/products/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#updateAll
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/products/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#deleteById
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/products/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#count
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/products/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#prototype$updateAttributes
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/products/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Product#createChangeStream
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/products/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Category.products.findById() instead.
        "::findById::Category::products": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/categories/:id/products/:fk",
          method: "GET"
        },

        // INTERNAL. Use Category.products.destroyById() instead.
        "::destroyById::Category::products": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/categories/:id/products/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Category.products.updateById() instead.
        "::updateById::Category::products": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/categories/:id/products/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Category.products() instead.
        "::get::Category::products": {
          isArray: true,
          url: urlBase + "/categories/:id/products",
          method: "GET"
        },

        // INTERNAL. Use Category.products.create() instead.
        "::create::Category::products": {
          url: urlBase + "/categories/:id/products",
          method: "POST"
        },

        // INTERNAL. Use Category.products.createMany() instead.
        "::createMany::Category::products": {
          isArray: true,
          url: urlBase + "/categories/:id/products",
          method: "POST"
        },

        // INTERNAL. Use Category.products.destroyAll() instead.
        "::delete::Category::products": {
          url: urlBase + "/categories/:id/products",
          method: "DELETE"
        },

        // INTERNAL. Use Category.products.count() instead.
        "::count::Category::products": {
          url: urlBase + "/categories/:id/products/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Product#updateOrCreate
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Product#update
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Product#destroyById
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Product#removeById
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Product#modelName
    * @propertyOf lbServices.Product
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Product`.
    */
    R.modelName = "Product";


        /**
         * @ngdoc method
         * @name lbServices.Product#category
         * @methodOf lbServices.Product
         *
         * @description
         *
         * Fetches belongsTo relation category.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Category` object.)
         * </em>
         */
        R.category = function() {
          var TargetResource = $injector.get("Category");
          var action = TargetResource["::get::Product::category"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Category
 * @header lbServices.Category
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Category` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Category",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/categories/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use Category.products.findById() instead.
        "prototype$__findById__products": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/categories/:id/products/:fk",
          method: "GET"
        },

        // INTERNAL. Use Category.products.destroyById() instead.
        "prototype$__destroyById__products": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/categories/:id/products/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Category.products.updateById() instead.
        "prototype$__updateById__products": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/categories/:id/products/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Category.products() instead.
        "prototype$__get__products": {
          isArray: true,
          url: urlBase + "/categories/:id/products",
          method: "GET"
        },

        // INTERNAL. Use Category.products.create() instead.
        "prototype$__create__products": {
          url: urlBase + "/categories/:id/products",
          method: "POST"
        },

        // INTERNAL. Use Category.products.destroyAll() instead.
        "prototype$__delete__products": {
          url: urlBase + "/categories/:id/products",
          method: "DELETE"
        },

        // INTERNAL. Use Category.products.count() instead.
        "prototype$__count__products": {
          url: urlBase + "/categories/:id/products/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Category#create
         * @methodOf lbServices.Category
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Category` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/categories",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Category#createMany
         * @methodOf lbServices.Category
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Category` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/categories",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Category#upsert
         * @methodOf lbServices.Category
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Category` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/categories",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Category#exists
         * @methodOf lbServices.Category
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/categories/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Category#findById
         * @methodOf lbServices.Category
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Category` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/categories/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Category#find
         * @methodOf lbServices.Category
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Category` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/categories",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Category#findOne
         * @methodOf lbServices.Category
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Category` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/categories/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Category#updateAll
         * @methodOf lbServices.Category
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/categories/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Category#deleteById
         * @methodOf lbServices.Category
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/categories/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Category#count
         * @methodOf lbServices.Category
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/categories/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Category#prototype$updateAttributes
         * @methodOf lbServices.Category
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Category` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/categories/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Category#createChangeStream
         * @methodOf lbServices.Category
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/categories/change-stream",
          method: "POST"
        },

        // INTERNAL. Use Product.category() instead.
        "::get::Product::category": {
          url: urlBase + "/products/:id/category",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Category#updateOrCreate
         * @methodOf lbServices.Category
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Category` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Category#update
         * @methodOf lbServices.Category
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Category#destroyById
         * @methodOf lbServices.Category
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Category#removeById
         * @methodOf lbServices.Category
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Category#modelName
    * @propertyOf lbServices.Category
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Category`.
    */
    R.modelName = "Category";

    /**
     * @ngdoc object
     * @name lbServices.Category.products
     * @header lbServices.Category.products
     * @object
     * @description
     *
     * The object `Category.products` groups methods
     * manipulating `Product` instances related to `Category`.
     *
     * Call {@link lbServices.Category#products Category.products()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.Category#products
         * @methodOf lbServices.Category
         *
         * @description
         *
         * Queries products of Category.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        R.products = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::get::Category::products"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Category.products#count
         * @methodOf lbServices.Category.products
         *
         * @description
         *
         * Counts products of Category.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.products.count = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::count::Category::products"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Category.products#create
         * @methodOf lbServices.Category.products
         *
         * @description
         *
         * Creates a new instance in products of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        R.products.create = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::create::Category::products"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Category.products#createMany
         * @methodOf lbServices.Category.products
         *
         * @description
         *
         * Creates a new instance in products of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        R.products.createMany = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::createMany::Category::products"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Category.products#destroyAll
         * @methodOf lbServices.Category.products
         *
         * @description
         *
         * Deletes all products of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.products.destroyAll = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::delete::Category::products"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Category.products#destroyById
         * @methodOf lbServices.Category.products
         *
         * @description
         *
         * Delete a related item by id for products.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for products
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.products.destroyById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::destroyById::Category::products"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Category.products#findById
         * @methodOf lbServices.Category.products
         *
         * @description
         *
         * Find a related item by id for products.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for products
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        R.products.findById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::findById::Category::products"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.Category.products#updateById
         * @methodOf lbServices.Category.products
         *
         * @description
         *
         * Update a related item by id for products.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for products
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Product` object.)
         * </em>
         */
        R.products.updateById = function() {
          var TargetResource = $injector.get("Product");
          var action = TargetResource["::updateById::Category::products"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Event
 * @header lbServices.Event
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Event` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Event",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/events/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Event#create
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Event` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/events",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Event#createMany
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Event` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/events",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Event#upsert
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Event` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/events",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Event#exists
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/events/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Event#findById
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Event` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/events/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Event#find
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Event` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/events",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Event#findOne
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Event` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/events/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Event#updateAll
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/events/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Event#deleteById
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/events/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Event#count
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/events/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Event#prototype$updateAttributes
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Event` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/events/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Event#createChangeStream
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/events/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Event#updateOrCreate
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Event` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Event#update
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Event#destroyById
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Event#removeById
         * @methodOf lbServices.Event
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Event#modelName
    * @propertyOf lbServices.Event
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Event`.
    */
    R.modelName = "Event";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.AuthProvider
 * @header lbServices.AuthProvider
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AuthProvider` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "AuthProvider",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/AuthProviders/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.AuthProvider#create
         * @methodOf lbServices.AuthProvider
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AuthProvider` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/AuthProviders",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.AuthProvider#createMany
         * @methodOf lbServices.AuthProvider
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AuthProvider` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/AuthProviders",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.AuthProvider#upsert
         * @methodOf lbServices.AuthProvider
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AuthProvider` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/AuthProviders",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.AuthProvider#exists
         * @methodOf lbServices.AuthProvider
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/AuthProviders/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AuthProvider#findById
         * @methodOf lbServices.AuthProvider
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AuthProvider` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/AuthProviders/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AuthProvider#find
         * @methodOf lbServices.AuthProvider
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AuthProvider` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/AuthProviders",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AuthProvider#findOne
         * @methodOf lbServices.AuthProvider
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AuthProvider` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/AuthProviders/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AuthProvider#updateAll
         * @methodOf lbServices.AuthProvider
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/AuthProviders/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.AuthProvider#deleteById
         * @methodOf lbServices.AuthProvider
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/AuthProviders/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.AuthProvider#count
         * @methodOf lbServices.AuthProvider
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/AuthProviders/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AuthProvider#prototype$updateAttributes
         * @methodOf lbServices.AuthProvider
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AuthProvider` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/AuthProviders/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.AuthProvider#createChangeStream
         * @methodOf lbServices.AuthProvider
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/AuthProviders/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.AuthProvider#updateOrCreate
         * @methodOf lbServices.AuthProvider
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AuthProvider` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.AuthProvider#update
         * @methodOf lbServices.AuthProvider
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.AuthProvider#destroyById
         * @methodOf lbServices.AuthProvider
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.AuthProvider#removeById
         * @methodOf lbServices.AuthProvider
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.AuthProvider#modelName
    * @propertyOf lbServices.AuthProvider
    * @description
    * The name of the model represented by this $resource,
    * i.e. `AuthProvider`.
    */
    R.modelName = "AuthProvider";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.AminoUser
 * @header lbServices.AminoUser
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `AminoUser` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "AminoUser",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/AminoUsers/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use AminoUser.accessTokens.findById() instead.
        "prototype$__findById__accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/accessTokens/:fk",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.accessTokens.destroyById() instead.
        "prototype$__destroyById__accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/accessTokens/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.accessTokens.updateById() instead.
        "prototype$__updateById__accessTokens": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/accessTokens/:fk",
          method: "PUT"
        },

        // INTERNAL. Use AminoUser.identities.findById() instead.
        "prototype$__findById__identities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/identities/:fk",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.identities.destroyById() instead.
        "prototype$__destroyById__identities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/identities/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.identities.updateById() instead.
        "prototype$__updateById__identities": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/identities/:fk",
          method: "PUT"
        },

        // INTERNAL. Use AminoUser.credentials.findById() instead.
        "prototype$__findById__credentials": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/credentials/:fk",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.credentials.destroyById() instead.
        "prototype$__destroyById__credentials": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/credentials/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.credentials.updateById() instead.
        "prototype$__updateById__credentials": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/credentials/:fk",
          method: "PUT"
        },

        // INTERNAL. Use AminoUser.roles.findById() instead.
        "prototype$__findById__roles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/roles/:fk",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.roles.destroyById() instead.
        "prototype$__destroyById__roles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/roles/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.roles.updateById() instead.
        "prototype$__updateById__roles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/roles/:fk",
          method: "PUT"
        },

        // INTERNAL. Use AminoUser.roles.link() instead.
        "prototype$__link__roles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/roles/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use AminoUser.roles.unlink() instead.
        "prototype$__unlink__roles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/roles/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.roles.exists() instead.
        "prototype$__exists__roles": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/roles/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use AminoUser.trailUrls.findById() instead.
        "prototype$__findById__trailUrls": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/trailUrls/:fk",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.trailUrls.destroyById() instead.
        "prototype$__destroyById__trailUrls": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/trailUrls/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.trailUrls.updateById() instead.
        "prototype$__updateById__trailUrls": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/trailUrls/:fk",
          method: "PUT"
        },

        // INTERNAL. Use AminoUser.trails.findById() instead.
        "prototype$__findById__trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/trails/:fk",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.trails.destroyById() instead.
        "prototype$__destroyById__trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/trails/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.trails.updateById() instead.
        "prototype$__updateById__trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/trails/:fk",
          method: "PUT"
        },

        // INTERNAL. Use AminoUser.trails.link() instead.
        "prototype$__link__trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/trails/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use AminoUser.trails.unlink() instead.
        "prototype$__unlink__trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/trails/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.trails.exists() instead.
        "prototype$__exists__trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/trails/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use AminoUser.domainItems.findById() instead.
        "prototype$__findById__domainItems": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/domainItems/:fk",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.domainItems.destroyById() instead.
        "prototype$__destroyById__domainItems": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/domainItems/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.domainItems.updateById() instead.
        "prototype$__updateById__domainItems": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/domainItems/:fk",
          method: "PUT"
        },

        // INTERNAL. Use AminoUser.teams.findById() instead.
        "prototype$__findById__teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/teams/:fk",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.teams.destroyById() instead.
        "prototype$__destroyById__teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/teams/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.teams.updateById() instead.
        "prototype$__updateById__teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/teams/:fk",
          method: "PUT"
        },

        // INTERNAL. Use AminoUser.teams.link() instead.
        "prototype$__link__teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/teams/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use AminoUser.teams.unlink() instead.
        "prototype$__unlink__teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/teams/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.teams.exists() instead.
        "prototype$__exists__teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/teams/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use AminoUser.roleMappings.findById() instead.
        "prototype$__findById__roleMappings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/roleMappings/:fk",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.roleMappings.destroyById() instead.
        "prototype$__destroyById__roleMappings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/roleMappings/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.roleMappings.updateById() instead.
        "prototype$__updateById__roleMappings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/roleMappings/:fk",
          method: "PUT"
        },

        // INTERNAL. Use AminoUser.accessTokens() instead.
        "prototype$__get__accessTokens": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/accessTokens",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.accessTokens.create() instead.
        "prototype$__create__accessTokens": {
          url: urlBase + "/AminoUsers/:id/accessTokens",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.accessTokens.destroyAll() instead.
        "prototype$__delete__accessTokens": {
          url: urlBase + "/AminoUsers/:id/accessTokens",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.accessTokens.count() instead.
        "prototype$__count__accessTokens": {
          url: urlBase + "/AminoUsers/:id/accessTokens/count",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.identities() instead.
        "prototype$__get__identities": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/identities",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.identities.create() instead.
        "prototype$__create__identities": {
          url: urlBase + "/AminoUsers/:id/identities",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.identities.destroyAll() instead.
        "prototype$__delete__identities": {
          url: urlBase + "/AminoUsers/:id/identities",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.identities.count() instead.
        "prototype$__count__identities": {
          url: urlBase + "/AminoUsers/:id/identities/count",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.credentials() instead.
        "prototype$__get__credentials": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/credentials",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.credentials.create() instead.
        "prototype$__create__credentials": {
          url: urlBase + "/AminoUsers/:id/credentials",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.credentials.destroyAll() instead.
        "prototype$__delete__credentials": {
          url: urlBase + "/AminoUsers/:id/credentials",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.credentials.count() instead.
        "prototype$__count__credentials": {
          url: urlBase + "/AminoUsers/:id/credentials/count",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.roles() instead.
        "prototype$__get__roles": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/roles",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.roles.create() instead.
        "prototype$__create__roles": {
          url: urlBase + "/AminoUsers/:id/roles",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.roles.destroyAll() instead.
        "prototype$__delete__roles": {
          url: urlBase + "/AminoUsers/:id/roles",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.roles.count() instead.
        "prototype$__count__roles": {
          url: urlBase + "/AminoUsers/:id/roles/count",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.trailUrls() instead.
        "prototype$__get__trailUrls": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/trailUrls",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.trailUrls.create() instead.
        "prototype$__create__trailUrls": {
          url: urlBase + "/AminoUsers/:id/trailUrls",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.trailUrls.destroyAll() instead.
        "prototype$__delete__trailUrls": {
          url: urlBase + "/AminoUsers/:id/trailUrls",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.trailUrls.count() instead.
        "prototype$__count__trailUrls": {
          url: urlBase + "/AminoUsers/:id/trailUrls/count",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.trails() instead.
        "prototype$__get__trails": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/trails",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.trails.create() instead.
        "prototype$__create__trails": {
          url: urlBase + "/AminoUsers/:id/trails",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.trails.destroyAll() instead.
        "prototype$__delete__trails": {
          url: urlBase + "/AminoUsers/:id/trails",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.trails.count() instead.
        "prototype$__count__trails": {
          url: urlBase + "/AminoUsers/:id/trails/count",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.domainItems() instead.
        "prototype$__get__domainItems": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/domainItems",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.domainItems.create() instead.
        "prototype$__create__domainItems": {
          url: urlBase + "/AminoUsers/:id/domainItems",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.domainItems.destroyAll() instead.
        "prototype$__delete__domainItems": {
          url: urlBase + "/AminoUsers/:id/domainItems",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.domainItems.count() instead.
        "prototype$__count__domainItems": {
          url: urlBase + "/AminoUsers/:id/domainItems/count",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.teams() instead.
        "prototype$__get__teams": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/teams",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.teams.create() instead.
        "prototype$__create__teams": {
          url: urlBase + "/AminoUsers/:id/teams",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.teams.destroyAll() instead.
        "prototype$__delete__teams": {
          url: urlBase + "/AminoUsers/:id/teams",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.teams.count() instead.
        "prototype$__count__teams": {
          url: urlBase + "/AminoUsers/:id/teams/count",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.roleMappings() instead.
        "prototype$__get__roleMappings": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/roleMappings",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.roleMappings.create() instead.
        "prototype$__create__roleMappings": {
          url: urlBase + "/AminoUsers/:id/roleMappings",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.roleMappings.destroyAll() instead.
        "prototype$__delete__roleMappings": {
          url: urlBase + "/AminoUsers/:id/roleMappings",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.roleMappings.count() instead.
        "prototype$__count__roleMappings": {
          url: urlBase + "/AminoUsers/:id/roleMappings/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#create
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/AminoUsers",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#createMany
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/AminoUsers",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#upsert
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/AminoUsers",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#exists
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/AminoUsers/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#findById
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/AminoUsers/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#find
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/AminoUsers",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#findOne
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/AminoUsers/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#updateAll
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/AminoUsers/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#deleteById
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/AminoUsers/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#count
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/AminoUsers/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#prototype$updateAttributes
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/AminoUsers/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#createChangeStream
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/AminoUsers/change-stream",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#login
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Login a user with username/email and password.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.
         *   Default value: `user`.
         *
         *  - `rememberMe` - `boolean` - Whether the authentication credentials
         *     should be remembered in localStorage across app/browser restarts.
         *     Default: `true`.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * The response body contains properties of the AccessToken created on login.
         * Depending on the value of `include` parameter, the body may contain additional properties:
         * 
         *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)
         * 
         *
         */
        "login": {
          params: {
            include: "user"
          },
          interceptor: {
            response: function(response) {
              var accessToken = response.data;
              LoopBackAuth.setUser(accessToken.id, accessToken.userId, accessToken.user);
              LoopBackAuth.rememberMe = response.config.params.rememberMe !== false;
              LoopBackAuth.save();
              return response.resource;
            }
          },
          url: urlBase + "/AminoUsers/login",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#logout
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Logout a user with access token.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "logout": {
          interceptor: {
            response: function(response) {
              LoopBackAuth.clearUser();
              LoopBackAuth.clearStorage();
              return response.resource;
            }
          },
          url: urlBase + "/AminoUsers/logout",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#confirm
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Confirm a user registration with email verification token.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `uid` – `{string}` - 
         *
         *  - `token` – `{string}` - 
         *
         *  - `redirect` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "confirm": {
          url: urlBase + "/AminoUsers/confirm",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#resetPassword
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Reset password for a user with email.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "resetPassword": {
          url: urlBase + "/AminoUsers/reset",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#addRole
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `userId` – `{string=}` - 
         *
         *  - `roleId` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        "addRole": {
          url: urlBase + "/AminoUsers/add-role",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#removeRole
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `userId` – `{string=}` - 
         *
         *  - `roleId` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "removeRole": {
          url: urlBase + "/AminoUsers/remove-role",
          method: "POST"
        },

        // INTERNAL. Use AccessToken.user() instead.
        "::get::accessToken::user": {
          url: urlBase + "/accessTokens/:id/user",
          method: "GET"
        },

        // INTERNAL. Use RoleMapping.aminoUser() instead.
        "::get::RoleMapping::aminoUser": {
          url: urlBase + "/RoleMappings/:id/aminoUser",
          method: "GET"
        },

        // INTERNAL. Use Role.aminoUsers.findById() instead.
        "::findById::Role::aminoUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Roles/:id/aminoUsers/:fk",
          method: "GET"
        },

        // INTERNAL. Use Role.aminoUsers.destroyById() instead.
        "::destroyById::Role::aminoUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Roles/:id/aminoUsers/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Role.aminoUsers.updateById() instead.
        "::updateById::Role::aminoUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Roles/:id/aminoUsers/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Role.aminoUsers.link() instead.
        "::link::Role::aminoUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Roles/:id/aminoUsers/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use Role.aminoUsers.unlink() instead.
        "::unlink::Role::aminoUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Roles/:id/aminoUsers/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use Role.aminoUsers.exists() instead.
        "::exists::Role::aminoUsers": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/Roles/:id/aminoUsers/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use Role.aminoUsers() instead.
        "::get::Role::aminoUsers": {
          isArray: true,
          url: urlBase + "/Roles/:id/aminoUsers",
          method: "GET"
        },

        // INTERNAL. Use Role.aminoUsers.create() instead.
        "::create::Role::aminoUsers": {
          url: urlBase + "/Roles/:id/aminoUsers",
          method: "POST"
        },

        // INTERNAL. Use Role.aminoUsers.createMany() instead.
        "::createMany::Role::aminoUsers": {
          isArray: true,
          url: urlBase + "/Roles/:id/aminoUsers",
          method: "POST"
        },

        // INTERNAL. Use Role.aminoUsers.destroyAll() instead.
        "::delete::Role::aminoUsers": {
          url: urlBase + "/Roles/:id/aminoUsers",
          method: "DELETE"
        },

        // INTERNAL. Use Role.aminoUsers.count() instead.
        "::count::Role::aminoUsers": {
          url: urlBase + "/Roles/:id/aminoUsers/count",
          method: "GET"
        },

        // INTERNAL. Use UserCredential.user() instead.
        "::get::userCredential::user": {
          url: urlBase + "/userCredentials/:id/user",
          method: "GET"
        },

        // INTERNAL. Use UserIdentity.user() instead.
        "::get::userIdentity::user": {
          url: urlBase + "/userIdentities/:id/user",
          method: "GET"
        },

        // INTERNAL. Use DwTrailUrl.user() instead.
        "::get::DwTrailUrl::user": {
          url: urlBase + "/dwTrailUrls/:id/user",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.users.findById() instead.
        "::findById::DwTrail::users": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/users/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.users.destroyById() instead.
        "::destroyById::DwTrail::users": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/users/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTrail.users.updateById() instead.
        "::updateById::DwTrail::users": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/users/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTrail.users.link() instead.
        "::link::DwTrail::users": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/users/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTrail.users.unlink() instead.
        "::unlink::DwTrail::users": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/users/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTrail.users.exists() instead.
        "::exists::DwTrail::users": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/users/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use DwTrail.users() instead.
        "::get::DwTrail::users": {
          isArray: true,
          url: urlBase + "/dwTrails/:id/users",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.users.create() instead.
        "::create::DwTrail::users": {
          url: urlBase + "/dwTrails/:id/users",
          method: "POST"
        },

        // INTERNAL. Use DwTrail.users.createMany() instead.
        "::createMany::DwTrail::users": {
          isArray: true,
          url: urlBase + "/dwTrails/:id/users",
          method: "POST"
        },

        // INTERNAL. Use DwTrail.users.destroyAll() instead.
        "::delete::DwTrail::users": {
          url: urlBase + "/dwTrails/:id/users",
          method: "DELETE"
        },

        // INTERNAL. Use DwTrail.users.count() instead.
        "::count::DwTrail::users": {
          url: urlBase + "/dwTrails/:id/users/count",
          method: "GET"
        },

        // INTERNAL. Use DwDomainItem.user() instead.
        "::get::DwDomainItem::user": {
          url: urlBase + "/dwDomainItems/:id/user",
          method: "GET"
        },

        // INTERNAL. Use DwTeam.users.findById() instead.
        "::findById::DwTeam::users": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/users/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwTeam.users.destroyById() instead.
        "::destroyById::DwTeam::users": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/users/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTeam.users.updateById() instead.
        "::updateById::DwTeam::users": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/users/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTeam.users.link() instead.
        "::link::DwTeam::users": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/users/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTeam.users.unlink() instead.
        "::unlink::DwTeam::users": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/users/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTeam.users.exists() instead.
        "::exists::DwTeam::users": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/users/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use DwTeam.users() instead.
        "::get::DwTeam::users": {
          isArray: true,
          url: urlBase + "/dwTeams/:id/users",
          method: "GET"
        },

        // INTERNAL. Use DwTeam.users.create() instead.
        "::create::DwTeam::users": {
          url: urlBase + "/dwTeams/:id/users",
          method: "POST"
        },

        // INTERNAL. Use DwTeam.users.createMany() instead.
        "::createMany::DwTeam::users": {
          isArray: true,
          url: urlBase + "/dwTeams/:id/users",
          method: "POST"
        },

        // INTERNAL. Use DwTeam.users.destroyAll() instead.
        "::delete::DwTeam::users": {
          url: urlBase + "/dwTeams/:id/users",
          method: "DELETE"
        },

        // INTERNAL. Use DwTeam.users.count() instead.
        "::count::DwTeam::users": {
          url: urlBase + "/dwTeams/:id/users/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#getCurrent
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Get data of the currently logged user. Fail with HTTP result 401
         * when there is no user logged in.
         *
         * @param {function(Object,Object)=} successCb
         *    Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *    `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         */
        "getCurrent": {
           url: urlBase + "/AminoUsers" + "/:id",
           method: "GET",
           params: {
             id: function() {
              var id = LoopBackAuth.currentUserId;
              if (id == null) id = '__anonymous__';
              return id;
            },
          },
          interceptor: {
            response: function(response) {
              LoopBackAuth.currentUserData = response.data;
              return response.resource;
            }
          },
          __isGetCurrentUser__ : true
        }
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.AminoUser#updateOrCreate
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#update
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#destroyById
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#removeById
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#getCachedCurrent
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Get data of the currently logged user that was returned by the last
         * call to {@link lbServices.AminoUser#login} or
         * {@link lbServices.AminoUser#getCurrent}. Return null when there
         * is no user logged in or the data of the current user were not fetched
         * yet.
         *
         * @returns {Object} A AminoUser instance.
         */
        R.getCachedCurrent = function() {
          var data = LoopBackAuth.currentUserData;
          return data ? new R(data) : null;
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#isAuthenticated
         * @methodOf lbServices.AminoUser
         *
         * @returns {boolean} True if the current user is authenticated (logged in).
         */
        R.isAuthenticated = function() {
          return this.getCurrentId() != null;
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser#getCurrentId
         * @methodOf lbServices.AminoUser
         *
         * @returns {Object} Id of the currently logged-in user or null.
         */
        R.getCurrentId = function() {
          return LoopBackAuth.currentUserId;
        };

    /**
    * @ngdoc property
    * @name lbServices.AminoUser#modelName
    * @propertyOf lbServices.AminoUser
    * @description
    * The name of the model represented by this $resource,
    * i.e. `AminoUser`.
    */
    R.modelName = "AminoUser";

    /**
     * @ngdoc object
     * @name lbServices.AminoUser.accessTokens
     * @header lbServices.AminoUser.accessTokens
     * @object
     * @description
     *
     * The object `AminoUser.accessTokens` groups methods
     * manipulating `AccessToken` instances related to `AminoUser`.
     *
     * Call {@link lbServices.AminoUser#accessTokens AminoUser.accessTokens()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.AminoUser#accessTokens
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Queries accessTokens of AminoUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccessToken` object.)
         * </em>
         */
        R.accessTokens = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::get::AminoUser::accessTokens"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.accessTokens#count
         * @methodOf lbServices.AminoUser.accessTokens
         *
         * @description
         *
         * Counts accessTokens of AminoUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.accessTokens.count = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::count::AminoUser::accessTokens"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.accessTokens#create
         * @methodOf lbServices.AminoUser.accessTokens
         *
         * @description
         *
         * Creates a new instance in accessTokens of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccessToken` object.)
         * </em>
         */
        R.accessTokens.create = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::create::AminoUser::accessTokens"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.accessTokens#createMany
         * @methodOf lbServices.AminoUser.accessTokens
         *
         * @description
         *
         * Creates a new instance in accessTokens of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccessToken` object.)
         * </em>
         */
        R.accessTokens.createMany = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::createMany::AminoUser::accessTokens"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.accessTokens#destroyAll
         * @methodOf lbServices.AminoUser.accessTokens
         *
         * @description
         *
         * Deletes all accessTokens of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.accessTokens.destroyAll = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::delete::AminoUser::accessTokens"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.accessTokens#destroyById
         * @methodOf lbServices.AminoUser.accessTokens
         *
         * @description
         *
         * Delete a related item by id for accessTokens.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for accessTokens
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.accessTokens.destroyById = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::destroyById::AminoUser::accessTokens"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.accessTokens#findById
         * @methodOf lbServices.AminoUser.accessTokens
         *
         * @description
         *
         * Find a related item by id for accessTokens.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for accessTokens
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccessToken` object.)
         * </em>
         */
        R.accessTokens.findById = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::findById::AminoUser::accessTokens"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.accessTokens#updateById
         * @methodOf lbServices.AminoUser.accessTokens
         *
         * @description
         *
         * Update a related item by id for accessTokens.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for accessTokens
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AccessToken` object.)
         * </em>
         */
        R.accessTokens.updateById = function() {
          var TargetResource = $injector.get("AccessToken");
          var action = TargetResource["::updateById::AminoUser::accessTokens"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AminoUser.identities
     * @header lbServices.AminoUser.identities
     * @object
     * @description
     *
     * The object `AminoUser.identities` groups methods
     * manipulating `UserIdentity` instances related to `AminoUser`.
     *
     * Call {@link lbServices.AminoUser#identities AminoUser.identities()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.AminoUser#identities
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Queries identities of AminoUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        R.identities = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::get::AminoUser::identities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.identities#count
         * @methodOf lbServices.AminoUser.identities
         *
         * @description
         *
         * Counts identities of AminoUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.identities.count = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::count::AminoUser::identities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.identities#create
         * @methodOf lbServices.AminoUser.identities
         *
         * @description
         *
         * Creates a new instance in identities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        R.identities.create = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::create::AminoUser::identities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.identities#createMany
         * @methodOf lbServices.AminoUser.identities
         *
         * @description
         *
         * Creates a new instance in identities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        R.identities.createMany = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::createMany::AminoUser::identities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.identities#destroyAll
         * @methodOf lbServices.AminoUser.identities
         *
         * @description
         *
         * Deletes all identities of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.identities.destroyAll = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::delete::AminoUser::identities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.identities#destroyById
         * @methodOf lbServices.AminoUser.identities
         *
         * @description
         *
         * Delete a related item by id for identities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for identities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.identities.destroyById = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::destroyById::AminoUser::identities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.identities#findById
         * @methodOf lbServices.AminoUser.identities
         *
         * @description
         *
         * Find a related item by id for identities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for identities
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        R.identities.findById = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::findById::AminoUser::identities"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.identities#updateById
         * @methodOf lbServices.AminoUser.identities
         *
         * @description
         *
         * Update a related item by id for identities.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for identities
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserIdentity` object.)
         * </em>
         */
        R.identities.updateById = function() {
          var TargetResource = $injector.get("UserIdentity");
          var action = TargetResource["::updateById::AminoUser::identities"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AminoUser.credentials
     * @header lbServices.AminoUser.credentials
     * @object
     * @description
     *
     * The object `AminoUser.credentials` groups methods
     * manipulating `UserCredential` instances related to `AminoUser`.
     *
     * Call {@link lbServices.AminoUser#credentials AminoUser.credentials()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.AminoUser#credentials
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Queries credentials of AminoUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserCredential` object.)
         * </em>
         */
        R.credentials = function() {
          var TargetResource = $injector.get("UserCredential");
          var action = TargetResource["::get::AminoUser::credentials"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.credentials#count
         * @methodOf lbServices.AminoUser.credentials
         *
         * @description
         *
         * Counts credentials of AminoUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.credentials.count = function() {
          var TargetResource = $injector.get("UserCredential");
          var action = TargetResource["::count::AminoUser::credentials"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.credentials#create
         * @methodOf lbServices.AminoUser.credentials
         *
         * @description
         *
         * Creates a new instance in credentials of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserCredential` object.)
         * </em>
         */
        R.credentials.create = function() {
          var TargetResource = $injector.get("UserCredential");
          var action = TargetResource["::create::AminoUser::credentials"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.credentials#createMany
         * @methodOf lbServices.AminoUser.credentials
         *
         * @description
         *
         * Creates a new instance in credentials of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserCredential` object.)
         * </em>
         */
        R.credentials.createMany = function() {
          var TargetResource = $injector.get("UserCredential");
          var action = TargetResource["::createMany::AminoUser::credentials"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.credentials#destroyAll
         * @methodOf lbServices.AminoUser.credentials
         *
         * @description
         *
         * Deletes all credentials of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.credentials.destroyAll = function() {
          var TargetResource = $injector.get("UserCredential");
          var action = TargetResource["::delete::AminoUser::credentials"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.credentials#destroyById
         * @methodOf lbServices.AminoUser.credentials
         *
         * @description
         *
         * Delete a related item by id for credentials.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for credentials
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.credentials.destroyById = function() {
          var TargetResource = $injector.get("UserCredential");
          var action = TargetResource["::destroyById::AminoUser::credentials"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.credentials#findById
         * @methodOf lbServices.AminoUser.credentials
         *
         * @description
         *
         * Find a related item by id for credentials.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for credentials
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserCredential` object.)
         * </em>
         */
        R.credentials.findById = function() {
          var TargetResource = $injector.get("UserCredential");
          var action = TargetResource["::findById::AminoUser::credentials"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.credentials#updateById
         * @methodOf lbServices.AminoUser.credentials
         *
         * @description
         *
         * Update a related item by id for credentials.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for credentials
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `UserCredential` object.)
         * </em>
         */
        R.credentials.updateById = function() {
          var TargetResource = $injector.get("UserCredential");
          var action = TargetResource["::updateById::AminoUser::credentials"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AminoUser.roles
     * @header lbServices.AminoUser.roles
     * @object
     * @description
     *
     * The object `AminoUser.roles` groups methods
     * manipulating `Role` instances related to `AminoUser`.
     *
     * Call {@link lbServices.AminoUser#roles AminoUser.roles()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.AminoUser#roles
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Queries roles of AminoUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Role` object.)
         * </em>
         */
        R.roles = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::get::AminoUser::roles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.roles#count
         * @methodOf lbServices.AminoUser.roles
         *
         * @description
         *
         * Counts roles of AminoUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.roles.count = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::count::AminoUser::roles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.roles#create
         * @methodOf lbServices.AminoUser.roles
         *
         * @description
         *
         * Creates a new instance in roles of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Role` object.)
         * </em>
         */
        R.roles.create = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::create::AminoUser::roles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.roles#createMany
         * @methodOf lbServices.AminoUser.roles
         *
         * @description
         *
         * Creates a new instance in roles of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Role` object.)
         * </em>
         */
        R.roles.createMany = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::createMany::AminoUser::roles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.roles#destroyAll
         * @methodOf lbServices.AminoUser.roles
         *
         * @description
         *
         * Deletes all roles of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.roles.destroyAll = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::delete::AminoUser::roles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.roles#destroyById
         * @methodOf lbServices.AminoUser.roles
         *
         * @description
         *
         * Delete a related item by id for roles.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for roles
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.roles.destroyById = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::destroyById::AminoUser::roles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.roles#exists
         * @methodOf lbServices.AminoUser.roles
         *
         * @description
         *
         * Check the existence of roles relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for roles
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Role` object.)
         * </em>
         */
        R.roles.exists = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::exists::AminoUser::roles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.roles#findById
         * @methodOf lbServices.AminoUser.roles
         *
         * @description
         *
         * Find a related item by id for roles.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for roles
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Role` object.)
         * </em>
         */
        R.roles.findById = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::findById::AminoUser::roles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.roles#link
         * @methodOf lbServices.AminoUser.roles
         *
         * @description
         *
         * Add a related item by id for roles.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for roles
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Role` object.)
         * </em>
         */
        R.roles.link = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::link::AminoUser::roles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.roles#unlink
         * @methodOf lbServices.AminoUser.roles
         *
         * @description
         *
         * Remove the roles relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for roles
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.roles.unlink = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::unlink::AminoUser::roles"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.roles#updateById
         * @methodOf lbServices.AminoUser.roles
         *
         * @description
         *
         * Update a related item by id for roles.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for roles
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Role` object.)
         * </em>
         */
        R.roles.updateById = function() {
          var TargetResource = $injector.get("Role");
          var action = TargetResource["::updateById::AminoUser::roles"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AminoUser.trailUrls
     * @header lbServices.AminoUser.trailUrls
     * @object
     * @description
     *
     * The object `AminoUser.trailUrls` groups methods
     * manipulating `DwTrailUrl` instances related to `AminoUser`.
     *
     * Call {@link lbServices.AminoUser#trailUrls AminoUser.trailUrls()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.AminoUser#trailUrls
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Queries trailUrls of AminoUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrl` object.)
         * </em>
         */
        R.trailUrls = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::get::AminoUser::trailUrls"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.trailUrls#count
         * @methodOf lbServices.AminoUser.trailUrls
         *
         * @description
         *
         * Counts trailUrls of AminoUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.trailUrls.count = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::count::AminoUser::trailUrls"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.trailUrls#create
         * @methodOf lbServices.AminoUser.trailUrls
         *
         * @description
         *
         * Creates a new instance in trailUrls of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrl` object.)
         * </em>
         */
        R.trailUrls.create = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::create::AminoUser::trailUrls"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.trailUrls#createMany
         * @methodOf lbServices.AminoUser.trailUrls
         *
         * @description
         *
         * Creates a new instance in trailUrls of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrl` object.)
         * </em>
         */
        R.trailUrls.createMany = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::createMany::AminoUser::trailUrls"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.trailUrls#destroyAll
         * @methodOf lbServices.AminoUser.trailUrls
         *
         * @description
         *
         * Deletes all trailUrls of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.trailUrls.destroyAll = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::delete::AminoUser::trailUrls"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.trailUrls#destroyById
         * @methodOf lbServices.AminoUser.trailUrls
         *
         * @description
         *
         * Delete a related item by id for trailUrls.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for trailUrls
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.trailUrls.destroyById = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::destroyById::AminoUser::trailUrls"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.trailUrls#findById
         * @methodOf lbServices.AminoUser.trailUrls
         *
         * @description
         *
         * Find a related item by id for trailUrls.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for trailUrls
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrl` object.)
         * </em>
         */
        R.trailUrls.findById = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::findById::AminoUser::trailUrls"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.trailUrls#updateById
         * @methodOf lbServices.AminoUser.trailUrls
         *
         * @description
         *
         * Update a related item by id for trailUrls.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for trailUrls
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrl` object.)
         * </em>
         */
        R.trailUrls.updateById = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::updateById::AminoUser::trailUrls"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AminoUser.trails
     * @header lbServices.AminoUser.trails
     * @object
     * @description
     *
     * The object `AminoUser.trails` groups methods
     * manipulating `DwTrail` instances related to `AminoUser`.
     *
     * Call {@link lbServices.AminoUser#trails AminoUser.trails()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.AminoUser#trails
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Queries trails of AminoUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trails = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::get::AminoUser::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.trails#count
         * @methodOf lbServices.AminoUser.trails
         *
         * @description
         *
         * Counts trails of AminoUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.trails.count = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::count::AminoUser::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.trails#create
         * @methodOf lbServices.AminoUser.trails
         *
         * @description
         *
         * Creates a new instance in trails of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trails.create = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::create::AminoUser::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.trails#createMany
         * @methodOf lbServices.AminoUser.trails
         *
         * @description
         *
         * Creates a new instance in trails of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trails.createMany = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::createMany::AminoUser::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.trails#destroyAll
         * @methodOf lbServices.AminoUser.trails
         *
         * @description
         *
         * Deletes all trails of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.trails.destroyAll = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::delete::AminoUser::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.trails#destroyById
         * @methodOf lbServices.AminoUser.trails
         *
         * @description
         *
         * Delete a related item by id for trails.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for trails
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.trails.destroyById = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::destroyById::AminoUser::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.trails#exists
         * @methodOf lbServices.AminoUser.trails
         *
         * @description
         *
         * Check the existence of trails relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for trails
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trails.exists = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::exists::AminoUser::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.trails#findById
         * @methodOf lbServices.AminoUser.trails
         *
         * @description
         *
         * Find a related item by id for trails.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for trails
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trails.findById = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::findById::AminoUser::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.trails#link
         * @methodOf lbServices.AminoUser.trails
         *
         * @description
         *
         * Add a related item by id for trails.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for trails
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trails.link = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::link::AminoUser::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.trails#unlink
         * @methodOf lbServices.AminoUser.trails
         *
         * @description
         *
         * Remove the trails relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for trails
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.trails.unlink = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::unlink::AminoUser::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.trails#updateById
         * @methodOf lbServices.AminoUser.trails
         *
         * @description
         *
         * Update a related item by id for trails.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for trails
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trails.updateById = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::updateById::AminoUser::trails"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AminoUser.domainItems
     * @header lbServices.AminoUser.domainItems
     * @object
     * @description
     *
     * The object `AminoUser.domainItems` groups methods
     * manipulating `DwDomainItem` instances related to `AminoUser`.
     *
     * Call {@link lbServices.AminoUser#domainItems AminoUser.domainItems()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.AminoUser#domainItems
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Queries domainItems of AminoUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainItem` object.)
         * </em>
         */
        R.domainItems = function() {
          var TargetResource = $injector.get("DwDomainItem");
          var action = TargetResource["::get::AminoUser::domainItems"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.domainItems#count
         * @methodOf lbServices.AminoUser.domainItems
         *
         * @description
         *
         * Counts domainItems of AminoUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.domainItems.count = function() {
          var TargetResource = $injector.get("DwDomainItem");
          var action = TargetResource["::count::AminoUser::domainItems"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.domainItems#create
         * @methodOf lbServices.AminoUser.domainItems
         *
         * @description
         *
         * Creates a new instance in domainItems of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainItem` object.)
         * </em>
         */
        R.domainItems.create = function() {
          var TargetResource = $injector.get("DwDomainItem");
          var action = TargetResource["::create::AminoUser::domainItems"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.domainItems#createMany
         * @methodOf lbServices.AminoUser.domainItems
         *
         * @description
         *
         * Creates a new instance in domainItems of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainItem` object.)
         * </em>
         */
        R.domainItems.createMany = function() {
          var TargetResource = $injector.get("DwDomainItem");
          var action = TargetResource["::createMany::AminoUser::domainItems"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.domainItems#destroyAll
         * @methodOf lbServices.AminoUser.domainItems
         *
         * @description
         *
         * Deletes all domainItems of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.domainItems.destroyAll = function() {
          var TargetResource = $injector.get("DwDomainItem");
          var action = TargetResource["::delete::AminoUser::domainItems"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.domainItems#destroyById
         * @methodOf lbServices.AminoUser.domainItems
         *
         * @description
         *
         * Delete a related item by id for domainItems.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for domainItems
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.domainItems.destroyById = function() {
          var TargetResource = $injector.get("DwDomainItem");
          var action = TargetResource["::destroyById::AminoUser::domainItems"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.domainItems#findById
         * @methodOf lbServices.AminoUser.domainItems
         *
         * @description
         *
         * Find a related item by id for domainItems.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for domainItems
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainItem` object.)
         * </em>
         */
        R.domainItems.findById = function() {
          var TargetResource = $injector.get("DwDomainItem");
          var action = TargetResource["::findById::AminoUser::domainItems"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.domainItems#updateById
         * @methodOf lbServices.AminoUser.domainItems
         *
         * @description
         *
         * Update a related item by id for domainItems.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for domainItems
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainItem` object.)
         * </em>
         */
        R.domainItems.updateById = function() {
          var TargetResource = $injector.get("DwDomainItem");
          var action = TargetResource["::updateById::AminoUser::domainItems"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AminoUser.teams
     * @header lbServices.AminoUser.teams
     * @object
     * @description
     *
     * The object `AminoUser.teams` groups methods
     * manipulating `DwTeam` instances related to `AminoUser`.
     *
     * Call {@link lbServices.AminoUser#teams AminoUser.teams()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.AminoUser#teams
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Queries teams of AminoUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        R.teams = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::get::AminoUser::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.teams#count
         * @methodOf lbServices.AminoUser.teams
         *
         * @description
         *
         * Counts teams of AminoUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.teams.count = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::count::AminoUser::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.teams#create
         * @methodOf lbServices.AminoUser.teams
         *
         * @description
         *
         * Creates a new instance in teams of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        R.teams.create = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::create::AminoUser::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.teams#createMany
         * @methodOf lbServices.AminoUser.teams
         *
         * @description
         *
         * Creates a new instance in teams of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        R.teams.createMany = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::createMany::AminoUser::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.teams#destroyAll
         * @methodOf lbServices.AminoUser.teams
         *
         * @description
         *
         * Deletes all teams of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.teams.destroyAll = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::delete::AminoUser::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.teams#destroyById
         * @methodOf lbServices.AminoUser.teams
         *
         * @description
         *
         * Delete a related item by id for teams.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for teams
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.teams.destroyById = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::destroyById::AminoUser::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.teams#exists
         * @methodOf lbServices.AminoUser.teams
         *
         * @description
         *
         * Check the existence of teams relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for teams
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        R.teams.exists = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::exists::AminoUser::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.teams#findById
         * @methodOf lbServices.AminoUser.teams
         *
         * @description
         *
         * Find a related item by id for teams.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for teams
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        R.teams.findById = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::findById::AminoUser::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.teams#link
         * @methodOf lbServices.AminoUser.teams
         *
         * @description
         *
         * Add a related item by id for teams.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for teams
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        R.teams.link = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::link::AminoUser::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.teams#unlink
         * @methodOf lbServices.AminoUser.teams
         *
         * @description
         *
         * Remove the teams relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for teams
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.teams.unlink = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::unlink::AminoUser::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.teams#updateById
         * @methodOf lbServices.AminoUser.teams
         *
         * @description
         *
         * Update a related item by id for teams.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for teams
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        R.teams.updateById = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::updateById::AminoUser::teams"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.AminoUser.roleMappings
     * @header lbServices.AminoUser.roleMappings
     * @object
     * @description
     *
     * The object `AminoUser.roleMappings` groups methods
     * manipulating `RoleMapping` instances related to `AminoUser`.
     *
     * Call {@link lbServices.AminoUser#roleMappings AminoUser.roleMappings()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.AminoUser#roleMappings
         * @methodOf lbServices.AminoUser
         *
         * @description
         *
         * Queries roleMappings of AminoUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RoleMapping` object.)
         * </em>
         */
        R.roleMappings = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::get::AminoUser::roleMappings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.roleMappings#count
         * @methodOf lbServices.AminoUser.roleMappings
         *
         * @description
         *
         * Counts roleMappings of AminoUser.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.roleMappings.count = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::count::AminoUser::roleMappings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.roleMappings#create
         * @methodOf lbServices.AminoUser.roleMappings
         *
         * @description
         *
         * Creates a new instance in roleMappings of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RoleMapping` object.)
         * </em>
         */
        R.roleMappings.create = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::create::AminoUser::roleMappings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.roleMappings#createMany
         * @methodOf lbServices.AminoUser.roleMappings
         *
         * @description
         *
         * Creates a new instance in roleMappings of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RoleMapping` object.)
         * </em>
         */
        R.roleMappings.createMany = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::createMany::AminoUser::roleMappings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.roleMappings#destroyAll
         * @methodOf lbServices.AminoUser.roleMappings
         *
         * @description
         *
         * Deletes all roleMappings of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.roleMappings.destroyAll = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::delete::AminoUser::roleMappings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.roleMappings#destroyById
         * @methodOf lbServices.AminoUser.roleMappings
         *
         * @description
         *
         * Delete a related item by id for roleMappings.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for roleMappings
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.roleMappings.destroyById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::destroyById::AminoUser::roleMappings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.roleMappings#findById
         * @methodOf lbServices.AminoUser.roleMappings
         *
         * @description
         *
         * Find a related item by id for roleMappings.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for roleMappings
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RoleMapping` object.)
         * </em>
         */
        R.roleMappings.findById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::findById::AminoUser::roleMappings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.AminoUser.roleMappings#updateById
         * @methodOf lbServices.AminoUser.roleMappings
         *
         * @description
         *
         * Update a related item by id for roleMappings.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - User id
         *
         *  - `fk` – `{*}` - Foreign key for roleMappings
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `RoleMapping` object.)
         * </em>
         */
        R.roleMappings.updateById = function() {
          var TargetResource = $injector.get("RoleMapping");
          var action = TargetResource["::updateById::AminoUser::roleMappings"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.DwTransmission
 * @header lbServices.DwTransmission
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DwTransmission` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "DwTransmission",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/dwTransmissions/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use DwTransmission.feeds() instead.
        "prototype$__get__feeds": {
          url: urlBase + "/dwTransmissions/:id/feeds",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTransmission#create
         * @methodOf lbServices.DwTransmission
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTransmission` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/dwTransmissions",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTransmission#createMany
         * @methodOf lbServices.DwTransmission
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTransmission` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/dwTransmissions",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTransmission#upsert
         * @methodOf lbServices.DwTransmission
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTransmission` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/dwTransmissions",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTransmission#exists
         * @methodOf lbServices.DwTransmission
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/dwTransmissions/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTransmission#findById
         * @methodOf lbServices.DwTransmission
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTransmission` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/dwTransmissions/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTransmission#find
         * @methodOf lbServices.DwTransmission
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTransmission` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/dwTransmissions",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTransmission#findOne
         * @methodOf lbServices.DwTransmission
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTransmission` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/dwTransmissions/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTransmission#updateAll
         * @methodOf lbServices.DwTransmission
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/dwTransmissions/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTransmission#deleteById
         * @methodOf lbServices.DwTransmission
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/dwTransmissions/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTransmission#count
         * @methodOf lbServices.DwTransmission
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/dwTransmissions/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTransmission#prototype$updateAttributes
         * @methodOf lbServices.DwTransmission
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTransmission` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/dwTransmissions/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTransmission#createChangeStream
         * @methodOf lbServices.DwTransmission
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/dwTransmissions/change-stream",
          method: "POST"
        },

        // INTERNAL. Use DwFeed.transmissions.findById() instead.
        "::findById::DwFeed::transmissions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/transmissions/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwFeed.transmissions.destroyById() instead.
        "::destroyById::DwFeed::transmissions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/transmissions/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwFeed.transmissions.updateById() instead.
        "::updateById::DwFeed::transmissions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/transmissions/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwFeed.transmissions() instead.
        "::get::DwFeed::transmissions": {
          isArray: true,
          url: urlBase + "/dwFeeds/:id/transmissions",
          method: "GET"
        },

        // INTERNAL. Use DwFeed.transmissions.create() instead.
        "::create::DwFeed::transmissions": {
          url: urlBase + "/dwFeeds/:id/transmissions",
          method: "POST"
        },

        // INTERNAL. Use DwFeed.transmissions.createMany() instead.
        "::createMany::DwFeed::transmissions": {
          isArray: true,
          url: urlBase + "/dwFeeds/:id/transmissions",
          method: "POST"
        },

        // INTERNAL. Use DwFeed.transmissions.destroyAll() instead.
        "::delete::DwFeed::transmissions": {
          url: urlBase + "/dwFeeds/:id/transmissions",
          method: "DELETE"
        },

        // INTERNAL. Use DwFeed.transmissions.count() instead.
        "::count::DwFeed::transmissions": {
          url: urlBase + "/dwFeeds/:id/transmissions/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.DwTransmission#updateOrCreate
         * @methodOf lbServices.DwTransmission
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTransmission` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.DwTransmission#update
         * @methodOf lbServices.DwTransmission
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.DwTransmission#destroyById
         * @methodOf lbServices.DwTransmission
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.DwTransmission#removeById
         * @methodOf lbServices.DwTransmission
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.DwTransmission#modelName
    * @propertyOf lbServices.DwTransmission
    * @description
    * The name of the model represented by this $resource,
    * i.e. `DwTransmission`.
    */
    R.modelName = "DwTransmission";


        /**
         * @ngdoc method
         * @name lbServices.DwTransmission#feeds
         * @methodOf lbServices.DwTransmission
         *
         * @description
         *
         * Fetches belongsTo relation feeds.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::get::DwTransmission::feeds"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.DwTrailUrlRating
 * @header lbServices.DwTrailUrlRating
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DwTrailUrlRating` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "DwTrailUrlRating",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/dwTrailUrlRatings/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use DwTrailUrlRating.trail() instead.
        "prototype$__get__trail": {
          url: urlBase + "/dwTrailUrlRatings/:id/trail",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrlRating#create
         * @methodOf lbServices.DwTrailUrlRating
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrlRating` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/dwTrailUrlRatings",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrlRating#createMany
         * @methodOf lbServices.DwTrailUrlRating
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrlRating` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/dwTrailUrlRatings",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrlRating#upsert
         * @methodOf lbServices.DwTrailUrlRating
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrlRating` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/dwTrailUrlRatings",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrlRating#exists
         * @methodOf lbServices.DwTrailUrlRating
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/dwTrailUrlRatings/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrlRating#findById
         * @methodOf lbServices.DwTrailUrlRating
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrlRating` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/dwTrailUrlRatings/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrlRating#find
         * @methodOf lbServices.DwTrailUrlRating
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrlRating` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/dwTrailUrlRatings",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrlRating#findOne
         * @methodOf lbServices.DwTrailUrlRating
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrlRating` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/dwTrailUrlRatings/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrlRating#updateAll
         * @methodOf lbServices.DwTrailUrlRating
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/dwTrailUrlRatings/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrlRating#deleteById
         * @methodOf lbServices.DwTrailUrlRating
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/dwTrailUrlRatings/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrlRating#count
         * @methodOf lbServices.DwTrailUrlRating
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/dwTrailUrlRatings/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrlRating#prototype$updateAttributes
         * @methodOf lbServices.DwTrailUrlRating
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrlRating` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/dwTrailUrlRatings/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrlRating#createChangeStream
         * @methodOf lbServices.DwTrailUrlRating
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/dwTrailUrlRatings/change-stream",
          method: "POST"
        },

        // INTERNAL. Use DwTrail.trailUrlRatings.findById() instead.
        "::findById::DwTrail::trailUrlRatings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/trailUrlRatings/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.trailUrlRatings.destroyById() instead.
        "::destroyById::DwTrail::trailUrlRatings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/trailUrlRatings/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTrail.trailUrlRatings.updateById() instead.
        "::updateById::DwTrail::trailUrlRatings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/trailUrlRatings/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTrail.trailUrlRatings() instead.
        "::get::DwTrail::trailUrlRatings": {
          isArray: true,
          url: urlBase + "/dwTrails/:id/trailUrlRatings",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.trailUrlRatings.create() instead.
        "::create::DwTrail::trailUrlRatings": {
          url: urlBase + "/dwTrails/:id/trailUrlRatings",
          method: "POST"
        },

        // INTERNAL. Use DwTrail.trailUrlRatings.createMany() instead.
        "::createMany::DwTrail::trailUrlRatings": {
          isArray: true,
          url: urlBase + "/dwTrails/:id/trailUrlRatings",
          method: "POST"
        },

        // INTERNAL. Use DwTrail.trailUrlRatings.destroyAll() instead.
        "::delete::DwTrail::trailUrlRatings": {
          url: urlBase + "/dwTrails/:id/trailUrlRatings",
          method: "DELETE"
        },

        // INTERNAL. Use DwTrail.trailUrlRatings.count() instead.
        "::count::DwTrail::trailUrlRatings": {
          url: urlBase + "/dwTrails/:id/trailUrlRatings/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrlRating#updateOrCreate
         * @methodOf lbServices.DwTrailUrlRating
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrlRating` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrlRating#update
         * @methodOf lbServices.DwTrailUrlRating
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrlRating#destroyById
         * @methodOf lbServices.DwTrailUrlRating
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrlRating#removeById
         * @methodOf lbServices.DwTrailUrlRating
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.DwTrailUrlRating#modelName
    * @propertyOf lbServices.DwTrailUrlRating
    * @description
    * The name of the model represented by this $resource,
    * i.e. `DwTrailUrlRating`.
    */
    R.modelName = "DwTrailUrlRating";


        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrlRating#trail
         * @methodOf lbServices.DwTrailUrlRating
         *
         * @description
         *
         * Fetches belongsTo relation trail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trail = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::get::DwTrailUrlRating::trail"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.DwTrailUrl
 * @header lbServices.DwTrailUrl
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DwTrailUrl` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "DwTrailUrl",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/dwTrailUrls/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use DwTrailUrl.user() instead.
        "prototype$__get__user": {
          url: urlBase + "/dwTrailUrls/:id/user",
          method: "GET"
        },

        // INTERNAL. Use DwTrailUrl.trail() instead.
        "prototype$__get__trail": {
          url: urlBase + "/dwTrailUrls/:id/trail",
          method: "GET"
        },

        // INTERNAL. Use DwTrailUrl.crawlType() instead.
        "prototype$__get__crawlType": {
          url: urlBase + "/dwTrailUrls/:id/crawlType",
          method: "GET"
        },

        // INTERNAL. Use DwTrailUrl.urlExtractions.findById() instead.
        "prototype$__findById__urlExtractions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrailUrls/:id/urlExtractions/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwTrailUrl.urlExtractions.destroyById() instead.
        "prototype$__destroyById__urlExtractions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrailUrls/:id/urlExtractions/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTrailUrl.urlExtractions.updateById() instead.
        "prototype$__updateById__urlExtractions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrailUrls/:id/urlExtractions/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTrailUrl.urlExtractions() instead.
        "prototype$__get__urlExtractions": {
          isArray: true,
          url: urlBase + "/dwTrailUrls/:id/urlExtractions",
          method: "GET"
        },

        // INTERNAL. Use DwTrailUrl.urlExtractions.create() instead.
        "prototype$__create__urlExtractions": {
          url: urlBase + "/dwTrailUrls/:id/urlExtractions",
          method: "POST"
        },

        // INTERNAL. Use DwTrailUrl.urlExtractions.destroyAll() instead.
        "prototype$__delete__urlExtractions": {
          url: urlBase + "/dwTrailUrls/:id/urlExtractions",
          method: "DELETE"
        },

        // INTERNAL. Use DwTrailUrl.urlExtractions.count() instead.
        "prototype$__count__urlExtractions": {
          url: urlBase + "/dwTrailUrls/:id/urlExtractions/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl#create
         * @methodOf lbServices.DwTrailUrl
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrl` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/dwTrailUrls",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl#createMany
         * @methodOf lbServices.DwTrailUrl
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrl` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/dwTrailUrls",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl#upsert
         * @methodOf lbServices.DwTrailUrl
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrl` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/dwTrailUrls",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl#exists
         * @methodOf lbServices.DwTrailUrl
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/dwTrailUrls/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl#findById
         * @methodOf lbServices.DwTrailUrl
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrl` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/dwTrailUrls/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl#find
         * @methodOf lbServices.DwTrailUrl
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrl` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/dwTrailUrls",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl#findOne
         * @methodOf lbServices.DwTrailUrl
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrl` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/dwTrailUrls/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl#updateAll
         * @methodOf lbServices.DwTrailUrl
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/dwTrailUrls/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl#deleteById
         * @methodOf lbServices.DwTrailUrl
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/dwTrailUrls/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl#count
         * @methodOf lbServices.DwTrailUrl
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/dwTrailUrls/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl#prototype$updateAttributes
         * @methodOf lbServices.DwTrailUrl
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrl` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/dwTrailUrls/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl#createChangeStream
         * @methodOf lbServices.DwTrailUrl
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/dwTrailUrls/change-stream",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.trailUrls.findById() instead.
        "::findById::AminoUser::trailUrls": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/trailUrls/:fk",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.trailUrls.destroyById() instead.
        "::destroyById::AminoUser::trailUrls": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/trailUrls/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.trailUrls.updateById() instead.
        "::updateById::AminoUser::trailUrls": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/trailUrls/:fk",
          method: "PUT"
        },

        // INTERNAL. Use AminoUser.trailUrls() instead.
        "::get::AminoUser::trailUrls": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/trailUrls",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.trailUrls.create() instead.
        "::create::AminoUser::trailUrls": {
          url: urlBase + "/AminoUsers/:id/trailUrls",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.trailUrls.createMany() instead.
        "::createMany::AminoUser::trailUrls": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/trailUrls",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.trailUrls.destroyAll() instead.
        "::delete::AminoUser::trailUrls": {
          url: urlBase + "/AminoUsers/:id/trailUrls",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.trailUrls.count() instead.
        "::count::AminoUser::trailUrls": {
          url: urlBase + "/AminoUsers/:id/trailUrls/count",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.trailUrls.findById() instead.
        "::findById::DwTrail::trailUrls": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/trailUrls/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.trailUrls.destroyById() instead.
        "::destroyById::DwTrail::trailUrls": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/trailUrls/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTrail.trailUrls.updateById() instead.
        "::updateById::DwTrail::trailUrls": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/trailUrls/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTrail.trailUrls() instead.
        "::get::DwTrail::trailUrls": {
          isArray: true,
          url: urlBase + "/dwTrails/:id/trailUrls",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.trailUrls.create() instead.
        "::create::DwTrail::trailUrls": {
          url: urlBase + "/dwTrails/:id/trailUrls",
          method: "POST"
        },

        // INTERNAL. Use DwTrail.trailUrls.createMany() instead.
        "::createMany::DwTrail::trailUrls": {
          isArray: true,
          url: urlBase + "/dwTrails/:id/trailUrls",
          method: "POST"
        },

        // INTERNAL. Use DwTrail.trailUrls.destroyAll() instead.
        "::delete::DwTrail::trailUrls": {
          url: urlBase + "/dwTrails/:id/trailUrls",
          method: "DELETE"
        },

        // INTERNAL. Use DwTrail.trailUrls.count() instead.
        "::count::DwTrail::trailUrls": {
          url: urlBase + "/dwTrails/:id/trailUrls/count",
          method: "GET"
        },

        // INTERNAL. Use DwCrawlType.trailUrl.findById() instead.
        "::findById::DwCrawlType::trailUrl": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwCrawlTypes/:id/trailUrl/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwCrawlType.trailUrl.destroyById() instead.
        "::destroyById::DwCrawlType::trailUrl": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwCrawlTypes/:id/trailUrl/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwCrawlType.trailUrl.updateById() instead.
        "::updateById::DwCrawlType::trailUrl": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwCrawlTypes/:id/trailUrl/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwCrawlType.trailUrl() instead.
        "::get::DwCrawlType::trailUrl": {
          isArray: true,
          url: urlBase + "/dwCrawlTypes/:id/trailUrl",
          method: "GET"
        },

        // INTERNAL. Use DwCrawlType.trailUrl.create() instead.
        "::create::DwCrawlType::trailUrl": {
          url: urlBase + "/dwCrawlTypes/:id/trailUrl",
          method: "POST"
        },

        // INTERNAL. Use DwCrawlType.trailUrl.createMany() instead.
        "::createMany::DwCrawlType::trailUrl": {
          isArray: true,
          url: urlBase + "/dwCrawlTypes/:id/trailUrl",
          method: "POST"
        },

        // INTERNAL. Use DwCrawlType.trailUrl.destroyAll() instead.
        "::delete::DwCrawlType::trailUrl": {
          url: urlBase + "/dwCrawlTypes/:id/trailUrl",
          method: "DELETE"
        },

        // INTERNAL. Use DwCrawlType.trailUrl.count() instead.
        "::count::DwCrawlType::trailUrl": {
          url: urlBase + "/dwCrawlTypes/:id/trailUrl/count",
          method: "GET"
        },

        // INTERNAL. Use DwUrlExtraction.trailUrl() instead.
        "::get::DwUrlExtraction::trailUrl": {
          url: urlBase + "/dwUrlExtractions/:id/trailUrl",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl#updateOrCreate
         * @methodOf lbServices.DwTrailUrl
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrl` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl#update
         * @methodOf lbServices.DwTrailUrl
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl#destroyById
         * @methodOf lbServices.DwTrailUrl
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl#removeById
         * @methodOf lbServices.DwTrailUrl
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.DwTrailUrl#modelName
    * @propertyOf lbServices.DwTrailUrl
    * @description
    * The name of the model represented by this $resource,
    * i.e. `DwTrailUrl`.
    */
    R.modelName = "DwTrailUrl";


        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl#user
         * @methodOf lbServices.DwTrailUrl
         *
         * @description
         *
         * Fetches belongsTo relation user.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.user = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::get::DwTrailUrl::user"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl#trail
         * @methodOf lbServices.DwTrailUrl
         *
         * @description
         *
         * Fetches belongsTo relation trail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trail = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::get::DwTrailUrl::trail"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl#crawlType
         * @methodOf lbServices.DwTrailUrl
         *
         * @description
         *
         * Fetches belongsTo relation crawlType.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwCrawlType` object.)
         * </em>
         */
        R.crawlType = function() {
          var TargetResource = $injector.get("DwCrawlType");
          var action = TargetResource["::get::DwTrailUrl::crawlType"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.DwTrailUrl.urlExtractions
     * @header lbServices.DwTrailUrl.urlExtractions
     * @object
     * @description
     *
     * The object `DwTrailUrl.urlExtractions` groups methods
     * manipulating `DwUrlExtraction` instances related to `DwTrailUrl`.
     *
     * Call {@link lbServices.DwTrailUrl#urlExtractions DwTrailUrl.urlExtractions()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl#urlExtractions
         * @methodOf lbServices.DwTrailUrl
         *
         * @description
         *
         * Queries urlExtractions of DwTrailUrl.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwUrlExtraction` object.)
         * </em>
         */
        R.urlExtractions = function() {
          var TargetResource = $injector.get("DwUrlExtraction");
          var action = TargetResource["::get::DwTrailUrl::urlExtractions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl.urlExtractions#count
         * @methodOf lbServices.DwTrailUrl.urlExtractions
         *
         * @description
         *
         * Counts urlExtractions of DwTrailUrl.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.urlExtractions.count = function() {
          var TargetResource = $injector.get("DwUrlExtraction");
          var action = TargetResource["::count::DwTrailUrl::urlExtractions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl.urlExtractions#create
         * @methodOf lbServices.DwTrailUrl.urlExtractions
         *
         * @description
         *
         * Creates a new instance in urlExtractions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwUrlExtraction` object.)
         * </em>
         */
        R.urlExtractions.create = function() {
          var TargetResource = $injector.get("DwUrlExtraction");
          var action = TargetResource["::create::DwTrailUrl::urlExtractions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl.urlExtractions#createMany
         * @methodOf lbServices.DwTrailUrl.urlExtractions
         *
         * @description
         *
         * Creates a new instance in urlExtractions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwUrlExtraction` object.)
         * </em>
         */
        R.urlExtractions.createMany = function() {
          var TargetResource = $injector.get("DwUrlExtraction");
          var action = TargetResource["::createMany::DwTrailUrl::urlExtractions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl.urlExtractions#destroyAll
         * @methodOf lbServices.DwTrailUrl.urlExtractions
         *
         * @description
         *
         * Deletes all urlExtractions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.urlExtractions.destroyAll = function() {
          var TargetResource = $injector.get("DwUrlExtraction");
          var action = TargetResource["::delete::DwTrailUrl::urlExtractions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl.urlExtractions#destroyById
         * @methodOf lbServices.DwTrailUrl.urlExtractions
         *
         * @description
         *
         * Delete a related item by id for urlExtractions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for urlExtractions
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.urlExtractions.destroyById = function() {
          var TargetResource = $injector.get("DwUrlExtraction");
          var action = TargetResource["::destroyById::DwTrailUrl::urlExtractions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl.urlExtractions#findById
         * @methodOf lbServices.DwTrailUrl.urlExtractions
         *
         * @description
         *
         * Find a related item by id for urlExtractions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for urlExtractions
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwUrlExtraction` object.)
         * </em>
         */
        R.urlExtractions.findById = function() {
          var TargetResource = $injector.get("DwUrlExtraction");
          var action = TargetResource["::findById::DwTrailUrl::urlExtractions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrailUrl.urlExtractions#updateById
         * @methodOf lbServices.DwTrailUrl.urlExtractions
         *
         * @description
         *
         * Update a related item by id for urlExtractions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for urlExtractions
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwUrlExtraction` object.)
         * </em>
         */
        R.urlExtractions.updateById = function() {
          var TargetResource = $injector.get("DwUrlExtraction");
          var action = TargetResource["::updateById::DwTrailUrl::urlExtractions"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.DwTrail
 * @header lbServices.DwTrail
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DwTrail` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "DwTrail",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/dwTrails/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use DwTrail.users.findById() instead.
        "prototype$__findById__users": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/users/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.users.destroyById() instead.
        "prototype$__destroyById__users": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/users/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTrail.users.updateById() instead.
        "prototype$__updateById__users": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/users/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTrail.users.link() instead.
        "prototype$__link__users": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/users/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTrail.users.unlink() instead.
        "prototype$__unlink__users": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/users/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTrail.users.exists() instead.
        "prototype$__exists__users": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/users/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use DwTrail.trailUrls.findById() instead.
        "prototype$__findById__trailUrls": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/trailUrls/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.trailUrls.destroyById() instead.
        "prototype$__destroyById__trailUrls": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/trailUrls/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTrail.trailUrls.updateById() instead.
        "prototype$__updateById__trailUrls": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/trailUrls/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTrail.trailUrlRatings.findById() instead.
        "prototype$__findById__trailUrlRatings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/trailUrlRatings/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.trailUrlRatings.destroyById() instead.
        "prototype$__destroyById__trailUrlRatings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/trailUrlRatings/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTrail.trailUrlRatings.updateById() instead.
        "prototype$__updateById__trailUrlRatings": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/trailUrlRatings/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTrail.feeds.findById() instead.
        "prototype$__findById__feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/feeds/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.feeds.destroyById() instead.
        "prototype$__destroyById__feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/feeds/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTrail.feeds.updateById() instead.
        "prototype$__updateById__feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/feeds/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTrail.feeds.link() instead.
        "prototype$__link__feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/feeds/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTrail.feeds.unlink() instead.
        "prototype$__unlink__feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/feeds/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTrail.feeds.exists() instead.
        "prototype$__exists__feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/feeds/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use DwTrail.domain() instead.
        "prototype$__get__domain": {
          url: urlBase + "/dwTrails/:id/domain",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.team() instead.
        "prototype$__get__team": {
          url: urlBase + "/dwTrails/:id/team",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.users() instead.
        "prototype$__get__users": {
          isArray: true,
          url: urlBase + "/dwTrails/:id/users",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.users.create() instead.
        "prototype$__create__users": {
          url: urlBase + "/dwTrails/:id/users",
          method: "POST"
        },

        // INTERNAL. Use DwTrail.users.destroyAll() instead.
        "prototype$__delete__users": {
          url: urlBase + "/dwTrails/:id/users",
          method: "DELETE"
        },

        // INTERNAL. Use DwTrail.users.count() instead.
        "prototype$__count__users": {
          url: urlBase + "/dwTrails/:id/users/count",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.trailUrls() instead.
        "prototype$__get__trailUrls": {
          isArray: true,
          url: urlBase + "/dwTrails/:id/trailUrls",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.trailUrls.create() instead.
        "prototype$__create__trailUrls": {
          url: urlBase + "/dwTrails/:id/trailUrls",
          method: "POST"
        },

        // INTERNAL. Use DwTrail.trailUrls.destroyAll() instead.
        "prototype$__delete__trailUrls": {
          url: urlBase + "/dwTrails/:id/trailUrls",
          method: "DELETE"
        },

        // INTERNAL. Use DwTrail.trailUrls.count() instead.
        "prototype$__count__trailUrls": {
          url: urlBase + "/dwTrails/:id/trailUrls/count",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.trailUrlRatings() instead.
        "prototype$__get__trailUrlRatings": {
          isArray: true,
          url: urlBase + "/dwTrails/:id/trailUrlRatings",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.trailUrlRatings.create() instead.
        "prototype$__create__trailUrlRatings": {
          url: urlBase + "/dwTrails/:id/trailUrlRatings",
          method: "POST"
        },

        // INTERNAL. Use DwTrail.trailUrlRatings.destroyAll() instead.
        "prototype$__delete__trailUrlRatings": {
          url: urlBase + "/dwTrails/:id/trailUrlRatings",
          method: "DELETE"
        },

        // INTERNAL. Use DwTrail.trailUrlRatings.count() instead.
        "prototype$__count__trailUrlRatings": {
          url: urlBase + "/dwTrails/:id/trailUrlRatings/count",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.feeds() instead.
        "prototype$__get__feeds": {
          isArray: true,
          url: urlBase + "/dwTrails/:id/feeds",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.feeds.create() instead.
        "prototype$__create__feeds": {
          url: urlBase + "/dwTrails/:id/feeds",
          method: "POST"
        },

        // INTERNAL. Use DwTrail.feeds.destroyAll() instead.
        "prototype$__delete__feeds": {
          url: urlBase + "/dwTrails/:id/feeds",
          method: "DELETE"
        },

        // INTERNAL. Use DwTrail.feeds.count() instead.
        "prototype$__count__feeds": {
          url: urlBase + "/dwTrails/:id/feeds/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrail#create
         * @methodOf lbServices.DwTrail
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/dwTrails",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrail#createMany
         * @methodOf lbServices.DwTrail
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/dwTrails",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrail#upsert
         * @methodOf lbServices.DwTrail
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/dwTrails",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrail#exists
         * @methodOf lbServices.DwTrail
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/dwTrails/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrail#findById
         * @methodOf lbServices.DwTrail
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/dwTrails/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrail#find
         * @methodOf lbServices.DwTrail
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/dwTrails",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrail#findOne
         * @methodOf lbServices.DwTrail
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/dwTrails/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrail#updateAll
         * @methodOf lbServices.DwTrail
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/dwTrails/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrail#deleteById
         * @methodOf lbServices.DwTrail
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/dwTrails/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrail#count
         * @methodOf lbServices.DwTrail
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/dwTrails/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrail#prototype$updateAttributes
         * @methodOf lbServices.DwTrail
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/dwTrails/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTrail#createChangeStream
         * @methodOf lbServices.DwTrail
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/dwTrails/change-stream",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.trails.findById() instead.
        "::findById::AminoUser::trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/trails/:fk",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.trails.destroyById() instead.
        "::destroyById::AminoUser::trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/trails/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.trails.updateById() instead.
        "::updateById::AminoUser::trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/trails/:fk",
          method: "PUT"
        },

        // INTERNAL. Use AminoUser.trails.link() instead.
        "::link::AminoUser::trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/trails/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use AminoUser.trails.unlink() instead.
        "::unlink::AminoUser::trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/trails/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.trails.exists() instead.
        "::exists::AminoUser::trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/trails/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use AminoUser.trails() instead.
        "::get::AminoUser::trails": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/trails",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.trails.create() instead.
        "::create::AminoUser::trails": {
          url: urlBase + "/AminoUsers/:id/trails",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.trails.createMany() instead.
        "::createMany::AminoUser::trails": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/trails",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.trails.destroyAll() instead.
        "::delete::AminoUser::trails": {
          url: urlBase + "/AminoUsers/:id/trails",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.trails.count() instead.
        "::count::AminoUser::trails": {
          url: urlBase + "/AminoUsers/:id/trails/count",
          method: "GET"
        },

        // INTERNAL. Use DwTrailUrlRating.trail() instead.
        "::get::DwTrailUrlRating::trail": {
          url: urlBase + "/dwTrailUrlRatings/:id/trail",
          method: "GET"
        },

        // INTERNAL. Use DwTrailUrl.trail() instead.
        "::get::DwTrailUrl::trail": {
          url: urlBase + "/dwTrailUrls/:id/trail",
          method: "GET"
        },

        // INTERNAL. Use DwFeed.trails.findById() instead.
        "::findById::DwFeed::trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/trails/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwFeed.trails.destroyById() instead.
        "::destroyById::DwFeed::trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/trails/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwFeed.trails.updateById() instead.
        "::updateById::DwFeed::trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/trails/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwFeed.trails.link() instead.
        "::link::DwFeed::trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/trails/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwFeed.trails.unlink() instead.
        "::unlink::DwFeed::trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/trails/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwFeed.trails.exists() instead.
        "::exists::DwFeed::trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/trails/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use DwFeed.trails() instead.
        "::get::DwFeed::trails": {
          isArray: true,
          url: urlBase + "/dwFeeds/:id/trails",
          method: "GET"
        },

        // INTERNAL. Use DwFeed.trails.create() instead.
        "::create::DwFeed::trails": {
          url: urlBase + "/dwFeeds/:id/trails",
          method: "POST"
        },

        // INTERNAL. Use DwFeed.trails.createMany() instead.
        "::createMany::DwFeed::trails": {
          isArray: true,
          url: urlBase + "/dwFeeds/:id/trails",
          method: "POST"
        },

        // INTERNAL. Use DwFeed.trails.destroyAll() instead.
        "::delete::DwFeed::trails": {
          url: urlBase + "/dwFeeds/:id/trails",
          method: "DELETE"
        },

        // INTERNAL. Use DwFeed.trails.count() instead.
        "::count::DwFeed::trails": {
          url: urlBase + "/dwFeeds/:id/trails/count",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.trails.findById() instead.
        "::findById::DwDomain::trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/trails/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.trails.destroyById() instead.
        "::destroyById::DwDomain::trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/trails/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.trails.updateById() instead.
        "::updateById::DwDomain::trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/trails/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwDomain.trails() instead.
        "::get::DwDomain::trails": {
          isArray: true,
          url: urlBase + "/dwDomains/:id/trails",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.trails.create() instead.
        "::create::DwDomain::trails": {
          url: urlBase + "/dwDomains/:id/trails",
          method: "POST"
        },

        // INTERNAL. Use DwDomain.trails.createMany() instead.
        "::createMany::DwDomain::trails": {
          isArray: true,
          url: urlBase + "/dwDomains/:id/trails",
          method: "POST"
        },

        // INTERNAL. Use DwDomain.trails.destroyAll() instead.
        "::delete::DwDomain::trails": {
          url: urlBase + "/dwDomains/:id/trails",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.trails.count() instead.
        "::count::DwDomain::trails": {
          url: urlBase + "/dwDomains/:id/trails/count",
          method: "GET"
        },

        // INTERNAL. Use DwTeam.trails.findById() instead.
        "::findById::DwTeam::trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/trails/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwTeam.trails.destroyById() instead.
        "::destroyById::DwTeam::trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/trails/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTeam.trails.updateById() instead.
        "::updateById::DwTeam::trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/trails/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTeam.trails() instead.
        "::get::DwTeam::trails": {
          isArray: true,
          url: urlBase + "/dwTeams/:id/trails",
          method: "GET"
        },

        // INTERNAL. Use DwTeam.trails.create() instead.
        "::create::DwTeam::trails": {
          url: urlBase + "/dwTeams/:id/trails",
          method: "POST"
        },

        // INTERNAL. Use DwTeam.trails.createMany() instead.
        "::createMany::DwTeam::trails": {
          isArray: true,
          url: urlBase + "/dwTeams/:id/trails",
          method: "POST"
        },

        // INTERNAL. Use DwTeam.trails.destroyAll() instead.
        "::delete::DwTeam::trails": {
          url: urlBase + "/dwTeams/:id/trails",
          method: "DELETE"
        },

        // INTERNAL. Use DwTeam.trails.count() instead.
        "::count::DwTeam::trails": {
          url: urlBase + "/dwTeams/:id/trails/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.DwTrail#updateOrCreate
         * @methodOf lbServices.DwTrail
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.DwTrail#update
         * @methodOf lbServices.DwTrail
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.DwTrail#destroyById
         * @methodOf lbServices.DwTrail
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.DwTrail#removeById
         * @methodOf lbServices.DwTrail
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.DwTrail#modelName
    * @propertyOf lbServices.DwTrail
    * @description
    * The name of the model represented by this $resource,
    * i.e. `DwTrail`.
    */
    R.modelName = "DwTrail";

    /**
     * @ngdoc object
     * @name lbServices.DwTrail.users
     * @header lbServices.DwTrail.users
     * @object
     * @description
     *
     * The object `DwTrail.users` groups methods
     * manipulating `AminoUser` instances related to `DwTrail`.
     *
     * Call {@link lbServices.DwTrail#users DwTrail.users()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.DwTrail#users
         * @methodOf lbServices.DwTrail
         *
         * @description
         *
         * Queries users of DwTrail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.users = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::get::DwTrail::users"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.users#count
         * @methodOf lbServices.DwTrail.users
         *
         * @description
         *
         * Counts users of DwTrail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.users.count = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::count::DwTrail::users"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.users#create
         * @methodOf lbServices.DwTrail.users
         *
         * @description
         *
         * Creates a new instance in users of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.users.create = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::create::DwTrail::users"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.users#createMany
         * @methodOf lbServices.DwTrail.users
         *
         * @description
         *
         * Creates a new instance in users of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.users.createMany = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::createMany::DwTrail::users"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.users#destroyAll
         * @methodOf lbServices.DwTrail.users
         *
         * @description
         *
         * Deletes all users of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.users.destroyAll = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::delete::DwTrail::users"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.users#destroyById
         * @methodOf lbServices.DwTrail.users
         *
         * @description
         *
         * Delete a related item by id for users.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for users
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.users.destroyById = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::destroyById::DwTrail::users"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.users#exists
         * @methodOf lbServices.DwTrail.users
         *
         * @description
         *
         * Check the existence of users relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for users
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.users.exists = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::exists::DwTrail::users"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.users#findById
         * @methodOf lbServices.DwTrail.users
         *
         * @description
         *
         * Find a related item by id for users.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for users
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.users.findById = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::findById::DwTrail::users"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.users#link
         * @methodOf lbServices.DwTrail.users
         *
         * @description
         *
         * Add a related item by id for users.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for users
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.users.link = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::link::DwTrail::users"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.users#unlink
         * @methodOf lbServices.DwTrail.users
         *
         * @description
         *
         * Remove the users relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for users
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.users.unlink = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::unlink::DwTrail::users"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.users#updateById
         * @methodOf lbServices.DwTrail.users
         *
         * @description
         *
         * Update a related item by id for users.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for users
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.users.updateById = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::updateById::DwTrail::users"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.DwTrail.trailUrls
     * @header lbServices.DwTrail.trailUrls
     * @object
     * @description
     *
     * The object `DwTrail.trailUrls` groups methods
     * manipulating `DwTrailUrl` instances related to `DwTrail`.
     *
     * Call {@link lbServices.DwTrail#trailUrls DwTrail.trailUrls()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.DwTrail#trailUrls
         * @methodOf lbServices.DwTrail
         *
         * @description
         *
         * Queries trailUrls of DwTrail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrl` object.)
         * </em>
         */
        R.trailUrls = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::get::DwTrail::trailUrls"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.trailUrls#count
         * @methodOf lbServices.DwTrail.trailUrls
         *
         * @description
         *
         * Counts trailUrls of DwTrail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.trailUrls.count = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::count::DwTrail::trailUrls"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.trailUrls#create
         * @methodOf lbServices.DwTrail.trailUrls
         *
         * @description
         *
         * Creates a new instance in trailUrls of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrl` object.)
         * </em>
         */
        R.trailUrls.create = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::create::DwTrail::trailUrls"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.trailUrls#createMany
         * @methodOf lbServices.DwTrail.trailUrls
         *
         * @description
         *
         * Creates a new instance in trailUrls of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrl` object.)
         * </em>
         */
        R.trailUrls.createMany = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::createMany::DwTrail::trailUrls"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.trailUrls#destroyAll
         * @methodOf lbServices.DwTrail.trailUrls
         *
         * @description
         *
         * Deletes all trailUrls of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.trailUrls.destroyAll = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::delete::DwTrail::trailUrls"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.trailUrls#destroyById
         * @methodOf lbServices.DwTrail.trailUrls
         *
         * @description
         *
         * Delete a related item by id for trailUrls.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for trailUrls
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.trailUrls.destroyById = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::destroyById::DwTrail::trailUrls"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.trailUrls#findById
         * @methodOf lbServices.DwTrail.trailUrls
         *
         * @description
         *
         * Find a related item by id for trailUrls.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for trailUrls
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrl` object.)
         * </em>
         */
        R.trailUrls.findById = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::findById::DwTrail::trailUrls"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.trailUrls#updateById
         * @methodOf lbServices.DwTrail.trailUrls
         *
         * @description
         *
         * Update a related item by id for trailUrls.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for trailUrls
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrl` object.)
         * </em>
         */
        R.trailUrls.updateById = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::updateById::DwTrail::trailUrls"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.DwTrail.trailUrlRatings
     * @header lbServices.DwTrail.trailUrlRatings
     * @object
     * @description
     *
     * The object `DwTrail.trailUrlRatings` groups methods
     * manipulating `DwTrailUrlRating` instances related to `DwTrail`.
     *
     * Call {@link lbServices.DwTrail#trailUrlRatings DwTrail.trailUrlRatings()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.DwTrail#trailUrlRatings
         * @methodOf lbServices.DwTrail
         *
         * @description
         *
         * Queries trailUrlRatings of DwTrail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrlRating` object.)
         * </em>
         */
        R.trailUrlRatings = function() {
          var TargetResource = $injector.get("DwTrailUrlRating");
          var action = TargetResource["::get::DwTrail::trailUrlRatings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.trailUrlRatings#count
         * @methodOf lbServices.DwTrail.trailUrlRatings
         *
         * @description
         *
         * Counts trailUrlRatings of DwTrail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.trailUrlRatings.count = function() {
          var TargetResource = $injector.get("DwTrailUrlRating");
          var action = TargetResource["::count::DwTrail::trailUrlRatings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.trailUrlRatings#create
         * @methodOf lbServices.DwTrail.trailUrlRatings
         *
         * @description
         *
         * Creates a new instance in trailUrlRatings of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrlRating` object.)
         * </em>
         */
        R.trailUrlRatings.create = function() {
          var TargetResource = $injector.get("DwTrailUrlRating");
          var action = TargetResource["::create::DwTrail::trailUrlRatings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.trailUrlRatings#createMany
         * @methodOf lbServices.DwTrail.trailUrlRatings
         *
         * @description
         *
         * Creates a new instance in trailUrlRatings of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrlRating` object.)
         * </em>
         */
        R.trailUrlRatings.createMany = function() {
          var TargetResource = $injector.get("DwTrailUrlRating");
          var action = TargetResource["::createMany::DwTrail::trailUrlRatings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.trailUrlRatings#destroyAll
         * @methodOf lbServices.DwTrail.trailUrlRatings
         *
         * @description
         *
         * Deletes all trailUrlRatings of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.trailUrlRatings.destroyAll = function() {
          var TargetResource = $injector.get("DwTrailUrlRating");
          var action = TargetResource["::delete::DwTrail::trailUrlRatings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.trailUrlRatings#destroyById
         * @methodOf lbServices.DwTrail.trailUrlRatings
         *
         * @description
         *
         * Delete a related item by id for trailUrlRatings.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for trailUrlRatings
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.trailUrlRatings.destroyById = function() {
          var TargetResource = $injector.get("DwTrailUrlRating");
          var action = TargetResource["::destroyById::DwTrail::trailUrlRatings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.trailUrlRatings#findById
         * @methodOf lbServices.DwTrail.trailUrlRatings
         *
         * @description
         *
         * Find a related item by id for trailUrlRatings.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for trailUrlRatings
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrlRating` object.)
         * </em>
         */
        R.trailUrlRatings.findById = function() {
          var TargetResource = $injector.get("DwTrailUrlRating");
          var action = TargetResource["::findById::DwTrail::trailUrlRatings"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.trailUrlRatings#updateById
         * @methodOf lbServices.DwTrail.trailUrlRatings
         *
         * @description
         *
         * Update a related item by id for trailUrlRatings.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for trailUrlRatings
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrlRating` object.)
         * </em>
         */
        R.trailUrlRatings.updateById = function() {
          var TargetResource = $injector.get("DwTrailUrlRating");
          var action = TargetResource["::updateById::DwTrail::trailUrlRatings"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.DwTrail.feeds
     * @header lbServices.DwTrail.feeds
     * @object
     * @description
     *
     * The object `DwTrail.feeds` groups methods
     * manipulating `DwFeed` instances related to `DwTrail`.
     *
     * Call {@link lbServices.DwTrail#feeds DwTrail.feeds()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.DwTrail#feeds
         * @methodOf lbServices.DwTrail
         *
         * @description
         *
         * Queries feeds of DwTrail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::get::DwTrail::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.feeds#count
         * @methodOf lbServices.DwTrail.feeds
         *
         * @description
         *
         * Counts feeds of DwTrail.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.feeds.count = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::count::DwTrail::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.feeds#create
         * @methodOf lbServices.DwTrail.feeds
         *
         * @description
         *
         * Creates a new instance in feeds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds.create = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::create::DwTrail::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.feeds#createMany
         * @methodOf lbServices.DwTrail.feeds
         *
         * @description
         *
         * Creates a new instance in feeds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds.createMany = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::createMany::DwTrail::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.feeds#destroyAll
         * @methodOf lbServices.DwTrail.feeds
         *
         * @description
         *
         * Deletes all feeds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.feeds.destroyAll = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::delete::DwTrail::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.feeds#destroyById
         * @methodOf lbServices.DwTrail.feeds
         *
         * @description
         *
         * Delete a related item by id for feeds.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for feeds
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.feeds.destroyById = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::destroyById::DwTrail::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.feeds#exists
         * @methodOf lbServices.DwTrail.feeds
         *
         * @description
         *
         * Check the existence of feeds relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for feeds
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds.exists = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::exists::DwTrail::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.feeds#findById
         * @methodOf lbServices.DwTrail.feeds
         *
         * @description
         *
         * Find a related item by id for feeds.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for feeds
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds.findById = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::findById::DwTrail::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.feeds#link
         * @methodOf lbServices.DwTrail.feeds
         *
         * @description
         *
         * Add a related item by id for feeds.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for feeds
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds.link = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::link::DwTrail::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.feeds#unlink
         * @methodOf lbServices.DwTrail.feeds
         *
         * @description
         *
         * Remove the feeds relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for feeds
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.feeds.unlink = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::unlink::DwTrail::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail.feeds#updateById
         * @methodOf lbServices.DwTrail.feeds
         *
         * @description
         *
         * Update a related item by id for feeds.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for feeds
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds.updateById = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::updateById::DwTrail::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail#domain
         * @methodOf lbServices.DwTrail
         *
         * @description
         *
         * Fetches belongsTo relation domain.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R.domain = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::get::DwTrail::domain"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTrail#team
         * @methodOf lbServices.DwTrail
         *
         * @description
         *
         * Fetches belongsTo relation team.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        R.team = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::get::DwTrail::team"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.DwSetting
 * @header lbServices.DwSetting
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DwSetting` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "DwSetting",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/dwSettings/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.DwSetting#create
         * @methodOf lbServices.DwSetting
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwSetting` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/dwSettings",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwSetting#createMany
         * @methodOf lbServices.DwSetting
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwSetting` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/dwSettings",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwSetting#upsert
         * @methodOf lbServices.DwSetting
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwSetting` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/dwSettings",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwSetting#exists
         * @methodOf lbServices.DwSetting
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/dwSettings/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwSetting#findById
         * @methodOf lbServices.DwSetting
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwSetting` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/dwSettings/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwSetting#find
         * @methodOf lbServices.DwSetting
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwSetting` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/dwSettings",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwSetting#findOne
         * @methodOf lbServices.DwSetting
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwSetting` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/dwSettings/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwSetting#updateAll
         * @methodOf lbServices.DwSetting
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/dwSettings/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwSetting#deleteById
         * @methodOf lbServices.DwSetting
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/dwSettings/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwSetting#count
         * @methodOf lbServices.DwSetting
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/dwSettings/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwSetting#prototype$updateAttributes
         * @methodOf lbServices.DwSetting
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwSetting` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/dwSettings/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwSetting#createChangeStream
         * @methodOf lbServices.DwSetting
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/dwSettings/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.DwSetting#updateOrCreate
         * @methodOf lbServices.DwSetting
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwSetting` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.DwSetting#update
         * @methodOf lbServices.DwSetting
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.DwSetting#destroyById
         * @methodOf lbServices.DwSetting
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.DwSetting#removeById
         * @methodOf lbServices.DwSetting
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.DwSetting#modelName
    * @propertyOf lbServices.DwSetting
    * @description
    * The name of the model represented by this $resource,
    * i.e. `DwSetting`.
    */
    R.modelName = "DwSetting";


    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.DwServiceType
 * @header lbServices.DwServiceType
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DwServiceType` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "DwServiceType",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/dwServiceTypes/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use DwServiceType.feeds.findById() instead.
        "prototype$__findById__feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwServiceTypes/:id/feeds/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwServiceType.feeds.destroyById() instead.
        "prototype$__destroyById__feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwServiceTypes/:id/feeds/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwServiceType.feeds.updateById() instead.
        "prototype$__updateById__feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwServiceTypes/:id/feeds/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwServiceType.extractors.findById() instead.
        "prototype$__findById__extractors": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwServiceTypes/:id/extractors/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwServiceType.extractors.destroyById() instead.
        "prototype$__destroyById__extractors": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwServiceTypes/:id/extractors/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwServiceType.extractors.updateById() instead.
        "prototype$__updateById__extractors": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwServiceTypes/:id/extractors/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwServiceType.feeds() instead.
        "prototype$__get__feeds": {
          isArray: true,
          url: urlBase + "/dwServiceTypes/:id/feeds",
          method: "GET"
        },

        // INTERNAL. Use DwServiceType.feeds.create() instead.
        "prototype$__create__feeds": {
          url: urlBase + "/dwServiceTypes/:id/feeds",
          method: "POST"
        },

        // INTERNAL. Use DwServiceType.feeds.destroyAll() instead.
        "prototype$__delete__feeds": {
          url: urlBase + "/dwServiceTypes/:id/feeds",
          method: "DELETE"
        },

        // INTERNAL. Use DwServiceType.feeds.count() instead.
        "prototype$__count__feeds": {
          url: urlBase + "/dwServiceTypes/:id/feeds/count",
          method: "GET"
        },

        // INTERNAL. Use DwServiceType.extractors() instead.
        "prototype$__get__extractors": {
          isArray: true,
          url: urlBase + "/dwServiceTypes/:id/extractors",
          method: "GET"
        },

        // INTERNAL. Use DwServiceType.extractors.create() instead.
        "prototype$__create__extractors": {
          url: urlBase + "/dwServiceTypes/:id/extractors",
          method: "POST"
        },

        // INTERNAL. Use DwServiceType.extractors.destroyAll() instead.
        "prototype$__delete__extractors": {
          url: urlBase + "/dwServiceTypes/:id/extractors",
          method: "DELETE"
        },

        // INTERNAL. Use DwServiceType.extractors.count() instead.
        "prototype$__count__extractors": {
          url: urlBase + "/dwServiceTypes/:id/extractors/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType#create
         * @methodOf lbServices.DwServiceType
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwServiceType` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/dwServiceTypes",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType#createMany
         * @methodOf lbServices.DwServiceType
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwServiceType` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/dwServiceTypes",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType#upsert
         * @methodOf lbServices.DwServiceType
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwServiceType` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/dwServiceTypes",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType#exists
         * @methodOf lbServices.DwServiceType
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/dwServiceTypes/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType#findById
         * @methodOf lbServices.DwServiceType
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwServiceType` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/dwServiceTypes/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType#find
         * @methodOf lbServices.DwServiceType
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwServiceType` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/dwServiceTypes",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType#findOne
         * @methodOf lbServices.DwServiceType
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwServiceType` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/dwServiceTypes/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType#updateAll
         * @methodOf lbServices.DwServiceType
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/dwServiceTypes/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType#deleteById
         * @methodOf lbServices.DwServiceType
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/dwServiceTypes/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType#count
         * @methodOf lbServices.DwServiceType
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/dwServiceTypes/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType#prototype$updateAttributes
         * @methodOf lbServices.DwServiceType
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwServiceType` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/dwServiceTypes/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType#createChangeStream
         * @methodOf lbServices.DwServiceType
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/dwServiceTypes/change-stream",
          method: "POST"
        },

        // INTERNAL. Use DwFeed.serviceType() instead.
        "::get::DwFeed::serviceType": {
          url: urlBase + "/dwFeeds/:id/serviceType",
          method: "GET"
        },

        // INTERNAL. Use DwExtractor.serviceType() instead.
        "::get::DwExtractor::serviceType": {
          url: urlBase + "/dwExtractors/:id/serviceType",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.DwServiceType#updateOrCreate
         * @methodOf lbServices.DwServiceType
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwServiceType` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType#update
         * @methodOf lbServices.DwServiceType
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType#destroyById
         * @methodOf lbServices.DwServiceType
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType#removeById
         * @methodOf lbServices.DwServiceType
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.DwServiceType#modelName
    * @propertyOf lbServices.DwServiceType
    * @description
    * The name of the model represented by this $resource,
    * i.e. `DwServiceType`.
    */
    R.modelName = "DwServiceType";

    /**
     * @ngdoc object
     * @name lbServices.DwServiceType.feeds
     * @header lbServices.DwServiceType.feeds
     * @object
     * @description
     *
     * The object `DwServiceType.feeds` groups methods
     * manipulating `DwFeed` instances related to `DwServiceType`.
     *
     * Call {@link lbServices.DwServiceType#feeds DwServiceType.feeds()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.DwServiceType#feeds
         * @methodOf lbServices.DwServiceType
         *
         * @description
         *
         * Queries feeds of DwServiceType.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::get::DwServiceType::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType.feeds#count
         * @methodOf lbServices.DwServiceType.feeds
         *
         * @description
         *
         * Counts feeds of DwServiceType.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.feeds.count = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::count::DwServiceType::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType.feeds#create
         * @methodOf lbServices.DwServiceType.feeds
         *
         * @description
         *
         * Creates a new instance in feeds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds.create = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::create::DwServiceType::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType.feeds#createMany
         * @methodOf lbServices.DwServiceType.feeds
         *
         * @description
         *
         * Creates a new instance in feeds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds.createMany = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::createMany::DwServiceType::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType.feeds#destroyAll
         * @methodOf lbServices.DwServiceType.feeds
         *
         * @description
         *
         * Deletes all feeds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.feeds.destroyAll = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::delete::DwServiceType::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType.feeds#destroyById
         * @methodOf lbServices.DwServiceType.feeds
         *
         * @description
         *
         * Delete a related item by id for feeds.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for feeds
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.feeds.destroyById = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::destroyById::DwServiceType::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType.feeds#findById
         * @methodOf lbServices.DwServiceType.feeds
         *
         * @description
         *
         * Find a related item by id for feeds.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for feeds
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds.findById = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::findById::DwServiceType::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType.feeds#updateById
         * @methodOf lbServices.DwServiceType.feeds
         *
         * @description
         *
         * Update a related item by id for feeds.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for feeds
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds.updateById = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::updateById::DwServiceType::feeds"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.DwServiceType.extractors
     * @header lbServices.DwServiceType.extractors
     * @object
     * @description
     *
     * The object `DwServiceType.extractors` groups methods
     * manipulating `DwExtractor` instances related to `DwServiceType`.
     *
     * Call {@link lbServices.DwServiceType#extractors DwServiceType.extractors()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.DwServiceType#extractors
         * @methodOf lbServices.DwServiceType
         *
         * @description
         *
         * Queries extractors of DwServiceType.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwExtractor` object.)
         * </em>
         */
        R.extractors = function() {
          var TargetResource = $injector.get("DwExtractor");
          var action = TargetResource["::get::DwServiceType::extractors"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType.extractors#count
         * @methodOf lbServices.DwServiceType.extractors
         *
         * @description
         *
         * Counts extractors of DwServiceType.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.extractors.count = function() {
          var TargetResource = $injector.get("DwExtractor");
          var action = TargetResource["::count::DwServiceType::extractors"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType.extractors#create
         * @methodOf lbServices.DwServiceType.extractors
         *
         * @description
         *
         * Creates a new instance in extractors of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwExtractor` object.)
         * </em>
         */
        R.extractors.create = function() {
          var TargetResource = $injector.get("DwExtractor");
          var action = TargetResource["::create::DwServiceType::extractors"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType.extractors#createMany
         * @methodOf lbServices.DwServiceType.extractors
         *
         * @description
         *
         * Creates a new instance in extractors of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwExtractor` object.)
         * </em>
         */
        R.extractors.createMany = function() {
          var TargetResource = $injector.get("DwExtractor");
          var action = TargetResource["::createMany::DwServiceType::extractors"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType.extractors#destroyAll
         * @methodOf lbServices.DwServiceType.extractors
         *
         * @description
         *
         * Deletes all extractors of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.extractors.destroyAll = function() {
          var TargetResource = $injector.get("DwExtractor");
          var action = TargetResource["::delete::DwServiceType::extractors"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType.extractors#destroyById
         * @methodOf lbServices.DwServiceType.extractors
         *
         * @description
         *
         * Delete a related item by id for extractors.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for extractors
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.extractors.destroyById = function() {
          var TargetResource = $injector.get("DwExtractor");
          var action = TargetResource["::destroyById::DwServiceType::extractors"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType.extractors#findById
         * @methodOf lbServices.DwServiceType.extractors
         *
         * @description
         *
         * Find a related item by id for extractors.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for extractors
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwExtractor` object.)
         * </em>
         */
        R.extractors.findById = function() {
          var TargetResource = $injector.get("DwExtractor");
          var action = TargetResource["::findById::DwServiceType::extractors"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwServiceType.extractors#updateById
         * @methodOf lbServices.DwServiceType.extractors
         *
         * @description
         *
         * Update a related item by id for extractors.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for extractors
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwExtractor` object.)
         * </em>
         */
        R.extractors.updateById = function() {
          var TargetResource = $injector.get("DwExtractor");
          var action = TargetResource["::updateById::DwServiceType::extractors"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.DwFeed
 * @header lbServices.DwFeed
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DwFeed` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "DwFeed",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/dwFeeds/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use DwFeed.trails.findById() instead.
        "prototype$__findById__trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/trails/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwFeed.trails.destroyById() instead.
        "prototype$__destroyById__trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/trails/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwFeed.trails.updateById() instead.
        "prototype$__updateById__trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/trails/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwFeed.trails.link() instead.
        "prototype$__link__trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/trails/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwFeed.trails.unlink() instead.
        "prototype$__unlink__trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/trails/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwFeed.trails.exists() instead.
        "prototype$__exists__trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/trails/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use DwFeed.serviceType() instead.
        "prototype$__get__serviceType": {
          url: urlBase + "/dwFeeds/:id/serviceType",
          method: "GET"
        },

        // INTERNAL. Use DwFeed.transmissions.findById() instead.
        "prototype$__findById__transmissions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/transmissions/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwFeed.transmissions.destroyById() instead.
        "prototype$__destroyById__transmissions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/transmissions/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwFeed.transmissions.updateById() instead.
        "prototype$__updateById__transmissions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/transmissions/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwFeed.domains.findById() instead.
        "prototype$__findById__domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/domains/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwFeed.domains.destroyById() instead.
        "prototype$__destroyById__domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/domains/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwFeed.domains.updateById() instead.
        "prototype$__updateById__domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/domains/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwFeed.domains.link() instead.
        "prototype$__link__domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/domains/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwFeed.domains.unlink() instead.
        "prototype$__unlink__domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/domains/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwFeed.domains.exists() instead.
        "prototype$__exists__domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/domains/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use DwFeed.teams.findById() instead.
        "prototype$__findById__teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/teams/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwFeed.teams.destroyById() instead.
        "prototype$__destroyById__teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/teams/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwFeed.teams.updateById() instead.
        "prototype$__updateById__teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/teams/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwFeed.teams.link() instead.
        "prototype$__link__teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/teams/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwFeed.teams.unlink() instead.
        "prototype$__unlink__teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/teams/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwFeed.teams.exists() instead.
        "prototype$__exists__teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/teams/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use DwFeed.trails() instead.
        "prototype$__get__trails": {
          isArray: true,
          url: urlBase + "/dwFeeds/:id/trails",
          method: "GET"
        },

        // INTERNAL. Use DwFeed.trails.create() instead.
        "prototype$__create__trails": {
          url: urlBase + "/dwFeeds/:id/trails",
          method: "POST"
        },

        // INTERNAL. Use DwFeed.trails.destroyAll() instead.
        "prototype$__delete__trails": {
          url: urlBase + "/dwFeeds/:id/trails",
          method: "DELETE"
        },

        // INTERNAL. Use DwFeed.trails.count() instead.
        "prototype$__count__trails": {
          url: urlBase + "/dwFeeds/:id/trails/count",
          method: "GET"
        },

        // INTERNAL. Use DwFeed.transmissions() instead.
        "prototype$__get__transmissions": {
          isArray: true,
          url: urlBase + "/dwFeeds/:id/transmissions",
          method: "GET"
        },

        // INTERNAL. Use DwFeed.transmissions.create() instead.
        "prototype$__create__transmissions": {
          url: urlBase + "/dwFeeds/:id/transmissions",
          method: "POST"
        },

        // INTERNAL. Use DwFeed.transmissions.destroyAll() instead.
        "prototype$__delete__transmissions": {
          url: urlBase + "/dwFeeds/:id/transmissions",
          method: "DELETE"
        },

        // INTERNAL. Use DwFeed.transmissions.count() instead.
        "prototype$__count__transmissions": {
          url: urlBase + "/dwFeeds/:id/transmissions/count",
          method: "GET"
        },

        // INTERNAL. Use DwFeed.domains() instead.
        "prototype$__get__domains": {
          isArray: true,
          url: urlBase + "/dwFeeds/:id/domains",
          method: "GET"
        },

        // INTERNAL. Use DwFeed.domains.create() instead.
        "prototype$__create__domains": {
          url: urlBase + "/dwFeeds/:id/domains",
          method: "POST"
        },

        // INTERNAL. Use DwFeed.domains.destroyAll() instead.
        "prototype$__delete__domains": {
          url: urlBase + "/dwFeeds/:id/domains",
          method: "DELETE"
        },

        // INTERNAL. Use DwFeed.domains.count() instead.
        "prototype$__count__domains": {
          url: urlBase + "/dwFeeds/:id/domains/count",
          method: "GET"
        },

        // INTERNAL. Use DwFeed.teams() instead.
        "prototype$__get__teams": {
          isArray: true,
          url: urlBase + "/dwFeeds/:id/teams",
          method: "GET"
        },

        // INTERNAL. Use DwFeed.teams.create() instead.
        "prototype$__create__teams": {
          url: urlBase + "/dwFeeds/:id/teams",
          method: "POST"
        },

        // INTERNAL. Use DwFeed.teams.destroyAll() instead.
        "prototype$__delete__teams": {
          url: urlBase + "/dwFeeds/:id/teams",
          method: "DELETE"
        },

        // INTERNAL. Use DwFeed.teams.count() instead.
        "prototype$__count__teams": {
          url: urlBase + "/dwFeeds/:id/teams/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwFeed#create
         * @methodOf lbServices.DwFeed
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/dwFeeds",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwFeed#createMany
         * @methodOf lbServices.DwFeed
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/dwFeeds",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwFeed#upsert
         * @methodOf lbServices.DwFeed
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/dwFeeds",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwFeed#exists
         * @methodOf lbServices.DwFeed
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/dwFeeds/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwFeed#findById
         * @methodOf lbServices.DwFeed
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/dwFeeds/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwFeed#find
         * @methodOf lbServices.DwFeed
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/dwFeeds",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwFeed#findOne
         * @methodOf lbServices.DwFeed
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/dwFeeds/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwFeed#updateAll
         * @methodOf lbServices.DwFeed
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/dwFeeds/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwFeed#deleteById
         * @methodOf lbServices.DwFeed
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/dwFeeds/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwFeed#count
         * @methodOf lbServices.DwFeed
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/dwFeeds/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwFeed#prototype$updateAttributes
         * @methodOf lbServices.DwFeed
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/dwFeeds/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwFeed#createChangeStream
         * @methodOf lbServices.DwFeed
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/dwFeeds/change-stream",
          method: "POST"
        },

        // INTERNAL. Use DwTransmission.feeds() instead.
        "::get::DwTransmission::feeds": {
          url: urlBase + "/dwTransmissions/:id/feeds",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.feeds.findById() instead.
        "::findById::DwTrail::feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/feeds/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.feeds.destroyById() instead.
        "::destroyById::DwTrail::feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/feeds/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTrail.feeds.updateById() instead.
        "::updateById::DwTrail::feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/feeds/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTrail.feeds.link() instead.
        "::link::DwTrail::feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/feeds/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTrail.feeds.unlink() instead.
        "::unlink::DwTrail::feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/feeds/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTrail.feeds.exists() instead.
        "::exists::DwTrail::feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrails/:id/feeds/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use DwTrail.feeds() instead.
        "::get::DwTrail::feeds": {
          isArray: true,
          url: urlBase + "/dwTrails/:id/feeds",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.feeds.create() instead.
        "::create::DwTrail::feeds": {
          url: urlBase + "/dwTrails/:id/feeds",
          method: "POST"
        },

        // INTERNAL. Use DwTrail.feeds.createMany() instead.
        "::createMany::DwTrail::feeds": {
          isArray: true,
          url: urlBase + "/dwTrails/:id/feeds",
          method: "POST"
        },

        // INTERNAL. Use DwTrail.feeds.destroyAll() instead.
        "::delete::DwTrail::feeds": {
          url: urlBase + "/dwTrails/:id/feeds",
          method: "DELETE"
        },

        // INTERNAL. Use DwTrail.feeds.count() instead.
        "::count::DwTrail::feeds": {
          url: urlBase + "/dwTrails/:id/feeds/count",
          method: "GET"
        },

        // INTERNAL. Use DwServiceType.feeds.findById() instead.
        "::findById::DwServiceType::feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwServiceTypes/:id/feeds/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwServiceType.feeds.destroyById() instead.
        "::destroyById::DwServiceType::feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwServiceTypes/:id/feeds/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwServiceType.feeds.updateById() instead.
        "::updateById::DwServiceType::feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwServiceTypes/:id/feeds/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwServiceType.feeds() instead.
        "::get::DwServiceType::feeds": {
          isArray: true,
          url: urlBase + "/dwServiceTypes/:id/feeds",
          method: "GET"
        },

        // INTERNAL. Use DwServiceType.feeds.create() instead.
        "::create::DwServiceType::feeds": {
          url: urlBase + "/dwServiceTypes/:id/feeds",
          method: "POST"
        },

        // INTERNAL. Use DwServiceType.feeds.createMany() instead.
        "::createMany::DwServiceType::feeds": {
          isArray: true,
          url: urlBase + "/dwServiceTypes/:id/feeds",
          method: "POST"
        },

        // INTERNAL. Use DwServiceType.feeds.destroyAll() instead.
        "::delete::DwServiceType::feeds": {
          url: urlBase + "/dwServiceTypes/:id/feeds",
          method: "DELETE"
        },

        // INTERNAL. Use DwServiceType.feeds.count() instead.
        "::count::DwServiceType::feeds": {
          url: urlBase + "/dwServiceTypes/:id/feeds/count",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.feeds.findById() instead.
        "::findById::DwDomain::feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/feeds/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.feeds.destroyById() instead.
        "::destroyById::DwDomain::feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/feeds/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.feeds.updateById() instead.
        "::updateById::DwDomain::feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/feeds/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwDomain.feeds.link() instead.
        "::link::DwDomain::feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/feeds/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwDomain.feeds.unlink() instead.
        "::unlink::DwDomain::feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/feeds/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.feeds.exists() instead.
        "::exists::DwDomain::feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/feeds/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use DwDomain.feeds() instead.
        "::get::DwDomain::feeds": {
          isArray: true,
          url: urlBase + "/dwDomains/:id/feeds",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.feeds.create() instead.
        "::create::DwDomain::feeds": {
          url: urlBase + "/dwDomains/:id/feeds",
          method: "POST"
        },

        // INTERNAL. Use DwDomain.feeds.createMany() instead.
        "::createMany::DwDomain::feeds": {
          isArray: true,
          url: urlBase + "/dwDomains/:id/feeds",
          method: "POST"
        },

        // INTERNAL. Use DwDomain.feeds.destroyAll() instead.
        "::delete::DwDomain::feeds": {
          url: urlBase + "/dwDomains/:id/feeds",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.feeds.count() instead.
        "::count::DwDomain::feeds": {
          url: urlBase + "/dwDomains/:id/feeds/count",
          method: "GET"
        },

        // INTERNAL. Use DwTeam.feeds.findById() instead.
        "::findById::DwTeam::feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/feeds/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwTeam.feeds.destroyById() instead.
        "::destroyById::DwTeam::feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/feeds/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTeam.feeds.updateById() instead.
        "::updateById::DwTeam::feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/feeds/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTeam.feeds.link() instead.
        "::link::DwTeam::feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/feeds/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTeam.feeds.unlink() instead.
        "::unlink::DwTeam::feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/feeds/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTeam.feeds.exists() instead.
        "::exists::DwTeam::feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/feeds/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use DwTeam.feeds() instead.
        "::get::DwTeam::feeds": {
          isArray: true,
          url: urlBase + "/dwTeams/:id/feeds",
          method: "GET"
        },

        // INTERNAL. Use DwTeam.feeds.create() instead.
        "::create::DwTeam::feeds": {
          url: urlBase + "/dwTeams/:id/feeds",
          method: "POST"
        },

        // INTERNAL. Use DwTeam.feeds.createMany() instead.
        "::createMany::DwTeam::feeds": {
          isArray: true,
          url: urlBase + "/dwTeams/:id/feeds",
          method: "POST"
        },

        // INTERNAL. Use DwTeam.feeds.destroyAll() instead.
        "::delete::DwTeam::feeds": {
          url: urlBase + "/dwTeams/:id/feeds",
          method: "DELETE"
        },

        // INTERNAL. Use DwTeam.feeds.count() instead.
        "::count::DwTeam::feeds": {
          url: urlBase + "/dwTeams/:id/feeds/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.DwFeed#updateOrCreate
         * @methodOf lbServices.DwFeed
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.DwFeed#update
         * @methodOf lbServices.DwFeed
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.DwFeed#destroyById
         * @methodOf lbServices.DwFeed
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.DwFeed#removeById
         * @methodOf lbServices.DwFeed
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.DwFeed#modelName
    * @propertyOf lbServices.DwFeed
    * @description
    * The name of the model represented by this $resource,
    * i.e. `DwFeed`.
    */
    R.modelName = "DwFeed";

    /**
     * @ngdoc object
     * @name lbServices.DwFeed.trails
     * @header lbServices.DwFeed.trails
     * @object
     * @description
     *
     * The object `DwFeed.trails` groups methods
     * manipulating `DwTrail` instances related to `DwFeed`.
     *
     * Call {@link lbServices.DwFeed#trails DwFeed.trails()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.DwFeed#trails
         * @methodOf lbServices.DwFeed
         *
         * @description
         *
         * Queries trails of DwFeed.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trails = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::get::DwFeed::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.trails#count
         * @methodOf lbServices.DwFeed.trails
         *
         * @description
         *
         * Counts trails of DwFeed.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.trails.count = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::count::DwFeed::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.trails#create
         * @methodOf lbServices.DwFeed.trails
         *
         * @description
         *
         * Creates a new instance in trails of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trails.create = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::create::DwFeed::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.trails#createMany
         * @methodOf lbServices.DwFeed.trails
         *
         * @description
         *
         * Creates a new instance in trails of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trails.createMany = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::createMany::DwFeed::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.trails#destroyAll
         * @methodOf lbServices.DwFeed.trails
         *
         * @description
         *
         * Deletes all trails of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.trails.destroyAll = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::delete::DwFeed::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.trails#destroyById
         * @methodOf lbServices.DwFeed.trails
         *
         * @description
         *
         * Delete a related item by id for trails.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for trails
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.trails.destroyById = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::destroyById::DwFeed::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.trails#exists
         * @methodOf lbServices.DwFeed.trails
         *
         * @description
         *
         * Check the existence of trails relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for trails
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trails.exists = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::exists::DwFeed::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.trails#findById
         * @methodOf lbServices.DwFeed.trails
         *
         * @description
         *
         * Find a related item by id for trails.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for trails
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trails.findById = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::findById::DwFeed::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.trails#link
         * @methodOf lbServices.DwFeed.trails
         *
         * @description
         *
         * Add a related item by id for trails.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for trails
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trails.link = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::link::DwFeed::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.trails#unlink
         * @methodOf lbServices.DwFeed.trails
         *
         * @description
         *
         * Remove the trails relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for trails
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.trails.unlink = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::unlink::DwFeed::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.trails#updateById
         * @methodOf lbServices.DwFeed.trails
         *
         * @description
         *
         * Update a related item by id for trails.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for trails
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trails.updateById = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::updateById::DwFeed::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed#serviceType
         * @methodOf lbServices.DwFeed
         *
         * @description
         *
         * Fetches belongsTo relation serviceType.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwServiceType` object.)
         * </em>
         */
        R.serviceType = function() {
          var TargetResource = $injector.get("DwServiceType");
          var action = TargetResource["::get::DwFeed::serviceType"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.DwFeed.transmissions
     * @header lbServices.DwFeed.transmissions
     * @object
     * @description
     *
     * The object `DwFeed.transmissions` groups methods
     * manipulating `DwTransmission` instances related to `DwFeed`.
     *
     * Call {@link lbServices.DwFeed#transmissions DwFeed.transmissions()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.DwFeed#transmissions
         * @methodOf lbServices.DwFeed
         *
         * @description
         *
         * Queries transmissions of DwFeed.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTransmission` object.)
         * </em>
         */
        R.transmissions = function() {
          var TargetResource = $injector.get("DwTransmission");
          var action = TargetResource["::get::DwFeed::transmissions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.transmissions#count
         * @methodOf lbServices.DwFeed.transmissions
         *
         * @description
         *
         * Counts transmissions of DwFeed.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.transmissions.count = function() {
          var TargetResource = $injector.get("DwTransmission");
          var action = TargetResource["::count::DwFeed::transmissions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.transmissions#create
         * @methodOf lbServices.DwFeed.transmissions
         *
         * @description
         *
         * Creates a new instance in transmissions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTransmission` object.)
         * </em>
         */
        R.transmissions.create = function() {
          var TargetResource = $injector.get("DwTransmission");
          var action = TargetResource["::create::DwFeed::transmissions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.transmissions#createMany
         * @methodOf lbServices.DwFeed.transmissions
         *
         * @description
         *
         * Creates a new instance in transmissions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTransmission` object.)
         * </em>
         */
        R.transmissions.createMany = function() {
          var TargetResource = $injector.get("DwTransmission");
          var action = TargetResource["::createMany::DwFeed::transmissions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.transmissions#destroyAll
         * @methodOf lbServices.DwFeed.transmissions
         *
         * @description
         *
         * Deletes all transmissions of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.transmissions.destroyAll = function() {
          var TargetResource = $injector.get("DwTransmission");
          var action = TargetResource["::delete::DwFeed::transmissions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.transmissions#destroyById
         * @methodOf lbServices.DwFeed.transmissions
         *
         * @description
         *
         * Delete a related item by id for transmissions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for transmissions
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.transmissions.destroyById = function() {
          var TargetResource = $injector.get("DwTransmission");
          var action = TargetResource["::destroyById::DwFeed::transmissions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.transmissions#findById
         * @methodOf lbServices.DwFeed.transmissions
         *
         * @description
         *
         * Find a related item by id for transmissions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for transmissions
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTransmission` object.)
         * </em>
         */
        R.transmissions.findById = function() {
          var TargetResource = $injector.get("DwTransmission");
          var action = TargetResource["::findById::DwFeed::transmissions"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.transmissions#updateById
         * @methodOf lbServices.DwFeed.transmissions
         *
         * @description
         *
         * Update a related item by id for transmissions.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for transmissions
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTransmission` object.)
         * </em>
         */
        R.transmissions.updateById = function() {
          var TargetResource = $injector.get("DwTransmission");
          var action = TargetResource["::updateById::DwFeed::transmissions"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.DwFeed.domains
     * @header lbServices.DwFeed.domains
     * @object
     * @description
     *
     * The object `DwFeed.domains` groups methods
     * manipulating `DwDomain` instances related to `DwFeed`.
     *
     * Call {@link lbServices.DwFeed#domains DwFeed.domains()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.DwFeed#domains
         * @methodOf lbServices.DwFeed
         *
         * @description
         *
         * Queries domains of DwFeed.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R.domains = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::get::DwFeed::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.domains#count
         * @methodOf lbServices.DwFeed.domains
         *
         * @description
         *
         * Counts domains of DwFeed.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.domains.count = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::count::DwFeed::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.domains#create
         * @methodOf lbServices.DwFeed.domains
         *
         * @description
         *
         * Creates a new instance in domains of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R.domains.create = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::create::DwFeed::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.domains#createMany
         * @methodOf lbServices.DwFeed.domains
         *
         * @description
         *
         * Creates a new instance in domains of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R.domains.createMany = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::createMany::DwFeed::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.domains#destroyAll
         * @methodOf lbServices.DwFeed.domains
         *
         * @description
         *
         * Deletes all domains of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.domains.destroyAll = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::delete::DwFeed::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.domains#destroyById
         * @methodOf lbServices.DwFeed.domains
         *
         * @description
         *
         * Delete a related item by id for domains.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for domains
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.domains.destroyById = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::destroyById::DwFeed::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.domains#exists
         * @methodOf lbServices.DwFeed.domains
         *
         * @description
         *
         * Check the existence of domains relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for domains
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R.domains.exists = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::exists::DwFeed::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.domains#findById
         * @methodOf lbServices.DwFeed.domains
         *
         * @description
         *
         * Find a related item by id for domains.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for domains
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R.domains.findById = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::findById::DwFeed::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.domains#link
         * @methodOf lbServices.DwFeed.domains
         *
         * @description
         *
         * Add a related item by id for domains.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for domains
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R.domains.link = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::link::DwFeed::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.domains#unlink
         * @methodOf lbServices.DwFeed.domains
         *
         * @description
         *
         * Remove the domains relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for domains
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.domains.unlink = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::unlink::DwFeed::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.domains#updateById
         * @methodOf lbServices.DwFeed.domains
         *
         * @description
         *
         * Update a related item by id for domains.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for domains
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R.domains.updateById = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::updateById::DwFeed::domains"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.DwFeed.teams
     * @header lbServices.DwFeed.teams
     * @object
     * @description
     *
     * The object `DwFeed.teams` groups methods
     * manipulating `DwTeam` instances related to `DwFeed`.
     *
     * Call {@link lbServices.DwFeed#teams DwFeed.teams()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.DwFeed#teams
         * @methodOf lbServices.DwFeed
         *
         * @description
         *
         * Queries teams of DwFeed.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        R.teams = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::get::DwFeed::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.teams#count
         * @methodOf lbServices.DwFeed.teams
         *
         * @description
         *
         * Counts teams of DwFeed.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.teams.count = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::count::DwFeed::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.teams#create
         * @methodOf lbServices.DwFeed.teams
         *
         * @description
         *
         * Creates a new instance in teams of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        R.teams.create = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::create::DwFeed::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.teams#createMany
         * @methodOf lbServices.DwFeed.teams
         *
         * @description
         *
         * Creates a new instance in teams of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        R.teams.createMany = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::createMany::DwFeed::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.teams#destroyAll
         * @methodOf lbServices.DwFeed.teams
         *
         * @description
         *
         * Deletes all teams of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.teams.destroyAll = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::delete::DwFeed::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.teams#destroyById
         * @methodOf lbServices.DwFeed.teams
         *
         * @description
         *
         * Delete a related item by id for teams.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for teams
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.teams.destroyById = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::destroyById::DwFeed::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.teams#exists
         * @methodOf lbServices.DwFeed.teams
         *
         * @description
         *
         * Check the existence of teams relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for teams
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        R.teams.exists = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::exists::DwFeed::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.teams#findById
         * @methodOf lbServices.DwFeed.teams
         *
         * @description
         *
         * Find a related item by id for teams.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for teams
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        R.teams.findById = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::findById::DwFeed::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.teams#link
         * @methodOf lbServices.DwFeed.teams
         *
         * @description
         *
         * Add a related item by id for teams.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for teams
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        R.teams.link = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::link::DwFeed::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.teams#unlink
         * @methodOf lbServices.DwFeed.teams
         *
         * @description
         *
         * Remove the teams relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for teams
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.teams.unlink = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::unlink::DwFeed::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwFeed.teams#updateById
         * @methodOf lbServices.DwFeed.teams
         *
         * @description
         *
         * Update a related item by id for teams.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for teams
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        R.teams.updateById = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::updateById::DwFeed::teams"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.DwDomainItem
 * @header lbServices.DwDomainItem
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DwDomainItem` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "DwDomainItem",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/dwDomainItems/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use DwDomainItem.user() instead.
        "prototype$__get__user": {
          url: urlBase + "/dwDomainItems/:id/user",
          method: "GET"
        },

        // INTERNAL. Use DwDomainItem.domain() instead.
        "prototype$__get__domain": {
          url: urlBase + "/dwDomainItems/:id/domain",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomainItem#create
         * @methodOf lbServices.DwDomainItem
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainItem` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/dwDomainItems",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomainItem#createMany
         * @methodOf lbServices.DwDomainItem
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainItem` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/dwDomainItems",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomainItem#upsert
         * @methodOf lbServices.DwDomainItem
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainItem` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/dwDomainItems",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomainItem#exists
         * @methodOf lbServices.DwDomainItem
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/dwDomainItems/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomainItem#findById
         * @methodOf lbServices.DwDomainItem
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainItem` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/dwDomainItems/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomainItem#find
         * @methodOf lbServices.DwDomainItem
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainItem` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/dwDomainItems",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomainItem#findOne
         * @methodOf lbServices.DwDomainItem
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainItem` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/dwDomainItems/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomainItem#updateAll
         * @methodOf lbServices.DwDomainItem
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/dwDomainItems/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomainItem#deleteById
         * @methodOf lbServices.DwDomainItem
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/dwDomainItems/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomainItem#count
         * @methodOf lbServices.DwDomainItem
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/dwDomainItems/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomainItem#prototype$updateAttributes
         * @methodOf lbServices.DwDomainItem
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainItem` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/dwDomainItems/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomainItem#createChangeStream
         * @methodOf lbServices.DwDomainItem
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/dwDomainItems/change-stream",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.domainItems.findById() instead.
        "::findById::AminoUser::domainItems": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/domainItems/:fk",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.domainItems.destroyById() instead.
        "::destroyById::AminoUser::domainItems": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/domainItems/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.domainItems.updateById() instead.
        "::updateById::AminoUser::domainItems": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/domainItems/:fk",
          method: "PUT"
        },

        // INTERNAL. Use AminoUser.domainItems() instead.
        "::get::AminoUser::domainItems": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/domainItems",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.domainItems.create() instead.
        "::create::AminoUser::domainItems": {
          url: urlBase + "/AminoUsers/:id/domainItems",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.domainItems.createMany() instead.
        "::createMany::AminoUser::domainItems": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/domainItems",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.domainItems.destroyAll() instead.
        "::delete::AminoUser::domainItems": {
          url: urlBase + "/AminoUsers/:id/domainItems",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.domainItems.count() instead.
        "::count::AminoUser::domainItems": {
          url: urlBase + "/AminoUsers/:id/domainItems/count",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.domainItems.findById() instead.
        "::findById::DwDomain::domainItems": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/domainItems/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.domainItems.destroyById() instead.
        "::destroyById::DwDomain::domainItems": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/domainItems/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.domainItems.updateById() instead.
        "::updateById::DwDomain::domainItems": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/domainItems/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwDomain.domainItems() instead.
        "::get::DwDomain::domainItems": {
          isArray: true,
          url: urlBase + "/dwDomains/:id/domainItems",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.domainItems.create() instead.
        "::create::DwDomain::domainItems": {
          url: urlBase + "/dwDomains/:id/domainItems",
          method: "POST"
        },

        // INTERNAL. Use DwDomain.domainItems.createMany() instead.
        "::createMany::DwDomain::domainItems": {
          isArray: true,
          url: urlBase + "/dwDomains/:id/domainItems",
          method: "POST"
        },

        // INTERNAL. Use DwDomain.domainItems.destroyAll() instead.
        "::delete::DwDomain::domainItems": {
          url: urlBase + "/dwDomains/:id/domainItems",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.domainItems.count() instead.
        "::count::DwDomain::domainItems": {
          url: urlBase + "/dwDomains/:id/domainItems/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.DwDomainItem#updateOrCreate
         * @methodOf lbServices.DwDomainItem
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainItem` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.DwDomainItem#update
         * @methodOf lbServices.DwDomainItem
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.DwDomainItem#destroyById
         * @methodOf lbServices.DwDomainItem
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.DwDomainItem#removeById
         * @methodOf lbServices.DwDomainItem
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.DwDomainItem#modelName
    * @propertyOf lbServices.DwDomainItem
    * @description
    * The name of the model represented by this $resource,
    * i.e. `DwDomainItem`.
    */
    R.modelName = "DwDomainItem";


        /**
         * @ngdoc method
         * @name lbServices.DwDomainItem#user
         * @methodOf lbServices.DwDomainItem
         *
         * @description
         *
         * Fetches belongsTo relation user.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.user = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::get::DwDomainItem::user"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomainItem#domain
         * @methodOf lbServices.DwDomainItem
         *
         * @description
         *
         * Fetches belongsTo relation domain.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R.domain = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::get::DwDomainItem::domain"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.DwCrawlType
 * @header lbServices.DwCrawlType
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DwCrawlType` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "DwCrawlType",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/dwCrawlTypes/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use DwCrawlType.trailUrl.findById() instead.
        "prototype$__findById__trailUrl": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwCrawlTypes/:id/trailUrl/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwCrawlType.trailUrl.destroyById() instead.
        "prototype$__destroyById__trailUrl": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwCrawlTypes/:id/trailUrl/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwCrawlType.trailUrl.updateById() instead.
        "prototype$__updateById__trailUrl": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwCrawlTypes/:id/trailUrl/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwCrawlType.trailUrl() instead.
        "prototype$__get__trailUrl": {
          isArray: true,
          url: urlBase + "/dwCrawlTypes/:id/trailUrl",
          method: "GET"
        },

        // INTERNAL. Use DwCrawlType.trailUrl.create() instead.
        "prototype$__create__trailUrl": {
          url: urlBase + "/dwCrawlTypes/:id/trailUrl",
          method: "POST"
        },

        // INTERNAL. Use DwCrawlType.trailUrl.destroyAll() instead.
        "prototype$__delete__trailUrl": {
          url: urlBase + "/dwCrawlTypes/:id/trailUrl",
          method: "DELETE"
        },

        // INTERNAL. Use DwCrawlType.trailUrl.count() instead.
        "prototype$__count__trailUrl": {
          url: urlBase + "/dwCrawlTypes/:id/trailUrl/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwCrawlType#create
         * @methodOf lbServices.DwCrawlType
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwCrawlType` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/dwCrawlTypes",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwCrawlType#createMany
         * @methodOf lbServices.DwCrawlType
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwCrawlType` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/dwCrawlTypes",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwCrawlType#upsert
         * @methodOf lbServices.DwCrawlType
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwCrawlType` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/dwCrawlTypes",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwCrawlType#exists
         * @methodOf lbServices.DwCrawlType
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/dwCrawlTypes/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwCrawlType#findById
         * @methodOf lbServices.DwCrawlType
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwCrawlType` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/dwCrawlTypes/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwCrawlType#find
         * @methodOf lbServices.DwCrawlType
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwCrawlType` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/dwCrawlTypes",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwCrawlType#findOne
         * @methodOf lbServices.DwCrawlType
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwCrawlType` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/dwCrawlTypes/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwCrawlType#updateAll
         * @methodOf lbServices.DwCrawlType
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/dwCrawlTypes/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwCrawlType#deleteById
         * @methodOf lbServices.DwCrawlType
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/dwCrawlTypes/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwCrawlType#count
         * @methodOf lbServices.DwCrawlType
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/dwCrawlTypes/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwCrawlType#prototype$updateAttributes
         * @methodOf lbServices.DwCrawlType
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwCrawlType` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/dwCrawlTypes/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwCrawlType#createChangeStream
         * @methodOf lbServices.DwCrawlType
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/dwCrawlTypes/change-stream",
          method: "POST"
        },

        // INTERNAL. Use DwTrailUrl.crawlType() instead.
        "::get::DwTrailUrl::crawlType": {
          url: urlBase + "/dwTrailUrls/:id/crawlType",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.DwCrawlType#updateOrCreate
         * @methodOf lbServices.DwCrawlType
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwCrawlType` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.DwCrawlType#update
         * @methodOf lbServices.DwCrawlType
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.DwCrawlType#destroyById
         * @methodOf lbServices.DwCrawlType
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.DwCrawlType#removeById
         * @methodOf lbServices.DwCrawlType
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.DwCrawlType#modelName
    * @propertyOf lbServices.DwCrawlType
    * @description
    * The name of the model represented by this $resource,
    * i.e. `DwCrawlType`.
    */
    R.modelName = "DwCrawlType";

    /**
     * @ngdoc object
     * @name lbServices.DwCrawlType.trailUrl
     * @header lbServices.DwCrawlType.trailUrl
     * @object
     * @description
     *
     * The object `DwCrawlType.trailUrl` groups methods
     * manipulating `DwTrailUrl` instances related to `DwCrawlType`.
     *
     * Call {@link lbServices.DwCrawlType#trailUrl DwCrawlType.trailUrl()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.DwCrawlType#trailUrl
         * @methodOf lbServices.DwCrawlType
         *
         * @description
         *
         * Queries trailUrl of DwCrawlType.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrl` object.)
         * </em>
         */
        R.trailUrl = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::get::DwCrawlType::trailUrl"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwCrawlType.trailUrl#count
         * @methodOf lbServices.DwCrawlType.trailUrl
         *
         * @description
         *
         * Counts trailUrl of DwCrawlType.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.trailUrl.count = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::count::DwCrawlType::trailUrl"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwCrawlType.trailUrl#create
         * @methodOf lbServices.DwCrawlType.trailUrl
         *
         * @description
         *
         * Creates a new instance in trailUrl of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrl` object.)
         * </em>
         */
        R.trailUrl.create = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::create::DwCrawlType::trailUrl"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwCrawlType.trailUrl#createMany
         * @methodOf lbServices.DwCrawlType.trailUrl
         *
         * @description
         *
         * Creates a new instance in trailUrl of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrl` object.)
         * </em>
         */
        R.trailUrl.createMany = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::createMany::DwCrawlType::trailUrl"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwCrawlType.trailUrl#destroyAll
         * @methodOf lbServices.DwCrawlType.trailUrl
         *
         * @description
         *
         * Deletes all trailUrl of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.trailUrl.destroyAll = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::delete::DwCrawlType::trailUrl"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwCrawlType.trailUrl#destroyById
         * @methodOf lbServices.DwCrawlType.trailUrl
         *
         * @description
         *
         * Delete a related item by id for trailUrl.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for trailUrl
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.trailUrl.destroyById = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::destroyById::DwCrawlType::trailUrl"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwCrawlType.trailUrl#findById
         * @methodOf lbServices.DwCrawlType.trailUrl
         *
         * @description
         *
         * Find a related item by id for trailUrl.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for trailUrl
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrl` object.)
         * </em>
         */
        R.trailUrl.findById = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::findById::DwCrawlType::trailUrl"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwCrawlType.trailUrl#updateById
         * @methodOf lbServices.DwCrawlType.trailUrl
         *
         * @description
         *
         * Update a related item by id for trailUrl.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for trailUrl
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrl` object.)
         * </em>
         */
        R.trailUrl.updateById = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::updateById::DwCrawlType::trailUrl"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.DwDomain
 * @header lbServices.DwDomain
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DwDomain` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "DwDomain",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/dwDomains/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use DwDomain.domainItems.findById() instead.
        "prototype$__findById__domainItems": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/domainItems/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.domainItems.destroyById() instead.
        "prototype$__destroyById__domainItems": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/domainItems/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.domainItems.updateById() instead.
        "prototype$__updateById__domainItems": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/domainItems/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwDomain.feeds.findById() instead.
        "prototype$__findById__feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/feeds/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.feeds.destroyById() instead.
        "prototype$__destroyById__feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/feeds/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.feeds.updateById() instead.
        "prototype$__updateById__feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/feeds/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwDomain.feeds.link() instead.
        "prototype$__link__feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/feeds/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwDomain.feeds.unlink() instead.
        "prototype$__unlink__feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/feeds/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.feeds.exists() instead.
        "prototype$__exists__feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/feeds/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use DwDomain.trails.findById() instead.
        "prototype$__findById__trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/trails/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.trails.destroyById() instead.
        "prototype$__destroyById__trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/trails/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.trails.updateById() instead.
        "prototype$__updateById__trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/trails/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwDomain.domainEntityTypes.findById() instead.
        "prototype$__findById__domainEntityTypes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/domainEntityTypes/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.domainEntityTypes.destroyById() instead.
        "prototype$__destroyById__domainEntityTypes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/domainEntityTypes/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.domainEntityTypes.updateById() instead.
        "prototype$__updateById__domainEntityTypes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/domainEntityTypes/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwDomain.teams.findById() instead.
        "prototype$__findById__teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/teams/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.teams.destroyById() instead.
        "prototype$__destroyById__teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/teams/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.teams.updateById() instead.
        "prototype$__updateById__teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/teams/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwDomain.teams.link() instead.
        "prototype$__link__teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/teams/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwDomain.teams.unlink() instead.
        "prototype$__unlink__teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/teams/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.teams.exists() instead.
        "prototype$__exists__teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/teams/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use DwDomain.extractors.findById() instead.
        "prototype$__findById__extractors": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/extractors/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.extractors.destroyById() instead.
        "prototype$__destroyById__extractors": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/extractors/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.extractors.updateById() instead.
        "prototype$__updateById__extractors": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/extractors/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwDomain.extractors.link() instead.
        "prototype$__link__extractors": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/extractors/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwDomain.extractors.unlink() instead.
        "prototype$__unlink__extractors": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/extractors/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.extractors.exists() instead.
        "prototype$__exists__extractors": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/extractors/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use DwDomain.domainItems() instead.
        "prototype$__get__domainItems": {
          isArray: true,
          url: urlBase + "/dwDomains/:id/domainItems",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.domainItems.create() instead.
        "prototype$__create__domainItems": {
          url: urlBase + "/dwDomains/:id/domainItems",
          method: "POST"
        },

        // INTERNAL. Use DwDomain.domainItems.destroyAll() instead.
        "prototype$__delete__domainItems": {
          url: urlBase + "/dwDomains/:id/domainItems",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.domainItems.count() instead.
        "prototype$__count__domainItems": {
          url: urlBase + "/dwDomains/:id/domainItems/count",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.feeds() instead.
        "prototype$__get__feeds": {
          isArray: true,
          url: urlBase + "/dwDomains/:id/feeds",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.feeds.create() instead.
        "prototype$__create__feeds": {
          url: urlBase + "/dwDomains/:id/feeds",
          method: "POST"
        },

        // INTERNAL. Use DwDomain.feeds.destroyAll() instead.
        "prototype$__delete__feeds": {
          url: urlBase + "/dwDomains/:id/feeds",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.feeds.count() instead.
        "prototype$__count__feeds": {
          url: urlBase + "/dwDomains/:id/feeds/count",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.trails() instead.
        "prototype$__get__trails": {
          isArray: true,
          url: urlBase + "/dwDomains/:id/trails",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.trails.create() instead.
        "prototype$__create__trails": {
          url: urlBase + "/dwDomains/:id/trails",
          method: "POST"
        },

        // INTERNAL. Use DwDomain.trails.destroyAll() instead.
        "prototype$__delete__trails": {
          url: urlBase + "/dwDomains/:id/trails",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.trails.count() instead.
        "prototype$__count__trails": {
          url: urlBase + "/dwDomains/:id/trails/count",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.domainEntityTypes() instead.
        "prototype$__get__domainEntityTypes": {
          isArray: true,
          url: urlBase + "/dwDomains/:id/domainEntityTypes",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.domainEntityTypes.create() instead.
        "prototype$__create__domainEntityTypes": {
          url: urlBase + "/dwDomains/:id/domainEntityTypes",
          method: "POST"
        },

        // INTERNAL. Use DwDomain.domainEntityTypes.destroyAll() instead.
        "prototype$__delete__domainEntityTypes": {
          url: urlBase + "/dwDomains/:id/domainEntityTypes",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.domainEntityTypes.count() instead.
        "prototype$__count__domainEntityTypes": {
          url: urlBase + "/dwDomains/:id/domainEntityTypes/count",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.teams() instead.
        "prototype$__get__teams": {
          isArray: true,
          url: urlBase + "/dwDomains/:id/teams",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.teams.create() instead.
        "prototype$__create__teams": {
          url: urlBase + "/dwDomains/:id/teams",
          method: "POST"
        },

        // INTERNAL. Use DwDomain.teams.destroyAll() instead.
        "prototype$__delete__teams": {
          url: urlBase + "/dwDomains/:id/teams",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.teams.count() instead.
        "prototype$__count__teams": {
          url: urlBase + "/dwDomains/:id/teams/count",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.extractors() instead.
        "prototype$__get__extractors": {
          isArray: true,
          url: urlBase + "/dwDomains/:id/extractors",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.extractors.create() instead.
        "prototype$__create__extractors": {
          url: urlBase + "/dwDomains/:id/extractors",
          method: "POST"
        },

        // INTERNAL. Use DwDomain.extractors.destroyAll() instead.
        "prototype$__delete__extractors": {
          url: urlBase + "/dwDomains/:id/extractors",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.extractors.count() instead.
        "prototype$__count__extractors": {
          url: urlBase + "/dwDomains/:id/extractors/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomain#create
         * @methodOf lbServices.DwDomain
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/dwDomains",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomain#createMany
         * @methodOf lbServices.DwDomain
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/dwDomains",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomain#upsert
         * @methodOf lbServices.DwDomain
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/dwDomains",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomain#exists
         * @methodOf lbServices.DwDomain
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/dwDomains/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomain#findById
         * @methodOf lbServices.DwDomain
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/dwDomains/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomain#find
         * @methodOf lbServices.DwDomain
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/dwDomains",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomain#findOne
         * @methodOf lbServices.DwDomain
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/dwDomains/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomain#updateAll
         * @methodOf lbServices.DwDomain
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/dwDomains/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomain#deleteById
         * @methodOf lbServices.DwDomain
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/dwDomains/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomain#count
         * @methodOf lbServices.DwDomain
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/dwDomains/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomain#prototype$updateAttributes
         * @methodOf lbServices.DwDomain
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/dwDomains/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomain#createChangeStream
         * @methodOf lbServices.DwDomain
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/dwDomains/change-stream",
          method: "POST"
        },

        // INTERNAL. Use DwTrail.domain() instead.
        "::get::DwTrail::domain": {
          url: urlBase + "/dwTrails/:id/domain",
          method: "GET"
        },

        // INTERNAL. Use DwFeed.domains.findById() instead.
        "::findById::DwFeed::domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/domains/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwFeed.domains.destroyById() instead.
        "::destroyById::DwFeed::domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/domains/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwFeed.domains.updateById() instead.
        "::updateById::DwFeed::domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/domains/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwFeed.domains.link() instead.
        "::link::DwFeed::domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/domains/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwFeed.domains.unlink() instead.
        "::unlink::DwFeed::domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/domains/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwFeed.domains.exists() instead.
        "::exists::DwFeed::domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/domains/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use DwFeed.domains() instead.
        "::get::DwFeed::domains": {
          isArray: true,
          url: urlBase + "/dwFeeds/:id/domains",
          method: "GET"
        },

        // INTERNAL. Use DwFeed.domains.create() instead.
        "::create::DwFeed::domains": {
          url: urlBase + "/dwFeeds/:id/domains",
          method: "POST"
        },

        // INTERNAL. Use DwFeed.domains.createMany() instead.
        "::createMany::DwFeed::domains": {
          isArray: true,
          url: urlBase + "/dwFeeds/:id/domains",
          method: "POST"
        },

        // INTERNAL. Use DwFeed.domains.destroyAll() instead.
        "::delete::DwFeed::domains": {
          url: urlBase + "/dwFeeds/:id/domains",
          method: "DELETE"
        },

        // INTERNAL. Use DwFeed.domains.count() instead.
        "::count::DwFeed::domains": {
          url: urlBase + "/dwFeeds/:id/domains/count",
          method: "GET"
        },

        // INTERNAL. Use DwDomainItem.domain() instead.
        "::get::DwDomainItem::domain": {
          url: urlBase + "/dwDomainItems/:id/domain",
          method: "GET"
        },

        // INTERNAL. Use DwDomainEntityType.domain() instead.
        "::get::DwDomainEntityType::domain": {
          url: urlBase + "/DwDomainEntityTypes/:id/domain",
          method: "GET"
        },

        // INTERNAL. Use DwTeam.domains.findById() instead.
        "::findById::DwTeam::domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/domains/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwTeam.domains.destroyById() instead.
        "::destroyById::DwTeam::domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/domains/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTeam.domains.updateById() instead.
        "::updateById::DwTeam::domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/domains/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTeam.domains.link() instead.
        "::link::DwTeam::domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/domains/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTeam.domains.unlink() instead.
        "::unlink::DwTeam::domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/domains/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTeam.domains.exists() instead.
        "::exists::DwTeam::domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/domains/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use DwTeam.domains() instead.
        "::get::DwTeam::domains": {
          isArray: true,
          url: urlBase + "/dwTeams/:id/domains",
          method: "GET"
        },

        // INTERNAL. Use DwTeam.domains.create() instead.
        "::create::DwTeam::domains": {
          url: urlBase + "/dwTeams/:id/domains",
          method: "POST"
        },

        // INTERNAL. Use DwTeam.domains.createMany() instead.
        "::createMany::DwTeam::domains": {
          isArray: true,
          url: urlBase + "/dwTeams/:id/domains",
          method: "POST"
        },

        // INTERNAL. Use DwTeam.domains.destroyAll() instead.
        "::delete::DwTeam::domains": {
          url: urlBase + "/dwTeams/:id/domains",
          method: "DELETE"
        },

        // INTERNAL. Use DwTeam.domains.count() instead.
        "::count::DwTeam::domains": {
          url: urlBase + "/dwTeams/:id/domains/count",
          method: "GET"
        },

        // INTERNAL. Use DwExtractor.domains.findById() instead.
        "::findById::DwExtractor::domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwExtractors/:id/domains/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwExtractor.domains.destroyById() instead.
        "::destroyById::DwExtractor::domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwExtractors/:id/domains/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwExtractor.domains.updateById() instead.
        "::updateById::DwExtractor::domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwExtractors/:id/domains/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwExtractor.domains.link() instead.
        "::link::DwExtractor::domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwExtractors/:id/domains/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwExtractor.domains.unlink() instead.
        "::unlink::DwExtractor::domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwExtractors/:id/domains/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwExtractor.domains.exists() instead.
        "::exists::DwExtractor::domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwExtractors/:id/domains/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use DwExtractor.domains() instead.
        "::get::DwExtractor::domains": {
          isArray: true,
          url: urlBase + "/dwExtractors/:id/domains",
          method: "GET"
        },

        // INTERNAL. Use DwExtractor.domains.create() instead.
        "::create::DwExtractor::domains": {
          url: urlBase + "/dwExtractors/:id/domains",
          method: "POST"
        },

        // INTERNAL. Use DwExtractor.domains.createMany() instead.
        "::createMany::DwExtractor::domains": {
          isArray: true,
          url: urlBase + "/dwExtractors/:id/domains",
          method: "POST"
        },

        // INTERNAL. Use DwExtractor.domains.destroyAll() instead.
        "::delete::DwExtractor::domains": {
          url: urlBase + "/dwExtractors/:id/domains",
          method: "DELETE"
        },

        // INTERNAL. Use DwExtractor.domains.count() instead.
        "::count::DwExtractor::domains": {
          url: urlBase + "/dwExtractors/:id/domains/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.DwDomain#updateOrCreate
         * @methodOf lbServices.DwDomain
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.DwDomain#update
         * @methodOf lbServices.DwDomain
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.DwDomain#destroyById
         * @methodOf lbServices.DwDomain
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.DwDomain#removeById
         * @methodOf lbServices.DwDomain
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.DwDomain#modelName
    * @propertyOf lbServices.DwDomain
    * @description
    * The name of the model represented by this $resource,
    * i.e. `DwDomain`.
    */
    R.modelName = "DwDomain";

    /**
     * @ngdoc object
     * @name lbServices.DwDomain.domainItems
     * @header lbServices.DwDomain.domainItems
     * @object
     * @description
     *
     * The object `DwDomain.domainItems` groups methods
     * manipulating `DwDomainItem` instances related to `DwDomain`.
     *
     * Call {@link lbServices.DwDomain#domainItems DwDomain.domainItems()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.DwDomain#domainItems
         * @methodOf lbServices.DwDomain
         *
         * @description
         *
         * Queries domainItems of DwDomain.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainItem` object.)
         * </em>
         */
        R.domainItems = function() {
          var TargetResource = $injector.get("DwDomainItem");
          var action = TargetResource["::get::DwDomain::domainItems"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.domainItems#count
         * @methodOf lbServices.DwDomain.domainItems
         *
         * @description
         *
         * Counts domainItems of DwDomain.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.domainItems.count = function() {
          var TargetResource = $injector.get("DwDomainItem");
          var action = TargetResource["::count::DwDomain::domainItems"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.domainItems#create
         * @methodOf lbServices.DwDomain.domainItems
         *
         * @description
         *
         * Creates a new instance in domainItems of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainItem` object.)
         * </em>
         */
        R.domainItems.create = function() {
          var TargetResource = $injector.get("DwDomainItem");
          var action = TargetResource["::create::DwDomain::domainItems"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.domainItems#createMany
         * @methodOf lbServices.DwDomain.domainItems
         *
         * @description
         *
         * Creates a new instance in domainItems of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainItem` object.)
         * </em>
         */
        R.domainItems.createMany = function() {
          var TargetResource = $injector.get("DwDomainItem");
          var action = TargetResource["::createMany::DwDomain::domainItems"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.domainItems#destroyAll
         * @methodOf lbServices.DwDomain.domainItems
         *
         * @description
         *
         * Deletes all domainItems of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.domainItems.destroyAll = function() {
          var TargetResource = $injector.get("DwDomainItem");
          var action = TargetResource["::delete::DwDomain::domainItems"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.domainItems#destroyById
         * @methodOf lbServices.DwDomain.domainItems
         *
         * @description
         *
         * Delete a related item by id for domainItems.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for domainItems
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.domainItems.destroyById = function() {
          var TargetResource = $injector.get("DwDomainItem");
          var action = TargetResource["::destroyById::DwDomain::domainItems"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.domainItems#findById
         * @methodOf lbServices.DwDomain.domainItems
         *
         * @description
         *
         * Find a related item by id for domainItems.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for domainItems
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainItem` object.)
         * </em>
         */
        R.domainItems.findById = function() {
          var TargetResource = $injector.get("DwDomainItem");
          var action = TargetResource["::findById::DwDomain::domainItems"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.domainItems#updateById
         * @methodOf lbServices.DwDomain.domainItems
         *
         * @description
         *
         * Update a related item by id for domainItems.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for domainItems
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainItem` object.)
         * </em>
         */
        R.domainItems.updateById = function() {
          var TargetResource = $injector.get("DwDomainItem");
          var action = TargetResource["::updateById::DwDomain::domainItems"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.DwDomain.feeds
     * @header lbServices.DwDomain.feeds
     * @object
     * @description
     *
     * The object `DwDomain.feeds` groups methods
     * manipulating `DwFeed` instances related to `DwDomain`.
     *
     * Call {@link lbServices.DwDomain#feeds DwDomain.feeds()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.DwDomain#feeds
         * @methodOf lbServices.DwDomain
         *
         * @description
         *
         * Queries feeds of DwDomain.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::get::DwDomain::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.feeds#count
         * @methodOf lbServices.DwDomain.feeds
         *
         * @description
         *
         * Counts feeds of DwDomain.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.feeds.count = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::count::DwDomain::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.feeds#create
         * @methodOf lbServices.DwDomain.feeds
         *
         * @description
         *
         * Creates a new instance in feeds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds.create = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::create::DwDomain::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.feeds#createMany
         * @methodOf lbServices.DwDomain.feeds
         *
         * @description
         *
         * Creates a new instance in feeds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds.createMany = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::createMany::DwDomain::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.feeds#destroyAll
         * @methodOf lbServices.DwDomain.feeds
         *
         * @description
         *
         * Deletes all feeds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.feeds.destroyAll = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::delete::DwDomain::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.feeds#destroyById
         * @methodOf lbServices.DwDomain.feeds
         *
         * @description
         *
         * Delete a related item by id for feeds.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for feeds
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.feeds.destroyById = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::destroyById::DwDomain::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.feeds#exists
         * @methodOf lbServices.DwDomain.feeds
         *
         * @description
         *
         * Check the existence of feeds relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for feeds
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds.exists = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::exists::DwDomain::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.feeds#findById
         * @methodOf lbServices.DwDomain.feeds
         *
         * @description
         *
         * Find a related item by id for feeds.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for feeds
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds.findById = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::findById::DwDomain::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.feeds#link
         * @methodOf lbServices.DwDomain.feeds
         *
         * @description
         *
         * Add a related item by id for feeds.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for feeds
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds.link = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::link::DwDomain::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.feeds#unlink
         * @methodOf lbServices.DwDomain.feeds
         *
         * @description
         *
         * Remove the feeds relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for feeds
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.feeds.unlink = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::unlink::DwDomain::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.feeds#updateById
         * @methodOf lbServices.DwDomain.feeds
         *
         * @description
         *
         * Update a related item by id for feeds.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for feeds
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds.updateById = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::updateById::DwDomain::feeds"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.DwDomain.trails
     * @header lbServices.DwDomain.trails
     * @object
     * @description
     *
     * The object `DwDomain.trails` groups methods
     * manipulating `DwTrail` instances related to `DwDomain`.
     *
     * Call {@link lbServices.DwDomain#trails DwDomain.trails()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.DwDomain#trails
         * @methodOf lbServices.DwDomain
         *
         * @description
         *
         * Queries trails of DwDomain.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trails = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::get::DwDomain::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.trails#count
         * @methodOf lbServices.DwDomain.trails
         *
         * @description
         *
         * Counts trails of DwDomain.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.trails.count = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::count::DwDomain::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.trails#create
         * @methodOf lbServices.DwDomain.trails
         *
         * @description
         *
         * Creates a new instance in trails of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trails.create = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::create::DwDomain::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.trails#createMany
         * @methodOf lbServices.DwDomain.trails
         *
         * @description
         *
         * Creates a new instance in trails of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trails.createMany = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::createMany::DwDomain::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.trails#destroyAll
         * @methodOf lbServices.DwDomain.trails
         *
         * @description
         *
         * Deletes all trails of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.trails.destroyAll = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::delete::DwDomain::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.trails#destroyById
         * @methodOf lbServices.DwDomain.trails
         *
         * @description
         *
         * Delete a related item by id for trails.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for trails
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.trails.destroyById = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::destroyById::DwDomain::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.trails#findById
         * @methodOf lbServices.DwDomain.trails
         *
         * @description
         *
         * Find a related item by id for trails.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for trails
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trails.findById = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::findById::DwDomain::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.trails#updateById
         * @methodOf lbServices.DwDomain.trails
         *
         * @description
         *
         * Update a related item by id for trails.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for trails
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trails.updateById = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::updateById::DwDomain::trails"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.DwDomain.domainEntityTypes
     * @header lbServices.DwDomain.domainEntityTypes
     * @object
     * @description
     *
     * The object `DwDomain.domainEntityTypes` groups methods
     * manipulating `DwDomainEntityType` instances related to `DwDomain`.
     *
     * Call {@link lbServices.DwDomain#domainEntityTypes DwDomain.domainEntityTypes()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.DwDomain#domainEntityTypes
         * @methodOf lbServices.DwDomain
         *
         * @description
         *
         * Queries domainEntityTypes of DwDomain.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainEntityType` object.)
         * </em>
         */
        R.domainEntityTypes = function() {
          var TargetResource = $injector.get("DwDomainEntityType");
          var action = TargetResource["::get::DwDomain::domainEntityTypes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.domainEntityTypes#count
         * @methodOf lbServices.DwDomain.domainEntityTypes
         *
         * @description
         *
         * Counts domainEntityTypes of DwDomain.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.domainEntityTypes.count = function() {
          var TargetResource = $injector.get("DwDomainEntityType");
          var action = TargetResource["::count::DwDomain::domainEntityTypes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.domainEntityTypes#create
         * @methodOf lbServices.DwDomain.domainEntityTypes
         *
         * @description
         *
         * Creates a new instance in domainEntityTypes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainEntityType` object.)
         * </em>
         */
        R.domainEntityTypes.create = function() {
          var TargetResource = $injector.get("DwDomainEntityType");
          var action = TargetResource["::create::DwDomain::domainEntityTypes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.domainEntityTypes#createMany
         * @methodOf lbServices.DwDomain.domainEntityTypes
         *
         * @description
         *
         * Creates a new instance in domainEntityTypes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainEntityType` object.)
         * </em>
         */
        R.domainEntityTypes.createMany = function() {
          var TargetResource = $injector.get("DwDomainEntityType");
          var action = TargetResource["::createMany::DwDomain::domainEntityTypes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.domainEntityTypes#destroyAll
         * @methodOf lbServices.DwDomain.domainEntityTypes
         *
         * @description
         *
         * Deletes all domainEntityTypes of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.domainEntityTypes.destroyAll = function() {
          var TargetResource = $injector.get("DwDomainEntityType");
          var action = TargetResource["::delete::DwDomain::domainEntityTypes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.domainEntityTypes#destroyById
         * @methodOf lbServices.DwDomain.domainEntityTypes
         *
         * @description
         *
         * Delete a related item by id for domainEntityTypes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for domainEntityTypes
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.domainEntityTypes.destroyById = function() {
          var TargetResource = $injector.get("DwDomainEntityType");
          var action = TargetResource["::destroyById::DwDomain::domainEntityTypes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.domainEntityTypes#findById
         * @methodOf lbServices.DwDomain.domainEntityTypes
         *
         * @description
         *
         * Find a related item by id for domainEntityTypes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for domainEntityTypes
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainEntityType` object.)
         * </em>
         */
        R.domainEntityTypes.findById = function() {
          var TargetResource = $injector.get("DwDomainEntityType");
          var action = TargetResource["::findById::DwDomain::domainEntityTypes"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.domainEntityTypes#updateById
         * @methodOf lbServices.DwDomain.domainEntityTypes
         *
         * @description
         *
         * Update a related item by id for domainEntityTypes.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for domainEntityTypes
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainEntityType` object.)
         * </em>
         */
        R.domainEntityTypes.updateById = function() {
          var TargetResource = $injector.get("DwDomainEntityType");
          var action = TargetResource["::updateById::DwDomain::domainEntityTypes"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.DwDomain.teams
     * @header lbServices.DwDomain.teams
     * @object
     * @description
     *
     * The object `DwDomain.teams` groups methods
     * manipulating `DwTeam` instances related to `DwDomain`.
     *
     * Call {@link lbServices.DwDomain#teams DwDomain.teams()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.DwDomain#teams
         * @methodOf lbServices.DwDomain
         *
         * @description
         *
         * Queries teams of DwDomain.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        R.teams = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::get::DwDomain::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.teams#count
         * @methodOf lbServices.DwDomain.teams
         *
         * @description
         *
         * Counts teams of DwDomain.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.teams.count = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::count::DwDomain::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.teams#create
         * @methodOf lbServices.DwDomain.teams
         *
         * @description
         *
         * Creates a new instance in teams of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        R.teams.create = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::create::DwDomain::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.teams#createMany
         * @methodOf lbServices.DwDomain.teams
         *
         * @description
         *
         * Creates a new instance in teams of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        R.teams.createMany = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::createMany::DwDomain::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.teams#destroyAll
         * @methodOf lbServices.DwDomain.teams
         *
         * @description
         *
         * Deletes all teams of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.teams.destroyAll = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::delete::DwDomain::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.teams#destroyById
         * @methodOf lbServices.DwDomain.teams
         *
         * @description
         *
         * Delete a related item by id for teams.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for teams
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.teams.destroyById = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::destroyById::DwDomain::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.teams#exists
         * @methodOf lbServices.DwDomain.teams
         *
         * @description
         *
         * Check the existence of teams relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for teams
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        R.teams.exists = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::exists::DwDomain::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.teams#findById
         * @methodOf lbServices.DwDomain.teams
         *
         * @description
         *
         * Find a related item by id for teams.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for teams
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        R.teams.findById = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::findById::DwDomain::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.teams#link
         * @methodOf lbServices.DwDomain.teams
         *
         * @description
         *
         * Add a related item by id for teams.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for teams
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        R.teams.link = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::link::DwDomain::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.teams#unlink
         * @methodOf lbServices.DwDomain.teams
         *
         * @description
         *
         * Remove the teams relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for teams
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.teams.unlink = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::unlink::DwDomain::teams"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.teams#updateById
         * @methodOf lbServices.DwDomain.teams
         *
         * @description
         *
         * Update a related item by id for teams.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for teams
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        R.teams.updateById = function() {
          var TargetResource = $injector.get("DwTeam");
          var action = TargetResource["::updateById::DwDomain::teams"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.DwDomain.extractors
     * @header lbServices.DwDomain.extractors
     * @object
     * @description
     *
     * The object `DwDomain.extractors` groups methods
     * manipulating `DwExtractor` instances related to `DwDomain`.
     *
     * Call {@link lbServices.DwDomain#extractors DwDomain.extractors()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.DwDomain#extractors
         * @methodOf lbServices.DwDomain
         *
         * @description
         *
         * Queries extractors of DwDomain.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwExtractor` object.)
         * </em>
         */
        R.extractors = function() {
          var TargetResource = $injector.get("DwExtractor");
          var action = TargetResource["::get::DwDomain::extractors"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.extractors#count
         * @methodOf lbServices.DwDomain.extractors
         *
         * @description
         *
         * Counts extractors of DwDomain.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.extractors.count = function() {
          var TargetResource = $injector.get("DwExtractor");
          var action = TargetResource["::count::DwDomain::extractors"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.extractors#create
         * @methodOf lbServices.DwDomain.extractors
         *
         * @description
         *
         * Creates a new instance in extractors of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwExtractor` object.)
         * </em>
         */
        R.extractors.create = function() {
          var TargetResource = $injector.get("DwExtractor");
          var action = TargetResource["::create::DwDomain::extractors"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.extractors#createMany
         * @methodOf lbServices.DwDomain.extractors
         *
         * @description
         *
         * Creates a new instance in extractors of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwExtractor` object.)
         * </em>
         */
        R.extractors.createMany = function() {
          var TargetResource = $injector.get("DwExtractor");
          var action = TargetResource["::createMany::DwDomain::extractors"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.extractors#destroyAll
         * @methodOf lbServices.DwDomain.extractors
         *
         * @description
         *
         * Deletes all extractors of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.extractors.destroyAll = function() {
          var TargetResource = $injector.get("DwExtractor");
          var action = TargetResource["::delete::DwDomain::extractors"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.extractors#destroyById
         * @methodOf lbServices.DwDomain.extractors
         *
         * @description
         *
         * Delete a related item by id for extractors.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for extractors
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.extractors.destroyById = function() {
          var TargetResource = $injector.get("DwExtractor");
          var action = TargetResource["::destroyById::DwDomain::extractors"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.extractors#exists
         * @methodOf lbServices.DwDomain.extractors
         *
         * @description
         *
         * Check the existence of extractors relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for extractors
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwExtractor` object.)
         * </em>
         */
        R.extractors.exists = function() {
          var TargetResource = $injector.get("DwExtractor");
          var action = TargetResource["::exists::DwDomain::extractors"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.extractors#findById
         * @methodOf lbServices.DwDomain.extractors
         *
         * @description
         *
         * Find a related item by id for extractors.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for extractors
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwExtractor` object.)
         * </em>
         */
        R.extractors.findById = function() {
          var TargetResource = $injector.get("DwExtractor");
          var action = TargetResource["::findById::DwDomain::extractors"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.extractors#link
         * @methodOf lbServices.DwDomain.extractors
         *
         * @description
         *
         * Add a related item by id for extractors.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for extractors
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwExtractor` object.)
         * </em>
         */
        R.extractors.link = function() {
          var TargetResource = $injector.get("DwExtractor");
          var action = TargetResource["::link::DwDomain::extractors"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.extractors#unlink
         * @methodOf lbServices.DwDomain.extractors
         *
         * @description
         *
         * Remove the extractors relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for extractors
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.extractors.unlink = function() {
          var TargetResource = $injector.get("DwExtractor");
          var action = TargetResource["::unlink::DwDomain::extractors"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwDomain.extractors#updateById
         * @methodOf lbServices.DwDomain.extractors
         *
         * @description
         *
         * Update a related item by id for extractors.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for extractors
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwExtractor` object.)
         * </em>
         */
        R.extractors.updateById = function() {
          var TargetResource = $injector.get("DwExtractor");
          var action = TargetResource["::updateById::DwDomain::extractors"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.DwDomainEntityType
 * @header lbServices.DwDomainEntityType
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DwDomainEntityType` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "DwDomainEntityType",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/DwDomainEntityTypes/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use DwDomainEntityType.domain() instead.
        "prototype$__get__domain": {
          url: urlBase + "/DwDomainEntityTypes/:id/domain",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomainEntityType#create
         * @methodOf lbServices.DwDomainEntityType
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainEntityType` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/DwDomainEntityTypes",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomainEntityType#createMany
         * @methodOf lbServices.DwDomainEntityType
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainEntityType` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/DwDomainEntityTypes",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomainEntityType#upsert
         * @methodOf lbServices.DwDomainEntityType
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainEntityType` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/DwDomainEntityTypes",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomainEntityType#exists
         * @methodOf lbServices.DwDomainEntityType
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/DwDomainEntityTypes/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomainEntityType#findById
         * @methodOf lbServices.DwDomainEntityType
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainEntityType` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/DwDomainEntityTypes/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomainEntityType#find
         * @methodOf lbServices.DwDomainEntityType
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainEntityType` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/DwDomainEntityTypes",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomainEntityType#findOne
         * @methodOf lbServices.DwDomainEntityType
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainEntityType` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/DwDomainEntityTypes/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomainEntityType#updateAll
         * @methodOf lbServices.DwDomainEntityType
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/DwDomainEntityTypes/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomainEntityType#deleteById
         * @methodOf lbServices.DwDomainEntityType
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/DwDomainEntityTypes/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomainEntityType#count
         * @methodOf lbServices.DwDomainEntityType
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/DwDomainEntityTypes/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomainEntityType#prototype$updateAttributes
         * @methodOf lbServices.DwDomainEntityType
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainEntityType` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/DwDomainEntityTypes/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwDomainEntityType#createChangeStream
         * @methodOf lbServices.DwDomainEntityType
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/DwDomainEntityTypes/change-stream",
          method: "POST"
        },

        // INTERNAL. Use DwDomain.domainEntityTypes.findById() instead.
        "::findById::DwDomain::domainEntityTypes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/domainEntityTypes/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.domainEntityTypes.destroyById() instead.
        "::destroyById::DwDomain::domainEntityTypes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/domainEntityTypes/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.domainEntityTypes.updateById() instead.
        "::updateById::DwDomain::domainEntityTypes": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/domainEntityTypes/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwDomain.domainEntityTypes() instead.
        "::get::DwDomain::domainEntityTypes": {
          isArray: true,
          url: urlBase + "/dwDomains/:id/domainEntityTypes",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.domainEntityTypes.create() instead.
        "::create::DwDomain::domainEntityTypes": {
          url: urlBase + "/dwDomains/:id/domainEntityTypes",
          method: "POST"
        },

        // INTERNAL. Use DwDomain.domainEntityTypes.createMany() instead.
        "::createMany::DwDomain::domainEntityTypes": {
          isArray: true,
          url: urlBase + "/dwDomains/:id/domainEntityTypes",
          method: "POST"
        },

        // INTERNAL. Use DwDomain.domainEntityTypes.destroyAll() instead.
        "::delete::DwDomain::domainEntityTypes": {
          url: urlBase + "/dwDomains/:id/domainEntityTypes",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.domainEntityTypes.count() instead.
        "::count::DwDomain::domainEntityTypes": {
          url: urlBase + "/dwDomains/:id/domainEntityTypes/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.DwDomainEntityType#updateOrCreate
         * @methodOf lbServices.DwDomainEntityType
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomainEntityType` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.DwDomainEntityType#update
         * @methodOf lbServices.DwDomainEntityType
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.DwDomainEntityType#destroyById
         * @methodOf lbServices.DwDomainEntityType
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.DwDomainEntityType#removeById
         * @methodOf lbServices.DwDomainEntityType
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.DwDomainEntityType#modelName
    * @propertyOf lbServices.DwDomainEntityType
    * @description
    * The name of the model represented by this $resource,
    * i.e. `DwDomainEntityType`.
    */
    R.modelName = "DwDomainEntityType";


        /**
         * @ngdoc method
         * @name lbServices.DwDomainEntityType#domain
         * @methodOf lbServices.DwDomainEntityType
         *
         * @description
         *
         * Fetches belongsTo relation domain.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R.domain = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::get::DwDomainEntityType::domain"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.DwUrlExtraction
 * @header lbServices.DwUrlExtraction
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DwUrlExtraction` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "DwUrlExtraction",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/dwUrlExtractions/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use DwUrlExtraction.trailUrl() instead.
        "prototype$__get__trailUrl": {
          url: urlBase + "/dwUrlExtractions/:id/trailUrl",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwUrlExtraction#create
         * @methodOf lbServices.DwUrlExtraction
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwUrlExtraction` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/dwUrlExtractions",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwUrlExtraction#createMany
         * @methodOf lbServices.DwUrlExtraction
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwUrlExtraction` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/dwUrlExtractions",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwUrlExtraction#upsert
         * @methodOf lbServices.DwUrlExtraction
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwUrlExtraction` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/dwUrlExtractions",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwUrlExtraction#exists
         * @methodOf lbServices.DwUrlExtraction
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/dwUrlExtractions/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwUrlExtraction#findById
         * @methodOf lbServices.DwUrlExtraction
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwUrlExtraction` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/dwUrlExtractions/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwUrlExtraction#find
         * @methodOf lbServices.DwUrlExtraction
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwUrlExtraction` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/dwUrlExtractions",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwUrlExtraction#findOne
         * @methodOf lbServices.DwUrlExtraction
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwUrlExtraction` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/dwUrlExtractions/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwUrlExtraction#updateAll
         * @methodOf lbServices.DwUrlExtraction
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/dwUrlExtractions/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwUrlExtraction#deleteById
         * @methodOf lbServices.DwUrlExtraction
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/dwUrlExtractions/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwUrlExtraction#count
         * @methodOf lbServices.DwUrlExtraction
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/dwUrlExtractions/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwUrlExtraction#prototype$updateAttributes
         * @methodOf lbServices.DwUrlExtraction
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwUrlExtraction` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/dwUrlExtractions/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwUrlExtraction#createChangeStream
         * @methodOf lbServices.DwUrlExtraction
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/dwUrlExtractions/change-stream",
          method: "POST"
        },

        // INTERNAL. Use DwTrailUrl.urlExtractions.findById() instead.
        "::findById::DwTrailUrl::urlExtractions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrailUrls/:id/urlExtractions/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwTrailUrl.urlExtractions.destroyById() instead.
        "::destroyById::DwTrailUrl::urlExtractions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrailUrls/:id/urlExtractions/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTrailUrl.urlExtractions.updateById() instead.
        "::updateById::DwTrailUrl::urlExtractions": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTrailUrls/:id/urlExtractions/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTrailUrl.urlExtractions() instead.
        "::get::DwTrailUrl::urlExtractions": {
          isArray: true,
          url: urlBase + "/dwTrailUrls/:id/urlExtractions",
          method: "GET"
        },

        // INTERNAL. Use DwTrailUrl.urlExtractions.create() instead.
        "::create::DwTrailUrl::urlExtractions": {
          url: urlBase + "/dwTrailUrls/:id/urlExtractions",
          method: "POST"
        },

        // INTERNAL. Use DwTrailUrl.urlExtractions.createMany() instead.
        "::createMany::DwTrailUrl::urlExtractions": {
          isArray: true,
          url: urlBase + "/dwTrailUrls/:id/urlExtractions",
          method: "POST"
        },

        // INTERNAL. Use DwTrailUrl.urlExtractions.destroyAll() instead.
        "::delete::DwTrailUrl::urlExtractions": {
          url: urlBase + "/dwTrailUrls/:id/urlExtractions",
          method: "DELETE"
        },

        // INTERNAL. Use DwTrailUrl.urlExtractions.count() instead.
        "::count::DwTrailUrl::urlExtractions": {
          url: urlBase + "/dwTrailUrls/:id/urlExtractions/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.DwUrlExtraction#updateOrCreate
         * @methodOf lbServices.DwUrlExtraction
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwUrlExtraction` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.DwUrlExtraction#update
         * @methodOf lbServices.DwUrlExtraction
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.DwUrlExtraction#destroyById
         * @methodOf lbServices.DwUrlExtraction
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.DwUrlExtraction#removeById
         * @methodOf lbServices.DwUrlExtraction
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.DwUrlExtraction#modelName
    * @propertyOf lbServices.DwUrlExtraction
    * @description
    * The name of the model represented by this $resource,
    * i.e. `DwUrlExtraction`.
    */
    R.modelName = "DwUrlExtraction";


        /**
         * @ngdoc method
         * @name lbServices.DwUrlExtraction#trailUrl
         * @methodOf lbServices.DwUrlExtraction
         *
         * @description
         *
         * Fetches belongsTo relation trailUrl.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrailUrl` object.)
         * </em>
         */
        R.trailUrl = function() {
          var TargetResource = $injector.get("DwTrailUrl");
          var action = TargetResource["::get::DwUrlExtraction::trailUrl"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.DwTeam
 * @header lbServices.DwTeam
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DwTeam` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "DwTeam",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/dwTeams/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use DwTeam.trails.findById() instead.
        "prototype$__findById__trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/trails/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwTeam.trails.destroyById() instead.
        "prototype$__destroyById__trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/trails/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTeam.trails.updateById() instead.
        "prototype$__updateById__trails": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/trails/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTeam.domains.findById() instead.
        "prototype$__findById__domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/domains/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwTeam.domains.destroyById() instead.
        "prototype$__destroyById__domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/domains/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTeam.domains.updateById() instead.
        "prototype$__updateById__domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/domains/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTeam.domains.link() instead.
        "prototype$__link__domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/domains/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTeam.domains.unlink() instead.
        "prototype$__unlink__domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/domains/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTeam.domains.exists() instead.
        "prototype$__exists__domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/domains/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use DwTeam.users.findById() instead.
        "prototype$__findById__users": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/users/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwTeam.users.destroyById() instead.
        "prototype$__destroyById__users": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/users/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTeam.users.updateById() instead.
        "prototype$__updateById__users": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/users/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTeam.users.link() instead.
        "prototype$__link__users": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/users/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTeam.users.unlink() instead.
        "prototype$__unlink__users": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/users/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTeam.users.exists() instead.
        "prototype$__exists__users": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/users/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use DwTeam.feeds.findById() instead.
        "prototype$__findById__feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/feeds/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwTeam.feeds.destroyById() instead.
        "prototype$__destroyById__feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/feeds/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTeam.feeds.updateById() instead.
        "prototype$__updateById__feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/feeds/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTeam.feeds.link() instead.
        "prototype$__link__feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/feeds/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwTeam.feeds.unlink() instead.
        "prototype$__unlink__feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/feeds/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwTeam.feeds.exists() instead.
        "prototype$__exists__feeds": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwTeams/:id/feeds/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use DwTeam.trails() instead.
        "prototype$__get__trails": {
          isArray: true,
          url: urlBase + "/dwTeams/:id/trails",
          method: "GET"
        },

        // INTERNAL. Use DwTeam.trails.create() instead.
        "prototype$__create__trails": {
          url: urlBase + "/dwTeams/:id/trails",
          method: "POST"
        },

        // INTERNAL. Use DwTeam.trails.destroyAll() instead.
        "prototype$__delete__trails": {
          url: urlBase + "/dwTeams/:id/trails",
          method: "DELETE"
        },

        // INTERNAL. Use DwTeam.trails.count() instead.
        "prototype$__count__trails": {
          url: urlBase + "/dwTeams/:id/trails/count",
          method: "GET"
        },

        // INTERNAL. Use DwTeam.domains() instead.
        "prototype$__get__domains": {
          isArray: true,
          url: urlBase + "/dwTeams/:id/domains",
          method: "GET"
        },

        // INTERNAL. Use DwTeam.domains.create() instead.
        "prototype$__create__domains": {
          url: urlBase + "/dwTeams/:id/domains",
          method: "POST"
        },

        // INTERNAL. Use DwTeam.domains.destroyAll() instead.
        "prototype$__delete__domains": {
          url: urlBase + "/dwTeams/:id/domains",
          method: "DELETE"
        },

        // INTERNAL. Use DwTeam.domains.count() instead.
        "prototype$__count__domains": {
          url: urlBase + "/dwTeams/:id/domains/count",
          method: "GET"
        },

        // INTERNAL. Use DwTeam.users() instead.
        "prototype$__get__users": {
          isArray: true,
          url: urlBase + "/dwTeams/:id/users",
          method: "GET"
        },

        // INTERNAL. Use DwTeam.users.create() instead.
        "prototype$__create__users": {
          url: urlBase + "/dwTeams/:id/users",
          method: "POST"
        },

        // INTERNAL. Use DwTeam.users.destroyAll() instead.
        "prototype$__delete__users": {
          url: urlBase + "/dwTeams/:id/users",
          method: "DELETE"
        },

        // INTERNAL. Use DwTeam.users.count() instead.
        "prototype$__count__users": {
          url: urlBase + "/dwTeams/:id/users/count",
          method: "GET"
        },

        // INTERNAL. Use DwTeam.feeds() instead.
        "prototype$__get__feeds": {
          isArray: true,
          url: urlBase + "/dwTeams/:id/feeds",
          method: "GET"
        },

        // INTERNAL. Use DwTeam.feeds.create() instead.
        "prototype$__create__feeds": {
          url: urlBase + "/dwTeams/:id/feeds",
          method: "POST"
        },

        // INTERNAL. Use DwTeam.feeds.destroyAll() instead.
        "prototype$__delete__feeds": {
          url: urlBase + "/dwTeams/:id/feeds",
          method: "DELETE"
        },

        // INTERNAL. Use DwTeam.feeds.count() instead.
        "prototype$__count__feeds": {
          url: urlBase + "/dwTeams/:id/feeds/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTeam#create
         * @methodOf lbServices.DwTeam
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/dwTeams",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTeam#createMany
         * @methodOf lbServices.DwTeam
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/dwTeams",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTeam#upsert
         * @methodOf lbServices.DwTeam
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/dwTeams",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTeam#exists
         * @methodOf lbServices.DwTeam
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/dwTeams/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTeam#findById
         * @methodOf lbServices.DwTeam
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/dwTeams/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTeam#find
         * @methodOf lbServices.DwTeam
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/dwTeams",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTeam#findOne
         * @methodOf lbServices.DwTeam
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/dwTeams/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTeam#updateAll
         * @methodOf lbServices.DwTeam
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/dwTeams/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTeam#deleteById
         * @methodOf lbServices.DwTeam
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/dwTeams/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTeam#count
         * @methodOf lbServices.DwTeam
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/dwTeams/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTeam#prototype$updateAttributes
         * @methodOf lbServices.DwTeam
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/dwTeams/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwTeam#createChangeStream
         * @methodOf lbServices.DwTeam
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/dwTeams/change-stream",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.teams.findById() instead.
        "::findById::AminoUser::teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/teams/:fk",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.teams.destroyById() instead.
        "::destroyById::AminoUser::teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/teams/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.teams.updateById() instead.
        "::updateById::AminoUser::teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/teams/:fk",
          method: "PUT"
        },

        // INTERNAL. Use AminoUser.teams.link() instead.
        "::link::AminoUser::teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/teams/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use AminoUser.teams.unlink() instead.
        "::unlink::AminoUser::teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/teams/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.teams.exists() instead.
        "::exists::AminoUser::teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/AminoUsers/:id/teams/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use AminoUser.teams() instead.
        "::get::AminoUser::teams": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/teams",
          method: "GET"
        },

        // INTERNAL. Use AminoUser.teams.create() instead.
        "::create::AminoUser::teams": {
          url: urlBase + "/AminoUsers/:id/teams",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.teams.createMany() instead.
        "::createMany::AminoUser::teams": {
          isArray: true,
          url: urlBase + "/AminoUsers/:id/teams",
          method: "POST"
        },

        // INTERNAL. Use AminoUser.teams.destroyAll() instead.
        "::delete::AminoUser::teams": {
          url: urlBase + "/AminoUsers/:id/teams",
          method: "DELETE"
        },

        // INTERNAL. Use AminoUser.teams.count() instead.
        "::count::AminoUser::teams": {
          url: urlBase + "/AminoUsers/:id/teams/count",
          method: "GET"
        },

        // INTERNAL. Use DwTrail.team() instead.
        "::get::DwTrail::team": {
          url: urlBase + "/dwTrails/:id/team",
          method: "GET"
        },

        // INTERNAL. Use DwFeed.teams.findById() instead.
        "::findById::DwFeed::teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/teams/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwFeed.teams.destroyById() instead.
        "::destroyById::DwFeed::teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/teams/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwFeed.teams.updateById() instead.
        "::updateById::DwFeed::teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/teams/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwFeed.teams.link() instead.
        "::link::DwFeed::teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/teams/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwFeed.teams.unlink() instead.
        "::unlink::DwFeed::teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/teams/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwFeed.teams.exists() instead.
        "::exists::DwFeed::teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwFeeds/:id/teams/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use DwFeed.teams() instead.
        "::get::DwFeed::teams": {
          isArray: true,
          url: urlBase + "/dwFeeds/:id/teams",
          method: "GET"
        },

        // INTERNAL. Use DwFeed.teams.create() instead.
        "::create::DwFeed::teams": {
          url: urlBase + "/dwFeeds/:id/teams",
          method: "POST"
        },

        // INTERNAL. Use DwFeed.teams.createMany() instead.
        "::createMany::DwFeed::teams": {
          isArray: true,
          url: urlBase + "/dwFeeds/:id/teams",
          method: "POST"
        },

        // INTERNAL. Use DwFeed.teams.destroyAll() instead.
        "::delete::DwFeed::teams": {
          url: urlBase + "/dwFeeds/:id/teams",
          method: "DELETE"
        },

        // INTERNAL. Use DwFeed.teams.count() instead.
        "::count::DwFeed::teams": {
          url: urlBase + "/dwFeeds/:id/teams/count",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.teams.findById() instead.
        "::findById::DwDomain::teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/teams/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.teams.destroyById() instead.
        "::destroyById::DwDomain::teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/teams/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.teams.updateById() instead.
        "::updateById::DwDomain::teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/teams/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwDomain.teams.link() instead.
        "::link::DwDomain::teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/teams/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwDomain.teams.unlink() instead.
        "::unlink::DwDomain::teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/teams/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.teams.exists() instead.
        "::exists::DwDomain::teams": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/teams/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use DwDomain.teams() instead.
        "::get::DwDomain::teams": {
          isArray: true,
          url: urlBase + "/dwDomains/:id/teams",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.teams.create() instead.
        "::create::DwDomain::teams": {
          url: urlBase + "/dwDomains/:id/teams",
          method: "POST"
        },

        // INTERNAL. Use DwDomain.teams.createMany() instead.
        "::createMany::DwDomain::teams": {
          isArray: true,
          url: urlBase + "/dwDomains/:id/teams",
          method: "POST"
        },

        // INTERNAL. Use DwDomain.teams.destroyAll() instead.
        "::delete::DwDomain::teams": {
          url: urlBase + "/dwDomains/:id/teams",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.teams.count() instead.
        "::count::DwDomain::teams": {
          url: urlBase + "/dwDomains/:id/teams/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.DwTeam#updateOrCreate
         * @methodOf lbServices.DwTeam
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTeam` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.DwTeam#update
         * @methodOf lbServices.DwTeam
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.DwTeam#destroyById
         * @methodOf lbServices.DwTeam
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.DwTeam#removeById
         * @methodOf lbServices.DwTeam
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.DwTeam#modelName
    * @propertyOf lbServices.DwTeam
    * @description
    * The name of the model represented by this $resource,
    * i.e. `DwTeam`.
    */
    R.modelName = "DwTeam";

    /**
     * @ngdoc object
     * @name lbServices.DwTeam.trails
     * @header lbServices.DwTeam.trails
     * @object
     * @description
     *
     * The object `DwTeam.trails` groups methods
     * manipulating `DwTrail` instances related to `DwTeam`.
     *
     * Call {@link lbServices.DwTeam#trails DwTeam.trails()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.DwTeam#trails
         * @methodOf lbServices.DwTeam
         *
         * @description
         *
         * Queries trails of DwTeam.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trails = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::get::DwTeam::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.trails#count
         * @methodOf lbServices.DwTeam.trails
         *
         * @description
         *
         * Counts trails of DwTeam.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.trails.count = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::count::DwTeam::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.trails#create
         * @methodOf lbServices.DwTeam.trails
         *
         * @description
         *
         * Creates a new instance in trails of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trails.create = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::create::DwTeam::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.trails#createMany
         * @methodOf lbServices.DwTeam.trails
         *
         * @description
         *
         * Creates a new instance in trails of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trails.createMany = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::createMany::DwTeam::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.trails#destroyAll
         * @methodOf lbServices.DwTeam.trails
         *
         * @description
         *
         * Deletes all trails of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.trails.destroyAll = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::delete::DwTeam::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.trails#destroyById
         * @methodOf lbServices.DwTeam.trails
         *
         * @description
         *
         * Delete a related item by id for trails.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for trails
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.trails.destroyById = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::destroyById::DwTeam::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.trails#findById
         * @methodOf lbServices.DwTeam.trails
         *
         * @description
         *
         * Find a related item by id for trails.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for trails
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trails.findById = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::findById::DwTeam::trails"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.trails#updateById
         * @methodOf lbServices.DwTeam.trails
         *
         * @description
         *
         * Update a related item by id for trails.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for trails
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwTrail` object.)
         * </em>
         */
        R.trails.updateById = function() {
          var TargetResource = $injector.get("DwTrail");
          var action = TargetResource["::updateById::DwTeam::trails"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.DwTeam.domains
     * @header lbServices.DwTeam.domains
     * @object
     * @description
     *
     * The object `DwTeam.domains` groups methods
     * manipulating `DwDomain` instances related to `DwTeam`.
     *
     * Call {@link lbServices.DwTeam#domains DwTeam.domains()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.DwTeam#domains
         * @methodOf lbServices.DwTeam
         *
         * @description
         *
         * Queries domains of DwTeam.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R.domains = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::get::DwTeam::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.domains#count
         * @methodOf lbServices.DwTeam.domains
         *
         * @description
         *
         * Counts domains of DwTeam.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.domains.count = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::count::DwTeam::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.domains#create
         * @methodOf lbServices.DwTeam.domains
         *
         * @description
         *
         * Creates a new instance in domains of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R.domains.create = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::create::DwTeam::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.domains#createMany
         * @methodOf lbServices.DwTeam.domains
         *
         * @description
         *
         * Creates a new instance in domains of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R.domains.createMany = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::createMany::DwTeam::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.domains#destroyAll
         * @methodOf lbServices.DwTeam.domains
         *
         * @description
         *
         * Deletes all domains of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.domains.destroyAll = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::delete::DwTeam::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.domains#destroyById
         * @methodOf lbServices.DwTeam.domains
         *
         * @description
         *
         * Delete a related item by id for domains.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for domains
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.domains.destroyById = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::destroyById::DwTeam::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.domains#exists
         * @methodOf lbServices.DwTeam.domains
         *
         * @description
         *
         * Check the existence of domains relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for domains
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R.domains.exists = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::exists::DwTeam::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.domains#findById
         * @methodOf lbServices.DwTeam.domains
         *
         * @description
         *
         * Find a related item by id for domains.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for domains
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R.domains.findById = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::findById::DwTeam::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.domains#link
         * @methodOf lbServices.DwTeam.domains
         *
         * @description
         *
         * Add a related item by id for domains.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for domains
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R.domains.link = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::link::DwTeam::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.domains#unlink
         * @methodOf lbServices.DwTeam.domains
         *
         * @description
         *
         * Remove the domains relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for domains
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.domains.unlink = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::unlink::DwTeam::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.domains#updateById
         * @methodOf lbServices.DwTeam.domains
         *
         * @description
         *
         * Update a related item by id for domains.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for domains
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R.domains.updateById = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::updateById::DwTeam::domains"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.DwTeam.users
     * @header lbServices.DwTeam.users
     * @object
     * @description
     *
     * The object `DwTeam.users` groups methods
     * manipulating `AminoUser` instances related to `DwTeam`.
     *
     * Call {@link lbServices.DwTeam#users DwTeam.users()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.DwTeam#users
         * @methodOf lbServices.DwTeam
         *
         * @description
         *
         * Queries users of DwTeam.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.users = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::get::DwTeam::users"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.users#count
         * @methodOf lbServices.DwTeam.users
         *
         * @description
         *
         * Counts users of DwTeam.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.users.count = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::count::DwTeam::users"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.users#create
         * @methodOf lbServices.DwTeam.users
         *
         * @description
         *
         * Creates a new instance in users of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.users.create = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::create::DwTeam::users"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.users#createMany
         * @methodOf lbServices.DwTeam.users
         *
         * @description
         *
         * Creates a new instance in users of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.users.createMany = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::createMany::DwTeam::users"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.users#destroyAll
         * @methodOf lbServices.DwTeam.users
         *
         * @description
         *
         * Deletes all users of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.users.destroyAll = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::delete::DwTeam::users"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.users#destroyById
         * @methodOf lbServices.DwTeam.users
         *
         * @description
         *
         * Delete a related item by id for users.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for users
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.users.destroyById = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::destroyById::DwTeam::users"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.users#exists
         * @methodOf lbServices.DwTeam.users
         *
         * @description
         *
         * Check the existence of users relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for users
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.users.exists = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::exists::DwTeam::users"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.users#findById
         * @methodOf lbServices.DwTeam.users
         *
         * @description
         *
         * Find a related item by id for users.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for users
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.users.findById = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::findById::DwTeam::users"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.users#link
         * @methodOf lbServices.DwTeam.users
         *
         * @description
         *
         * Add a related item by id for users.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for users
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.users.link = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::link::DwTeam::users"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.users#unlink
         * @methodOf lbServices.DwTeam.users
         *
         * @description
         *
         * Remove the users relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for users
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.users.unlink = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::unlink::DwTeam::users"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.users#updateById
         * @methodOf lbServices.DwTeam.users
         *
         * @description
         *
         * Update a related item by id for users.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for users
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `AminoUser` object.)
         * </em>
         */
        R.users.updateById = function() {
          var TargetResource = $injector.get("AminoUser");
          var action = TargetResource["::updateById::DwTeam::users"];
          return action.apply(R, arguments);
        };
    /**
     * @ngdoc object
     * @name lbServices.DwTeam.feeds
     * @header lbServices.DwTeam.feeds
     * @object
     * @description
     *
     * The object `DwTeam.feeds` groups methods
     * manipulating `DwFeed` instances related to `DwTeam`.
     *
     * Call {@link lbServices.DwTeam#feeds DwTeam.feeds()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.DwTeam#feeds
         * @methodOf lbServices.DwTeam
         *
         * @description
         *
         * Queries feeds of DwTeam.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::get::DwTeam::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.feeds#count
         * @methodOf lbServices.DwTeam.feeds
         *
         * @description
         *
         * Counts feeds of DwTeam.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.feeds.count = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::count::DwTeam::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.feeds#create
         * @methodOf lbServices.DwTeam.feeds
         *
         * @description
         *
         * Creates a new instance in feeds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds.create = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::create::DwTeam::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.feeds#createMany
         * @methodOf lbServices.DwTeam.feeds
         *
         * @description
         *
         * Creates a new instance in feeds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds.createMany = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::createMany::DwTeam::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.feeds#destroyAll
         * @methodOf lbServices.DwTeam.feeds
         *
         * @description
         *
         * Deletes all feeds of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.feeds.destroyAll = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::delete::DwTeam::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.feeds#destroyById
         * @methodOf lbServices.DwTeam.feeds
         *
         * @description
         *
         * Delete a related item by id for feeds.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for feeds
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.feeds.destroyById = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::destroyById::DwTeam::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.feeds#exists
         * @methodOf lbServices.DwTeam.feeds
         *
         * @description
         *
         * Check the existence of feeds relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for feeds
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds.exists = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::exists::DwTeam::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.feeds#findById
         * @methodOf lbServices.DwTeam.feeds
         *
         * @description
         *
         * Find a related item by id for feeds.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for feeds
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds.findById = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::findById::DwTeam::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.feeds#link
         * @methodOf lbServices.DwTeam.feeds
         *
         * @description
         *
         * Add a related item by id for feeds.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for feeds
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds.link = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::link::DwTeam::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.feeds#unlink
         * @methodOf lbServices.DwTeam.feeds
         *
         * @description
         *
         * Remove the feeds relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for feeds
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.feeds.unlink = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::unlink::DwTeam::feeds"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwTeam.feeds#updateById
         * @methodOf lbServices.DwTeam.feeds
         *
         * @description
         *
         * Update a related item by id for feeds.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for feeds
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwFeed` object.)
         * </em>
         */
        R.feeds.updateById = function() {
          var TargetResource = $injector.get("DwFeed");
          var action = TargetResource["::updateById::DwTeam::feeds"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.DwExtractor
 * @header lbServices.DwExtractor
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `DwExtractor` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "DwExtractor",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/dwExtractors/:id",
      { 'id': '@id' },
      {

        // INTERNAL. Use DwExtractor.domains.findById() instead.
        "prototype$__findById__domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwExtractors/:id/domains/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwExtractor.domains.destroyById() instead.
        "prototype$__destroyById__domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwExtractors/:id/domains/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwExtractor.domains.updateById() instead.
        "prototype$__updateById__domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwExtractors/:id/domains/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwExtractor.domains.link() instead.
        "prototype$__link__domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwExtractors/:id/domains/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwExtractor.domains.unlink() instead.
        "prototype$__unlink__domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwExtractors/:id/domains/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwExtractor.domains.exists() instead.
        "prototype$__exists__domains": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwExtractors/:id/domains/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use DwExtractor.serviceType() instead.
        "prototype$__get__serviceType": {
          url: urlBase + "/dwExtractors/:id/serviceType",
          method: "GET"
        },

        // INTERNAL. Use DwExtractor.domains() instead.
        "prototype$__get__domains": {
          isArray: true,
          url: urlBase + "/dwExtractors/:id/domains",
          method: "GET"
        },

        // INTERNAL. Use DwExtractor.domains.create() instead.
        "prototype$__create__domains": {
          url: urlBase + "/dwExtractors/:id/domains",
          method: "POST"
        },

        // INTERNAL. Use DwExtractor.domains.destroyAll() instead.
        "prototype$__delete__domains": {
          url: urlBase + "/dwExtractors/:id/domains",
          method: "DELETE"
        },

        // INTERNAL. Use DwExtractor.domains.count() instead.
        "prototype$__count__domains": {
          url: urlBase + "/dwExtractors/:id/domains/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor#create
         * @methodOf lbServices.DwExtractor
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwExtractor` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/dwExtractors",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor#createMany
         * @methodOf lbServices.DwExtractor
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwExtractor` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/dwExtractors",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor#upsert
         * @methodOf lbServices.DwExtractor
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwExtractor` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/dwExtractors",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor#exists
         * @methodOf lbServices.DwExtractor
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/dwExtractors/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor#findById
         * @methodOf lbServices.DwExtractor
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwExtractor` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/dwExtractors/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor#find
         * @methodOf lbServices.DwExtractor
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwExtractor` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/dwExtractors",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor#findOne
         * @methodOf lbServices.DwExtractor
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwExtractor` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/dwExtractors/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor#updateAll
         * @methodOf lbServices.DwExtractor
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/dwExtractors/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor#deleteById
         * @methodOf lbServices.DwExtractor
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/dwExtractors/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor#count
         * @methodOf lbServices.DwExtractor
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/dwExtractors/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor#prototype$updateAttributes
         * @methodOf lbServices.DwExtractor
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwExtractor` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/dwExtractors/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor#createChangeStream
         * @methodOf lbServices.DwExtractor
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/dwExtractors/change-stream",
          method: "POST"
        },

        // INTERNAL. Use DwServiceType.extractors.findById() instead.
        "::findById::DwServiceType::extractors": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwServiceTypes/:id/extractors/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwServiceType.extractors.destroyById() instead.
        "::destroyById::DwServiceType::extractors": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwServiceTypes/:id/extractors/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwServiceType.extractors.updateById() instead.
        "::updateById::DwServiceType::extractors": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwServiceTypes/:id/extractors/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwServiceType.extractors() instead.
        "::get::DwServiceType::extractors": {
          isArray: true,
          url: urlBase + "/dwServiceTypes/:id/extractors",
          method: "GET"
        },

        // INTERNAL. Use DwServiceType.extractors.create() instead.
        "::create::DwServiceType::extractors": {
          url: urlBase + "/dwServiceTypes/:id/extractors",
          method: "POST"
        },

        // INTERNAL. Use DwServiceType.extractors.createMany() instead.
        "::createMany::DwServiceType::extractors": {
          isArray: true,
          url: urlBase + "/dwServiceTypes/:id/extractors",
          method: "POST"
        },

        // INTERNAL. Use DwServiceType.extractors.destroyAll() instead.
        "::delete::DwServiceType::extractors": {
          url: urlBase + "/dwServiceTypes/:id/extractors",
          method: "DELETE"
        },

        // INTERNAL. Use DwServiceType.extractors.count() instead.
        "::count::DwServiceType::extractors": {
          url: urlBase + "/dwServiceTypes/:id/extractors/count",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.extractors.findById() instead.
        "::findById::DwDomain::extractors": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/extractors/:fk",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.extractors.destroyById() instead.
        "::destroyById::DwDomain::extractors": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/extractors/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.extractors.updateById() instead.
        "::updateById::DwDomain::extractors": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/extractors/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwDomain.extractors.link() instead.
        "::link::DwDomain::extractors": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/extractors/rel/:fk",
          method: "PUT"
        },

        // INTERNAL. Use DwDomain.extractors.unlink() instead.
        "::unlink::DwDomain::extractors": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/extractors/rel/:fk",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.extractors.exists() instead.
        "::exists::DwDomain::extractors": {
          params: {
          'fk': '@fk'
          },
          url: urlBase + "/dwDomains/:id/extractors/rel/:fk",
          method: "HEAD"
        },

        // INTERNAL. Use DwDomain.extractors() instead.
        "::get::DwDomain::extractors": {
          isArray: true,
          url: urlBase + "/dwDomains/:id/extractors",
          method: "GET"
        },

        // INTERNAL. Use DwDomain.extractors.create() instead.
        "::create::DwDomain::extractors": {
          url: urlBase + "/dwDomains/:id/extractors",
          method: "POST"
        },

        // INTERNAL. Use DwDomain.extractors.createMany() instead.
        "::createMany::DwDomain::extractors": {
          isArray: true,
          url: urlBase + "/dwDomains/:id/extractors",
          method: "POST"
        },

        // INTERNAL. Use DwDomain.extractors.destroyAll() instead.
        "::delete::DwDomain::extractors": {
          url: urlBase + "/dwDomains/:id/extractors",
          method: "DELETE"
        },

        // INTERNAL. Use DwDomain.extractors.count() instead.
        "::count::DwDomain::extractors": {
          url: urlBase + "/dwDomains/:id/extractors/count",
          method: "GET"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.DwExtractor#updateOrCreate
         * @methodOf lbServices.DwExtractor
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwExtractor` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor#update
         * @methodOf lbServices.DwExtractor
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor#destroyById
         * @methodOf lbServices.DwExtractor
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor#removeById
         * @methodOf lbServices.DwExtractor
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.DwExtractor#modelName
    * @propertyOf lbServices.DwExtractor
    * @description
    * The name of the model represented by this $resource,
    * i.e. `DwExtractor`.
    */
    R.modelName = "DwExtractor";

    /**
     * @ngdoc object
     * @name lbServices.DwExtractor.domains
     * @header lbServices.DwExtractor.domains
     * @object
     * @description
     *
     * The object `DwExtractor.domains` groups methods
     * manipulating `DwDomain` instances related to `DwExtractor`.
     *
     * Call {@link lbServices.DwExtractor#domains DwExtractor.domains()}
     * to query all related instances.
     */


        /**
         * @ngdoc method
         * @name lbServices.DwExtractor#domains
         * @methodOf lbServices.DwExtractor
         *
         * @description
         *
         * Queries domains of DwExtractor.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `filter` – `{object=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R.domains = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::get::DwExtractor::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor.domains#count
         * @methodOf lbServices.DwExtractor.domains
         *
         * @description
         *
         * Counts domains of DwExtractor.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        R.domains.count = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::count::DwExtractor::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor.domains#create
         * @methodOf lbServices.DwExtractor.domains
         *
         * @description
         *
         * Creates a new instance in domains of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R.domains.create = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::create::DwExtractor::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor.domains#createMany
         * @methodOf lbServices.DwExtractor.domains
         *
         * @description
         *
         * Creates a new instance in domains of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R.domains.createMany = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::createMany::DwExtractor::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor.domains#destroyAll
         * @methodOf lbServices.DwExtractor.domains
         *
         * @description
         *
         * Deletes all domains of this model.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.domains.destroyAll = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::delete::DwExtractor::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor.domains#destroyById
         * @methodOf lbServices.DwExtractor.domains
         *
         * @description
         *
         * Delete a related item by id for domains.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for domains
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.domains.destroyById = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::destroyById::DwExtractor::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor.domains#exists
         * @methodOf lbServices.DwExtractor.domains
         *
         * @description
         *
         * Check the existence of domains relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for domains
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R.domains.exists = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::exists::DwExtractor::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor.domains#findById
         * @methodOf lbServices.DwExtractor.domains
         *
         * @description
         *
         * Find a related item by id for domains.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for domains
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R.domains.findById = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::findById::DwExtractor::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor.domains#link
         * @methodOf lbServices.DwExtractor.domains
         *
         * @description
         *
         * Add a related item by id for domains.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for domains
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R.domains.link = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::link::DwExtractor::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor.domains#unlink
         * @methodOf lbServices.DwExtractor.domains
         *
         * @description
         *
         * Remove the domains relation to an item by id.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for domains
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R.domains.unlink = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::unlink::DwExtractor::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor.domains#updateById
         * @methodOf lbServices.DwExtractor.domains
         *
         * @description
         *
         * Update a related item by id for domains.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `fk` – `{*}` - Foreign key for domains
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwDomain` object.)
         * </em>
         */
        R.domains.updateById = function() {
          var TargetResource = $injector.get("DwDomain");
          var action = TargetResource["::updateById::DwExtractor::domains"];
          return action.apply(R, arguments);
        };

        /**
         * @ngdoc method
         * @name lbServices.DwExtractor#serviceType
         * @methodOf lbServices.DwExtractor
         *
         * @description
         *
         * Fetches belongsTo relation serviceType.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         *  - `refresh` – `{boolean=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `DwServiceType` object.)
         * </em>
         */
        R.serviceType = function() {
          var TargetResource = $injector.get("DwServiceType");
          var action = TargetResource["::get::DwExtractor::serviceType"];
          return action.apply(R, arguments);
        };

    return R;
  }]);

/**
 * @ngdoc object
 * @name lbServices.Container
 * @header lbServices.Container
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `Container` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
 */
module.factory(
  "Container",
  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {
    var R = Resource(
      urlBase + "/containers/:id",
      { 'id': '@id' },
      {

        /**
         * @ngdoc method
         * @name lbServices.Container#getContainers
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "getContainers": {
          isArray: true,
          url: urlBase + "/containers",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#createContainer
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "createContainer": {
          url: urlBase + "/containers",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#destroyContainer
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `` – `{undefined=}` - 
         */
        "destroyContainer": {
          url: urlBase + "/containers/:container",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#getContainer
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "getContainer": {
          url: urlBase + "/containers/:container",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#getFiles
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "getFiles": {
          isArray: true,
          url: urlBase + "/containers/:container/files",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#getFile
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         *  - `file` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "getFile": {
          url: urlBase + "/containers/:container/files/:file",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#removeFile
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         *  - `file` – `{string=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `` – `{undefined=}` - 
         */
        "removeFile": {
          url: urlBase + "/containers/:container/files/:file",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#upload
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `req` – `{object=}` - 
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `result` – `{object=}` - 
         */
        "upload": {
          url: urlBase + "/containers/:container/upload",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#download
         * @methodOf lbServices.Container
         *
         * @description
         *
         * <em>
         * (The remote method definition does not provide any description.)
         * </em>
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `container` – `{string=}` - 
         *
         *  - `file` – `{string=}` - 
         *
         *  - `res` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "download": {
          url: urlBase + "/containers/:container/download/:file",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#create
         * @methodOf lbServices.Container
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "create": {
          url: urlBase + "/containers",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#createMany
         * @methodOf lbServices.Container
         *
         * @description
         *
         * Create a new instance of the model and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "createMany": {
          isArray: true,
          url: urlBase + "/containers",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#upsert
         * @methodOf lbServices.Container
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "upsert": {
          url: urlBase + "/containers",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#exists
         * @methodOf lbServices.Container
         *
         * @description
         *
         * Check whether a model instance exists in the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `exists` – `{boolean=}` - 
         */
        "exists": {
          url: urlBase + "/containers/:id/exists",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#findById
         * @methodOf lbServices.Container
         *
         * @description
         *
         * Find a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         *  - `filter` – `{object=}` - Filter defining fields and include
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "findById": {
          url: urlBase + "/containers/:id",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#find
         * @methodOf lbServices.Container
         *
         * @description
         *
         * Find all instances of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Array.<Object>,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Array.<Object>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "find": {
          isArray: true,
          url: urlBase + "/containers",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#findOne
         * @methodOf lbServices.Container
         *
         * @description
         *
         * Find first instance of the model matched by filter from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "findOne": {
          url: urlBase + "/containers/findOne",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#updateAll
         * @methodOf lbServices.Container
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "updateAll": {
          url: urlBase + "/containers/update",
          method: "POST"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#deleteById
         * @methodOf lbServices.Container
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        "deleteById": {
          url: urlBase + "/containers/:id",
          method: "DELETE"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#count
         * @methodOf lbServices.Container
         *
         * @description
         *
         * Count instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `count` – `{number=}` - 
         */
        "count": {
          url: urlBase + "/containers/count",
          method: "GET"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#prototype$updateAttributes
         * @methodOf lbServices.Container
         *
         * @description
         *
         * Update attributes for a model instance and persist it into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - PersistedModel id
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        "prototype$updateAttributes": {
          url: urlBase + "/containers/:id",
          method: "PUT"
        },

        /**
         * @ngdoc method
         * @name lbServices.Container#createChangeStream
         * @methodOf lbServices.Container
         *
         * @description
         *
         * Create a change stream.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         *  - `options` – `{object=}` - 
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * Data properties:
         *
         *  - `changes` – `{ReadableStream=}` - 
         */
        "createChangeStream": {
          url: urlBase + "/containers/change-stream",
          method: "POST"
        },
      }
    );



        /**
         * @ngdoc method
         * @name lbServices.Container#updateOrCreate
         * @methodOf lbServices.Container
         *
         * @description
         *
         * Update an existing model instance or insert a new one into the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *   This method does not accept any parameters.
         *   Supply an empty object or omit this argument altogether.
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * <em>
         * (The remote method definition does not provide any description.
         * This usually means the response is a `Container` object.)
         * </em>
         */
        R["updateOrCreate"] = R["upsert"];

        /**
         * @ngdoc method
         * @name lbServices.Container#update
         * @methodOf lbServices.Container
         *
         * @description
         *
         * Update instances of the model matched by where from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `where` – `{object=}` - Criteria to match model instances
         *
         * @param {Object} postData Request data.
         *
         * This method expects a subset of model properties as request parameters.
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["update"] = R["updateAll"];

        /**
         * @ngdoc method
         * @name lbServices.Container#destroyById
         * @methodOf lbServices.Container
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["destroyById"] = R["deleteById"];

        /**
         * @ngdoc method
         * @name lbServices.Container#removeById
         * @methodOf lbServices.Container
         *
         * @description
         *
         * Delete a model instance by id from the data source.
         *
         * @param {Object=} parameters Request parameters.
         *
         *  - `id` – `{*}` - Model id
         *
         * @param {function(Object,Object)=} successCb
         *   Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {function(Object)=} errorCb Error callback with one argument:
         *   `httpResponse`.
         *
         * @returns {Object} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
         *
         * This method returns no data.
         */
        R["removeById"] = R["deleteById"];


    /**
    * @ngdoc property
    * @name lbServices.Container#modelName
    * @propertyOf lbServices.Container
    * @description
    * The name of the model represented by this $resource,
    * i.e. `Container`.
    */
    R.modelName = "Container";


    return R;
  }]);


module
  .factory('LoopBackAuth', function() {
    var props = ['accessTokenId', 'currentUserId'];
    var propsPrefix = '$LoopBack$';

    function LoopBackAuth() {
      var self = this;
      props.forEach(function(name) {
        self[name] = load(name);
      });
      this.rememberMe = undefined;
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.save = function() {
      var self = this;
      var storage = this.rememberMe ? localStorage : sessionStorage;
      props.forEach(function(name) {
        save(storage, name, self[name]);
      });
    };

    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {
      this.accessTokenId = accessTokenId;
      this.currentUserId = userId;
      this.currentUserData = userData;
    }

    LoopBackAuth.prototype.clearUser = function() {
      this.accessTokenId = null;
      this.currentUserId = null;
      this.currentUserData = null;
    }

    LoopBackAuth.prototype.clearStorage = function() {
      props.forEach(function(name) {
        save(sessionStorage, name, null);
        save(localStorage, name, null);
      });
    };

    return new LoopBackAuth();

    // Note: LocalStorage converts the value to string
    // We are using empty string as a marker for null/undefined values.
    function save(storage, name, value) {
      var key = propsPrefix + name;
      if (value == null) value = '';
      storage[key] = value;
    }

    function load(name) {
      var key = propsPrefix + name;
      return localStorage[key] || sessionStorage[key] || null;
    }
  })
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  }])
  .factory('LoopBackAuthRequestInterceptor', [ '$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {

          // filter out non urlBase requests
          if (config.url.substr(0, urlBase.length) !== urlBase) {
            return config;
          }

          if (LoopBackAuth.accessTokenId) {
            config.headers[authHeader] = LoopBackAuth.accessTokenId;
          } else if (config.__isGetCurrentUser__) {
            // Return a stub 401 error for User.getCurrent() when
            // there is no user logged in
            var res = {
              body: { error: { status: 401 } },
              status: 401,
              config: config,
              headers: function() { return undefined; }
            };
            return $q.reject(res);
          }
          return config || $q.when(config);
        }
      }
    }])

  /**
   * @ngdoc object
   * @name lbServices.LoopBackResourceProvider
   * @header lbServices.LoopBackResourceProvider
   * @description
   * Use `LoopBackResourceProvider` to change the global configuration
   * settings used by all models. Note that the provider is available
   * to Configuration Blocks only, see
   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}
   * for more details.
   *
   * ## Example
   *
   * ```js
   * angular.module('app')
   *  .config(function(LoopBackResourceProvider) {
   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');
   *  });
   * ```
   */
  .provider('LoopBackResource', function LoopBackResourceProvider() {
    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setAuthHeader
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} header The header name to use, e.g. `X-Access-Token`
     * @description
     * Configure the REST transport to use a different header for sending
     * the authentication token. It is sent in the `Authorization` header
     * by default.
     */
    this.setAuthHeader = function(header) {
      authHeader = header;
    };

    /**
     * @ngdoc method
     * @name lbServices.LoopBackResourceProvider#setUrlBase
     * @methodOf lbServices.LoopBackResourceProvider
     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.
     * @description
     * Change the URL of the REST API server. By default, the URL provided
     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.
     */
    this.setUrlBase = function(url) {
      urlBase = url;
    };

    this.$get = ['$resource', function($resource) {
      return function(url, params, actions) {
        var resource = $resource(url, params, actions);

        // Angular always calls POST on $save()
        // This hack is based on
        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
        resource.prototype.$save = function(success, error) {
          // Fortunately, LoopBack provides a convenient `upsert` method
          // that exactly fits our needs.
          var result = resource.upsert.call(this, {}, this, success, error);
          return result.$promise || result;
        };
        return resource;
      };
    }];
  });

})(window, window.angular);
